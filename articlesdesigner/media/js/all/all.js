

function setSelectListByStringArray(list,idParent) {
    var html = "";
    for(var i = 0; i < list.length; i++) {
        html += "<option>"+list[i]+"</option>";
    }
    $("#"+idParent).html(html);
}

function listStringArrayWithoutEmptyEntry(list) {
    var resultList = new Array();
    for(var i = 0; i < list.length; i++) {
        if (list[i]) {
            resultList.push(list[i]);
        } 
    }
    return resultList;
}

function listStringArrayWithExtension(list,arrayExtension) {
    var resultList = new Array();

    for(var i = 0; i < list.length; i++) {        
        var array = list[i].split(".");
        if (array.length > 0) {
        var extension = array[array.length-1];
            for (var j=0; j < arrayExtension.length; j++) {
                if (extension == arrayExtension[j]) {
                    resultList.push(list[i]);
                    break;
                }
            }
        }        
    }
    return resultList;
}

function listOfKeyboardLetters() {
    var result = [];
    for(var i=32;i<127;i++) {
        if (i == 32) {
            result.push("space");
        } else {
            result.push(String.fromCharCode(i));
        }
    }
    removeObjectFromObjectsArray("\"",result);
    return result;
}

function arrayWithFirstElement(array,element) {
    var copyArray = array.slice(0);
    copyArray.splice(0,0,element);
    return copyArray;
}

function arrayWithFirstEmptyElement(array) {
    return arrayWithFirstElement(array, "");
}

function arrayWithNumeration(from, to) {
    var result = [];
    for(var i=from; i < to; i++) {
        result.push(i);
    }
    return result;
}

function firstElementOfArray(array) {
    return (array.length > 0)?array[0]:"";
}

function arrayFromArrayParam(array, param) {
    var arrayResult = new Array();
    for(var i=0; i < array.length; i++) {
        var screenObj = array[i];
        if (screenObj[param]) {
            arrayResult.push(screenObj[param]);
        }
    }
    return arrayResult;
}      

function paramFromParamAndValue(array, paramReturn, paramSearched, valueSearched) {
    for(var i=0; i < array.length; i++) {
        var screenObj = array[i];
        if (screenObj[paramSearched] == valueSearched) {
            return screenObj[paramReturn];
        }
    }
    return undefined;
}   
function objectFromParamAndValue(array, paramSearched, valueSearched) {
    if (!array || !paramSearched || !valueSearched) {
        return undefined;
    }
    for(var i=0; i < array.length; i++) {
        var obj = array[i];
        if (obj[paramSearched] == valueSearched) {
            return obj;
        }
    }
    return undefined;
}

function listObjectValues(obj) {
    var result = [];
    if (obj) {
        for( var prop in obj ) { 
            result.push(obj[prop]);
        }
    }
    return result;
}  

function isExistStringInArray(string,array) {
    for(var i = 0; i < array.length; i++) {
        if(array[i] == string) {
            return true;
        }
    }
    return false;
}

function autonumerateForArrayWithString(array,string) {
    for(var i = 1; ; i++) {
        var name = (string + i);
        if(isExistStringInArray(name,array) == false) {
            return {name:name, number:i};
        }
    }
    return string;
} 

function removeObjectFromObjectsArray(object, array) {
   if (object) {
       var index = array.indexOf(object); 
       if (index>=0) {
           array.splice(index, 1);
           return true; 
       }        
   }
   return false;
}

function pad (str, max) {
    return str.length < max ? pad("0" + str, max) : str;
}

function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.round(Math.random() * 15)];
    }
    return color;
}

function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
    var ratio = [maxWidth / srcWidth, maxHeight / srcHeight ];
    ratio = Math.min(ratio[0], ratio[1]);
    return { width:srcWidth*ratio, height:srcHeight*ratio };
}

function shortenString(string, maxLength, charsSplit) {
    var lengthCharsSplit = charsSplit.length;
    var lengthString = string.length;
    
    if (lengthString > maxLength) {
        var res = string.substring(0,maxLength-8);
        res += charsSplit;
        res += string.substring(lengthString-4,lengthString);
        return res;
    } else {
        return string;
    }
}


String.prototype.lastChar = function() {
    if (this.length > 0) {
        return this[this.length-1];   
    } else {
        return "";
    }
    
}

String.prototype.isLastChar = function (charToCheck) {
    var str = this;
    if (str && str.length > 0 && charToCheck && charToCheck.length == 1 && (str[str.length-1] == charToCheck)) {
        return true;
    }
    return false; 
};  

// find first not empty char in string and return him index, example:  "  my_text" -> return 2  
String.prototype.indexFirstNotEmptyChar = function() {
    var str = this; 
    for(var i=0; i < str.length; i++) {
        if (str[i].trim()) { // != ""
            return i;
        }
    }
    return -1;
}

String.prototype.replaceAll = function (find, replace) {
    var str = this;
    return str.replace(new RegExp(find.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), 'g'), replace);
};  

// string with correct system name without space, 
String.prototype.systemString = function() {
    var array = new Array(" ","/","\\",":","*","?","\"","<",">","|",";","[","]","{","}");
    var result = this; 
    for(var i=0; i< array.length; i++) {
        result = result.replaceAll(array[i],"_");
    }
    return result;
}

// string with correct system name without space, 
String.prototype.variableString = function() {
    var array = new Array(" ","/","\\",":","*","?","\"","<",">","|",";","[","]","{","}",")","(");
    var result = this; 
    for(var i=0; i< array.length; i++) {
        result = result.replaceAll(array[i],"_");
    }
    return result;
}


String.prototype.correctVariable = function(prefix) {
    var result = this.variableString(this);
    if (result && result.length > 0 && result.charCodeAt(0) >= 48  && result.charCodeAt(0) <= 57) {
        result = prefix + result;
    }
    return result;
}

String.prototype.isCorrectVariable = function() {
    var variable = this;
    var result = this.correctVariable("_");
    if (variable == result) {
        return true;
    } else {
        return false;
    }
}

String.prototype.searchAndSubstring = function(searchValue) {
    var result = this;
    var index = this.search(searchValue);
    if (index > -1) {
        var temp = "";
        temp += result.substring(0, index);
        temp += result.substring(index+searchValue.length, this.length);
        result = temp;
    } 
    return result;
}

String.prototype.cut= function(i0, i1) {
    return this.substring(0, i0)+this.substring(i1);
}

String.prototype.splice = function( idx, rem, s ) {
    return (this.slice(0,idx) + s + this.slice(idx + Math.abs(rem)));
};


String.prototype.beetweenChars = function( charStart, charEnd ) {
    var text = this.match(charStart+"[^"+charEnd+"]*"+charEnd);
    if (text && text.length>0) {
        text[0] = text[0].substring(1, text[0].length-1);
        return text[0];
    }
    return "";
};

String.prototype.beetweenStrings = function(leftValue, rightValue, subLeft) {
    var result = "",
        indexLeft = this.search(leftValue),
        indexRight = this.search(rightValue),
        leftWord = this.match(leftValue);
        
    if(leftWord) { // if exist its mean is one or more matched
        var lengthLeftWord = leftWord[0].length;
        indexLeft += lengthLeftWord;
    }   
   //  + stringLeft.length        
        
    if (subLeft) { indexLeft += subLeft; }
    if (indexLeft > -1 && indexRight > -1 && indexRight > indexLeft) {
        var temp = "";
        temp += this.substring(indexLeft, indexRight); //(indexLeft, indexRight);
        result = temp;
    } 
    return result;
}

// pobiera kontent z przystych wystapien znakow np dla nawiasow ((xx(yy)o)) ->  (xx(yy)o)
String.prototype.contentFromEvenChars = function(charLeft, charRight) {
    var result = "",
        countOpened = 0,
        countClosed = 0,
        isOpened = false;            
    
    for(var i=0; i < this.length; i++) {
        if (isOpened) {
            result += this[i];
        }
        
        if (this[i] == charLeft) { countOpened++; isOpened = true; }
        if (this[i] == charRight) {
            countClosed++; 
            if (!isOpened) {
               return "";
            } 
        }
        if (isOpened && countOpened == countClosed) {
            if (result.length > 0) {  // remove last char
                result = result.substring(0, result.length-1);
            }
            return result;
        }
    }    
    return "";
}

// String. pobiera zakres wewnetrzny z przystych wystapien znakow np dla nawiasow ((xx(yy)o)) ->  (xx(yy)o)
String.prototype.rangeFromEvenChars = function(charLeft, charRight) {
    var range = { },
        //result = "",
        countOpened = 0,
        countClosed = 0,
        isOpened = false;            
    
    for(var i=0; i < this.length; i++) {
        /*if (isOpened) {
            result += this[i];
        }*/        
        if (this[i] == charLeft) { 
             countOpened++; 
             isOpened = true;
             if (!range.from) {
                 range.from = i+1;
             }
        }
        if (this[i] == charRight) {
            countClosed++; 
            if (!isOpened) {
               return null;
            } 
        }
        if (isOpened && countOpened == countClosed) {
            //if (result.length > 0) {  // remove last char
            //    result = result.substring(0, result.length-1);
            //}
             if (!range.to) {
                 range.to = i-1;
             }            
            return range;
        }
    }    
    return null;
}


String.prototype.countFirstEmptyLines = function(string) {
   var array = this.split("\n");
   for(var i=0; i < array.length; i++) {
       array[i] = array[i].trim();
       if (array[i]) {
           return i;
       }
   }
   return 0;
}

// Array. Pobiera zakres wewnetrzny z parzystych wystapien znakow np dla nawiasow ((xx(yy)o)) ->  (xx(yy)o)
// options.includeChars
// options.includeChars  
Array.prototype.rangeFromEvenChars = function(charLeft, charRight, options) {
    var range = { },
        //result = "",
        countOpened = 0,
        countClosed = 0,
        isOpened = false,
        iLStart = 0,
        i = 0;
        
    if (options && options.startPos) {
        iLStart = options.startPos.line;
        i = options.startPos.ch;
    }    
       
    for(var iL=iLStart; iL < this.length; iL++) {
        var line = this[iL];
        for(; i < line.length; i++) {
            //if (isOpened) {
            //    result += line[i];
            //}
            if (line[i] == charLeft) { 
                 countOpened++; 
                 isOpened = true;
                 if (!range.from) {
                     if (options && options.includeChars) {
                         range.from = {
                             line: iL,
                             ch: i
                         } 
                     } else {
                         range.from = {
                             line: iL,
                             ch: i+1
                         } 
                     }
                 }
            }
            if (line[i] == charRight) {
                countClosed++; 
                if (!isOpened) {
                   return null;
                } 
            }
            if (isOpened && countOpened == countClosed) {
                //if (result.length > 0) {  // remove last char
                //    result = result.substring(0, result.length-1);
                //}
                 if (!range.to) {
                     if (options && options.includeChars) {
                         range.to = {
                             line: iL,
                             ch: i
                         }  
                     } else {
                         var ch = i-1;                     
                         if (ch < 0) {
                             iL--;
                             ch = this[iL].length;
                         }                     
                         range.to = {
                             line: iL,
                             ch: i
                         }
                     }                
                 }            
                return range;
            }
        }
        i = 0;
    }    
    return null;
}

// mechanism similar to method search of object String 
// return posArray {line, ch}
Array.prototype.search = function(searchvalue) {
    if (typeof searchvalue === "string" || Object.prototype.toString.call( searchvalue ) === "[object RegExp]") {
        for(var i = 0; i < this.length; i++) {
            var ch = this[i].search(searchvalue);
            if (ch > -1) {
                return { line: i, ch: ch}
            }
        }
    }
}

// mechanism similar to method substring of object String 
// posArrayEnd is optional
// return array
Array.prototype.substring = function(posArrayStart, posArrayEnd) {
    var result = [];
    if (!posArrayEnd) {
        var posArrayEnd = {};
        posArrayEnd.line = this.length-1;
        posArrayEnd.ch = this[this.length-1].length;
    }
    if (posArrayStart && posArrayEnd && posArrayStart.line <= posArrayEnd.line) {
  
        if (posArrayStart.line == posArrayEnd.line && posArrayStart.ch < posArrayEnd.ch) {
            var string = this[posArrayStart.line].substring(posArrayStart.ch, posArrayEnd.ch);
            result.push(string);           
        } else if (posArrayStart.line  < posArrayEnd.line) {
            
            var startLine = this[posArrayStart.line],
                firstString = startLine.substring(posArrayStart.ch, startLine.length),
                endLine = this[posArrayEnd.line],
                endString = endLine.substring(0, posArrayEnd.ch),
                deltaLine = posArrayEnd.line - posArrayStart.line; 
                            
            result.push(firstString);
            if (deltaLine > 1) {
               var elemsToAdd = this.slice(posArrayStart.line+1, posArrayStart.line+deltaLine-1);
               for(var i=0; i < elemsToAdd.length; i++) {
                   result.push(elemsToAdd[i]);    
               }                    
            }            
            result.push(endString);          
        }
    }
    return result; 
}



var ObjectHelper = {
    copyParamOfArrayObject: function(paramName, objectArray, options) {
        var result = [],
            paramValue = "";
        if (Object.prototype.toString.call( objectArray ) === '[object Array]') {
            for(var i=0; i < objectArray.length; i++) {
                var object = objectArray[i];
                    paramValue = object[paramName];
                result.push(paramValue);
            }
        }
        return result;
    }
}

// override: set title dialog from text to html
if ($.ui) {
    $.widget("ui.dialog", $.extend({}, $.ui.dialog.prototype, {
        _title: function(title) {
            if (!this.options.title ) {
                title.html("&#160;");
            } else {
                title.html(this.options.title);
            }
        }
    }));
}

function popupwindow(url, title, w, h) {
  var left = (screen.width/2)-(w/2);
  var top = (screen.height/2)-(h/2);
  return window.open(url, title, 'toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, location=no, copyhistory=no, width='+w+', height='+h+', top='+top+', left='+left);
} 

  function playSound(el,soundfile) {
      if (el.mp3) {
          if(el.mp3.paused) el.mp3.play();
          else el.mp3.pause();
      } else {
          el.mp3 = new Audio(soundfile);
          el.mp3.play();
          el.mp3.ended = function() {
              alert("end");
          }
      }
  }
  
  /*function stopSound(el) {
      
      if (el.mp3) {
          if(el.mp3.paused) el.mp3.play();
          else el.mp3.pause();
      } else {
          el.mp3 = new Audio(soundfile);
          el.mp3.play();
          el.mp3.ended = function() {
              alert("end");
          }
      }
  }  */
  
function randomTo(number) {
    var number = (Math.round(Math.random()*number)-1);
    return (number < 0)?0:number;
}

// autoCorr


// word - word who wrote
// wordPatten  =  word correct   
// pattern is : .?char.?char.?char.?char(...).?  and next each character is in turn removed and check again
function checkSimilarString(word, wordPattern) {
    var ch = "",
        regExpString = "",
        regExp = {};
        
    for(var j=0; j < wordPattern.length; j++) {
        
        regExpString = "";
        for(var i=0; i < wordPattern.length; i++) {
            ch = wordPattern[i];
            regExpString += ".?";
            if (i!=j) {
                regExpString += ch;
            }
        }
        regExpString += ".?";
        
        regExp = new RegExp("^"+regExpString+"$","i");
        if (word) {
            word = word.trim();
        }
        if (word.search(regExp) == 0) { // > -1 ) {
            var match = word.match(regExp);
            if (match) {
                return match[0];
            }
        }
    }    

    return null;
}


function jsRange(_from, _to) {
    this.from = _from;
    this.to = _to;
    this.length = function() {
        return this.to - this.from;
    }
    this.offset = function(offset) {
        this.from += offset;
        this.to += offset;
    }    
    this.copy = function() {
        var r = new Range();
        r.from = this.from;
        r.to = this.to;
        return r;
    }
}
function jsRangeMake(_from, _to) {
    return new jsRange(_from, _to);
}
//jsRange.prototype.create = function(_from, _to) {
//    return new jsRange(_from, _to);
//}

/*
 Range Array
  from: { line, ch }
  to: { line, ch }

 */



// dziedziczenie
/*Object.prototype.extend = function () {
   for (i in arguments) {
    tempObj = new arguments[i];
    for (property in tempObj) {
        this[property] = tempObj[property];
    } 
   }
};*/
////////////////////
// PARSER OF CODE - parse  char by char

/*var JSCodeConst = {
    "for": "for",
    "if": "if",
}

var JSCodeEvents = {
    foundWord: "f_word",
    foundWord: "f_word",
}*/


var ParserJS = {
    // code: string, charStart: regExp|char, charEnd: regExp(char)|char
    betweenCharsWithoutString: function( code, charStart, charEnd) {
        var result = "",
            tmpRes = "",
            beginCheck = false,
            getToEnd = (typeof charEnd === "undefined");
        
        if (!charStart) {beginCheck = true;}  
            
        var parserChars = new ParserJSCode({
            //listWords: ["zmienna1"],
            events: {
                foundChar: function(obj) {         
                    var isAnyQuotation = obj.state.isOpenQuotation1 || obj.state.isOpenQuotation2,
                        isEqualStart = false,
                        isEqualEnd = false;
                        
                    if (charEnd instanceof RegExp) { isEqualEnd = charEnd.test(obj.ch); }
                    if (typeof charEnd ===  "string") { isEqualEnd = (charEnd == obj.ch); }
                    
                    if (isEqualEnd && beginCheck && !isAnyQuotation) {
                        result = tmpRes;
                        beginCheck = false;
                        parserChars.stop();
                    }

                              
                    if (beginCheck) {
                        tmpRes += obj.ch;
                    }                              
                    
                    if (charStart instanceof RegExp) { isEqualStart = charStart.test(obj.ch); }
                    if (typeof charStart ===  "string") { isEqualStart = (charStart == obj.ch); }                                                                                          
                    if (isEqualStart && !beginCheck && !isAnyQuotation) { 
                        beginCheck = true;
                    }                   
                    
                },                
            }
        });
        parserChars.parse(code); 
        if (getToEnd) {
            result = tmpRes;
        }        
        return result;
    },
    replaceWordsOutsideString: function(code, word, replace) {  //word:tekst replace:XX/   tekst+"tekst"  -> XX+"tekst"  
        var prJS = new ParserJSCode({
            events: {
                foundWord: function(obj) {
                    if (obj.word == word && 
                        (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 )) {
                       // console.log(">>> "+obj.word); // obj.word
                        var leftSide = code.substring(0, obj.iC - obj.word.length),
                            rightSide = code.substring(obj.iC, code.length);
                        code = leftSide+replace+rightSide;
                        prJS.setCode(code);
                        prJS.seek(0); 
                    }
                }              
            }
        });
        prJS.parse(code);   
        return code; 
    }
}


function ParserJSCode(options) {
    var that = this,
        events = (options && options.events)?options.events:{},
        code = "",
        word = "",
        iC = 0,
        forceStop = false;
        
    //this.listWords = (options && options.listWords)?options.listWords:[];
    var defaultState = {
        isAlpha: false,
        isNumeric: false,
        isDot: false,
        isFloor: false,
        isDash: false,
        isSquereBracket: false,
        isOpenQuotation1: false, // "
        isOpenQuotation2: false, // '
    }
    this.state = {};
    
    this.addEventListener = function(type, listener) {
        if (type && listener && typeof listener === "function") {
            events[type] = listener;
        }
    }

    this.parse = function(_code) {
        var ch = "",
            mod = "";
        that.setCode(_code);
        iC=0;
        forceStop = false;
        for(; iC < code.length; iC++) {            
            if (forceStop) { return; }            
            ch = code[iC];
            mod = code.substring(iC, code.length);
            
            // aaazmienna1sas

            //console.log("---");
            //console.log(ch);
            //console.log(mod);
                        
            //var kWord = findWords(mod);
            //if (kWord) {
            //    iC += (kWord.length-1);
            //} else {
                checkChar(ch, iC);
            //}
            
        }   
    }
    
    
    /*
    var findWords = function(code) {
        var words = ["for", "if", "var"];        
        for(var i=0; i < words.length; i++) {
            if (checkIfExistFirstWord(code, words[i], "key")) {
                return words[i];
            }            
        }
        words = that.listWords;        
        for(var i=0; i < words.length; i++) {
            if (checkIfExistFirstWord(code, words[i], "my")) {
                return words[i];
            }            
        }        
    }
    
    // @param typeWord = "key"|"my"
    var checkIfExistFirstWord = function(code, word, typeWord) {              
        var index = code.search(word);
        if (index == 0) {
            if (events && events.foundWord && typeof events.foundWord === "function") {
                events.foundWord({
                    word: word,
                    typeWord: typeWord
                });
                return true;
            }
        }
        return false;
    }*/
    
    var checkChar = function(ch, iC) {
        var st = that.state,
            kWords = ["for", "if", "var"],
            canAddNewWord = false;
        if (/[a-zA-Z]/.test(ch)) { st.isAlpha = true;} else {st.isAlpha = false; }
        if (/[0-9]/.test(ch)) { st.isNumeric = true;} else {st.isNumeric = false; }
        if (/[\.]/.test(ch)) { st.isDot = true;} else {st.isDot = false; }
        if (/[\[\]]/.test(ch)) { st.isSquereBracket = true;} else {st.isSquereBracket = false; }
        if (/[_]/.test(ch)) { st.isFloor = true;} else {st.isFloor = false; }
        if (/[-]/.test(ch)) { st.isDash = true;} else {st.isDash = false; }
                
        if (events && events.foundChar && typeof events.foundChar === "function") {
            events.foundChar({
                iC: iC,
                ch: ch,
                state: st
            });
        } 
        
        // 
        if (st.isAlpha || st.isNumeric || st.isFloor || st.isDot) {  //  || st.isSquereBracket) {
            word += ch;
            if (iC >= code.length-1) { // it was last char so maybe i will be have to exe event foundWord
                canAddNewWord = true;
                iC = code.length;
            }
        } else {
            canAddNewWord = true;
        }         
        
        if (word && canAddNewWord) {
            if (events && events.foundWord && typeof events.foundWord === "function") {
                var typeWord = "";
                if (kWords.indexOf(word) > -1) {
                    typeWord = "key";
                } else {
                    typeWord = "";
                }
                events.foundWord({
                    iC: iC,
                    word: word,
                    typeWord: typeWord,
                    state: st
                });
            }    
            word = ""; 
        }
                
        
        if (!st.isOpenQuotation2) {  // is not open 'xxx
            if (ch == '"') {
                if (st.isOpenQuotation1) { 
                    st.isOpenQuotation1 = false;
                } else {
                    st.isOpenQuotation1 = true;
                }
            }
        }
        if (!st.isOpenQuotation1) {  
            if (ch == "'") {
                if (st.isOpenQuotation2) { // '
                    st.isOpenQuotation2 = false;
                } else {
                    st.isOpenQuotation2 = true;
                }
            }           
        }        
        
    }
        
    this.seek = function(ic) {
        iC=ic;
    }
    
    this.getSeek = function() {
        return iC;
    }
    
    this.setCode = function(nCode) {
        code = nCode;
        this.state = $.extend(true, {}, defaultState);
    }
    
    this.stop = function() {
        forceStop = true;
    }    
    
    this.testUnit = function() {
        
        var string = "";
        
        var test = new ParserJSCode({
            //listWords: ["zmienna1"],
            events: {
                foundWord: function(obj) {
                    //console.log("found:"+obj.word+", type:"+obj.typeWord);
                    console.log("Found word:"+JSON.stringify(obj));
                },
                foundChar: function(obj) {
                    console.log("Found char:"+JSON.stringify(obj));
                },                
            }
        });        
        
        var code = "";
        code += 'conforsole.log("Hello.sd world"); ';
        code += 'for(var i=0; i < 200; i++) { wrifote(i); } if(zmienna1>20) {} ';
        //test.parse(code);        
    }  
    

    // kod  a kod a
    
    
    // pobieramy wyrazy:
    /*
     
     // pobieramy zbite w jednosc  alfanumeryczne znaki, kropke, 
        dzielnikiem  jest  +, -, spacja, ), (,  >, =,  <,  {,   },  ;, przecinek, !,  ",  ',    
     
        otrzymamy kolejne wyrazy, ktore bedziemy wyrzucac na wyjscie, kiedy nadejdzie dzielnik
        to nam da slowa kluczowe, zmienne,   oraz zawartosci nawiasow
        
        otrzymamy kolejne znaki dzielnikow
     
     */
    
     
    
    
}

// checker for statement miss string:    xxx "MISS_CHARS" xx "MISS_CHARS" xxx ..  
function QuotationHelper() {
    var that,
        isOpenQuotation1 = false, // "
        isOpenQuotation2 = false; // '
     
    this.sendChar = function(ch) {
        if (!isOpenQuotation2) { 
            if (ch == '"') {
                if (isOpenQuotation1) { 
                    isOpenQuotation1 = false;
                } else {
                    isOpenQuotation1 = true;
                }
            }
        }
        if (!isOpenQuotation1) {  
            if (ch == "'") {
                if (isOpenQuotation2) { // '
                    isOpenQuotation2 = false;
                } else {
                    isOpenQuotation2 = true;
                }
            }           
        }   
    }    
        
    this.isAnyQuotations = function() {
        return isOpenQuotation1 || isOpenQuotation2;
    }
    
    this.reset = function() {
        isOpenQuotation1 = false;
        isOpenQuotation2 = false;
    }
        
}


// bede wiedzial gdzie jestem, czy string czy w forze, czy if
// jesli dojde np do srodka stringa

//if (a < 10) {  write("sdsad a "+a); }

/*
znalazlem if

otwarcie nawiasu
warunek
koniec nawiasu
otwarcie bloku
funkcja 
rozpoczecie string
string
koniec string
operator dodawania string
string lub zmienna
koniec funkcji
srednik

koniec bloku if
*/

 /*
chce zobaczyc czy zmienna 
*jest poza string 
*w warunku if 
*w petli for
 */












////////////////////
// ALGORITHM

/*
<   < 
>   >
*   *
/   /
+   +
-   -
==  =
!=  ~
<=  ,

*/

//2 + 20 == -


var Algorithm = {
    rpn_to_info : function(input) {
        input = input.trim();
        var ar = input.split(/\s+/), st = [], token,
            re2 = /^\+|\-|\*|\\|!=|&&|\|\||<=|>=|<|>|==|=$/,       // /^[\+\-\/\*\(\)&\|]$/,  // & is &&, | is ||
            info = [],
            error = "",
            resObj = {};
        while( token = ar.shift()) {
            if(token == +token) { // token  jako liczba
                st.push(token); 
            } else if(!re2.test(token)) { // token jako zmienna 
                st.push(token);
            } else {
                var n2 = st.pop(), n1 = st.pop();
                //var re = /^[\+\-\/\*]$/;
                //if(n1 != +n1 || n2 != +n2 || !re.test(token)) {
                //    throw new Error('Invalid expression: ' + input);
                //}
                //token = token.replace("&","&&"); old 
                //token = token.replace("|","||"); old
                var statement = n1 + token + n2;
                st.push(eval(statement));    
                var objLocalInfo = {                    
                    leftOperand:  n1,
                    leftValue: eval(n1),
                    leftIsNumber: !isNaN(n1),
                    rightOperand: n2,
                    rightValue: eval(n2),
                    rightIsNumber: !isNaN(n2),
                    token: token,
                    statement: statement, // code
                    value: eval(statement)
                }         
                info.push(objLocalInfo);                
            }
        }
        if(st.length !== 1) {
            error = 'Invalid expression: ' + input;
            //throw new Error('Invalid expression: ' + input);
        }
        var valueResult = eval(st.pop()),
            valueIsNumber = !isNaN(valueResult);
        resObj = {value: valueResult, valueIsNumber: valueIsNumber,  info: info, json: JSON.stringify(info), error: error};
        resObj.success = (error)?false:true;
        return resObj;
    },
    rpn_to_value: function(input) {
        return this.rpnInfo(input).value;
    },
    infix_to_rpn_to_info : function(input) {
        var rpn = this.infix_to_rpn(input),
            info = this.rpn_to_info(rpn);
        return info;
    },
    infix_to_rpn : function(input) { 
        
        input = input.trim();
                
        function priority(tn) {
            switch(tn) {
                 
                case "*": case "/": return 7;
                case "+": case "-": return 6;
                
                case "<": case ">": case "<=": case ">=": return 5;
                case "==": case "!=": return 4;                
                
                case "&&": return 3;
                case "||": return 2;
                case "=": return 1;
                                
                default: return 0;
            }
        }
        
        // (  -> %1%
        // %1%   - >  (
        
        var hashSign = {
            map: ["(",")","&","|"],    // "*","/","+","-",
            sign2indexHash: function(sign) { // ( -> %1%
                for(var ind = 0; ind < this.map.length; ind++) {
                    if (this.map[ind] == sign) {
                        return "%"+ind+"%";
                    }        
                }                            
            },
            /*indexHash2sign: function(indexHash) { // %1% -> (
                indexHash = parseInt(indexHash.replace(/%/g, ""));
                if (indexHash > -1 && indexHash < this.map.length) {
                    return this.map[indexHash];    
                }
            },*/
            replaceAllStringHash2sign: function(string) { //  hash to sign for all map
                for (var i=0; i < this.map.length; i++) {
                    string = string.replace(new RegExp("%"+i+"%","g"), this.map[i]);
                }
                return string;
            }            
        }        
           
        // in string  search statement with brackets and change brackets in symbols
        //  10 * 20 * function(varr) +20   ->  10 * 20 * function%1%varr%2% +20 
        //  10 * 20 * arr[function(varr)*2] +20   ->  10 * 20 * arr[function%1%varr%2%*2] +20 
        function findVariableOfFunction(string) {
            var typeOpers = { none: "", brackets: "br", array: "ar" }
            var result = "", isFind = false, tO = typeOpers.none, isoB = false, oB = 0, cB = 0;                
            for(var i=0; i < string.length; i++) {  // find first sign with letter
                if (!isFind && /^[A-Za-z\_]+$/.test(string[i])) { // variable
                    isFind = true;
                }
                
                //   /^\+|\-|\*|\\|!=|&&|\|\||<=|>=|<|>|==$/
                //  /^[+\-*\\\)]+$/
                
                if (isFind && tO == typeOpers.none && /^\+|\-|\*|\\|!|&|\||<|>|=|\)$/.test(string[i])) {
                    isFind = false;
                }
                // zmienna1*
                
                var ch  = string[i];
                //var mod  = string.substring(i, string.length);
                if (isFind) {  
                    if (tO == typeOpers.none || tO == typeOpers.array) {
                        if (string[i] == "[") {
                            tO = typeOpers.array;                        
                        } else if (string[i] == "]") {
                            isFind = false;
                            tO = typeOpers.none;
                        } else if (string[i] == "(" && tO == typeOpers.array) {
                            ch = hashSign.sign2indexHash(string[i]);  
                            string = string.splice(i, 1, ch);  
                            i += 2; 
                        } else if (string[i] == ")" && tO == typeOpers.array) {
                            ch = hashSign.sign2indexHash(string[i]);
                            string = string.splice(i, 1, ch);  
                            i += 2; 
                        }
                    }
                    
                    if (tO == typeOpers.none || tO == typeOpers.brackets) {
                        if (string[i] == "(") {     
                            tO = typeOpers.brackets;
                            oB++; 
                            isoB=true; 
                            ch = hashSign.sign2indexHash(string[i]);  
                            string = string.splice(i, 1, ch);  
                            i += 2; 
                        } else if (isoB && string[i] == ")") { 
                            cB++; 
                            ch = hashSign.sign2indexHash(string[i]);  
                            string = string.splice(i, 1, ch); 
                            i += 2;
                        }      
                    }
                    
                    var indexHash = hashSign.sign2indexHash(string[i]);
                    if (indexHash) {
                        string = string.splice(i, 1, indexHash);
                        i += 2;
                    }

                    //result += ch;
                    if (isoB && oB == cB) {
                        isFind = false;
                        tO = typeOpers.none;
                        isoB = false;
                        oB = 0;
                        cB = 0;
                    }
                }
            }
            return string;
        }
        
        /*function changeAndOrInOperators(conditionCode) {
            var 
            var prJS = new ParserJSCode({
                events: {
                    foundChar: function(obj) {
                        if ((!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 )) {                                            
                            
                            var 

                            var newWord = prefixEMU+"."+obj.word,
                                leftSide = code.substring(0, obj.iC - obj.word.length),
                                rightSide = code.substring(obj.iC, code.length);
                                                                                
                            code = leftSide+newWord+rightSide;
                            prJS.setCode(code);
                            prJS.seek(0); 
                        }
                    }              
                }
            });
            prJS.parse(conditionCode);
            return conditionCode;
        }*/
        
        
        function setNegation(signs) {    // -1*-1  ->  (0-1)*(0-1)
            var //result = "",
                ch = "",
                findNeg = true;
                
            for(var i=0; i < signs.length; i++) {                
                if (findNeg) {
                    if (signs[i] == "-" && i+1 < signs.length && !isNaN(signs[i+1])  ) {                        
                        signs.splice(i+2,0,")");
                        signs.splice(i,0,"0");
                        signs.splice(i,0,"(");
                        i+=3;
                    }
                }
                
                // we set neg for  (,+,-,\,*,|,&
                if ( /[\(\+\-\/\*\|&]$/.test(signs[i]) ) {
                    findNeg = true;
                } 
                // for end of bracket ')' and digit
                if ( /[\)\d]$/.test(signs[i]) ) {
                    findNeg = false;
                }                
                // for variable
                if ( /[a-zA-Z]$/.test(signs[i]) ) {
                    findNeg = false;
                }                
                
                /*if (!isFind && /^[\-]\d$/.test(ch)) { // variable
                    findMinus = true;
                    ch += "("
                    isFind = true;
                }
                result += ch;*/
            }
           // return result;
        }
        
        
        // ar = ar.replace(/or/g," || ").replace(/and/g," && "),               
        
        input = ParserJS.replaceWordsOutsideString(input,"and"," && ");
        input = ParserJS.replaceWordsOutsideString(input,"or"," || ");
        input = findVariableOfFunction(input); // set hash in variable
       
        // OR AND
            // re - correct token operator
            // re2 - search statement 
        var re = /^\+|\-|\*|\\|!=|&&|\|\||<=|>=|<|>|==|=$/,   //token     //    /^[\+\-\/\*\|&]$/,  //  
            re2 = /^\+|\-|\*|\\|!=|&&|\|\||<=|>=|<|>|==|=|\(|\)$/,                 //    /^[\+\-\/\*\(\)\|&]$/,
            ar = "", st = [], token, out = "";   
            
            
        ar = input.replace(/\+/g," + ").replace(/\-/g," - ").replace(/\*/g," * ").replace(/\//g," / ").replace(/\(/g," ( ").replace(/\)/g," ) ");
        ar = ar.replace(/\|\|/g," || ").replace(/&&/g," && ");
        ar = ar.replace(/<=/g," <= ").replace(/>=/g," >= ");                
        ar = ar.replace(/==/g," == ").replace(/!=/g," != ");
        
        //ar = ar.replace(/</g," < ").replace(/>/g," > ");

        // <, >
        for(var ind=0; ind < ar.length; ind++) {
            if ((ar[ind] == "<" || ar[ind] == ">") && ind+1 < ar.length && ar[ind+1] != "=" ) {
                ar = ar.splice(ind, 1, " "+ar[ind]+" ");
                ind+=2;
            }
        }
        // =
        for(var ind=0; ind < ar.length; ind++) {
            if (ar[ind] == "=" && ind>0 && ind+1 < ar.length && 
                (ar[ind+1] != "=" && ar[ind-1] != "="   && ar[ind-1] != "<" && ar[ind+1] != "<"  && ar[ind-1] != ">" && ar[ind+1] != ">")    ) {
                ar = ar.splice(ind, 1, " "+ar[ind]+" ");
                ind+=2;
            }
        }        
        
        //lecimy po kolei
        //jesli znak
        
        
        //if    a <= 10
        //znajduje znak  <,
        //jesli kolejny jest         
        //<____
        
        
        
        /*var indexCurr = 0;
        do { // remove sign '<', '>' without change '<=', '>='
            var index = -1,
                ch = "";
            index = ar.search(/</);
            if (index > -1) {
                ch = "<";
            }
            if(index < 0) {               
               index = ar.search(/>/);
               if (index > -1) {
                  ch = ">";
               }
            }
            
            // find '<' or '>'
            index 
            if (ch) {
                indexCurr = index;
            }
            
            indexCurr = indexCurr || index;
            if (index > -1 && index + 1 < ar.length && ar[index+1]!="=") {
                indexCurr = 
                ar = ar.splice(index, 1, " < ");
            } else {
                break;
            }
        } while(index!=-1);
        do { // remove sign '<', '>' without change '<=', '>='
            var index = ar.search(/>/);
            if (index > -1 && index + 1 < ar.length && ar[index+1]!="=") {
                ar = ar.splice(index, 1, " > ");
            } else {
                break;
            }
        } while(index!=-1);*/
        //ar = ar.replace(/</g," < ").replace(/>/g," > ");
        
        // ar - wejscie (zbicie wyrazenia do jednego ciagu - rejestr przesuwny)
        ar = ar.trim();
        ar = ar.split(/\s+/);
        setNegation(ar);
                
        
        //j<=10    j <= 10    j < = 10         
        //console.log("IN "+JSON.stringify(ar));
        

        while( token = ar.shift()) {
            if (token == +token) {  // OK    +token   token is number of variable
                out += token+" ";
                //console.log("OUT:"+out);
            } else if (!re2.test(token)) {                 
                token = hashSign.replaceAllStringHash2sign(token);
                // =  hashSign.sign2indexHash(string[i]);                
                //token = token.replace(/%1%/g, "(");  
                //token = token.replace(/%2%/g, ")");
                out += token+" ";
                //console.log("OUT:"+out);
            } else if (token == ")") { //
                var n; 
                while( n = st.pop()) { 
                    //drop.push(n);
                    if (n != "(") {
                        out += n+" ";
                        //console.log("OUT:"+out);
                    } else {
                        break;  // if sign '(' then stop get from stock
                    }
                }
                
            } else if (token == "(") { // OK
                st.push(token);
                //console.log("STOCK:"+st);                
            } else if (re.test(token)) { // is operator   // np is +
                var n, addAtEnd = false;
                
                while( n = st.pop()) {     // nie bierze pod uwage napotkania nawiasu   //  && (n!='(' && n!=')')
                // console.log("n"+n);                
                    //   +   <   + (token)                 //&& n != "(") 
                    // moze byc  '('  lub  ')' 
                    if (priority(n) < priority(token)) { // jeżeli ostatnim elementem stosu jest wyrażenie o niższym priorytecie
                        st.push(n);   
                        //addAtEnd = true;
                        //st.push(token); // na koncu umiesc element na stosie
                        //console.log("STOCK:"+st);
                        //console.log(token+" token > stack "+n);
                        break;
                    } else {            
                        out += n+" ";
                        //console.log("OUT:"+out);
                    }
                }
                st.push(token); // na koncu umiesc element na stosie
                //console.log("STOCK:"+st);
            } else { // not undefined token
                //out += token+" ";
                throw new Error('Invalid expression (not undefined token "'+token+'"): ' + input);
            }
        }
        //console.log("MOD:"+st);
        var n; 
        while( n = st.pop()) {
            out += n+" ";
            //console.log("OUT:"+out);
        }           
        
        return out;
    },
    // return 
    // {success:BOOL, statements:[], token:"", leftSide:"", rightSide:""}
    //  leftSide - left algebraic equation
    //  rightSide - right algebraic equation  
    //  statements[0] - left side RPN, statements[1] - right side RPN
    /*
    conditional_to_rpn: function(input) {   //  x <  y,  x == y, x > y
        var result = {success: false, statements:[],token:""},   //  //(<=)|(>=)|(==)|(!=)|(<)|(>)
            re = /(<=)|(>=)|(==)|(!=)|(<)|(>)/g,
            operators = ["<=",">=","==","!=","<",">"], //,"&&","||"
            oper = "",
            index = input.search(re),
            statements = []; 
            
                   
        for(var i=0; i < operators.length; i++) {
            index = input.search(new RegExp(operators[i]))
            if (index > -1) {
                oper = operators[i];
                break;
            }
        }
        if (oper) {
            result.token = oper;
            statements = input.split(oper);
            if (statements.length == 2) {
                result.leftSide = (statements[0])?statements[0].trim():"";
                result.rightSide = (statements[1])?statements[1].trim():"";
                for(var i=0; i < statements.length; i++){
                    var res = this.infix_to_rpn(statements[i]).trim();
                    result.statements.push(res);                
                }
                result.success = true;
            }
        }
        
        return result;
    },
    conditionalValue: function(input) {   
        var condResult = this.conditional_to_rpn(input);
        return this.valueFromConditional(condResult);
    },
    valueFromConditional: function(cond) {  
        var result = {success: false}; 
        if (cond.success) {
            var leftRpn = cond.statements[0],
                rightRpn = cond.statements[1],
                leftValue =  Algorithm.rpnInfo(leftRpn).value,                           
                rightValue =  Algorithm.rpnInfo(rightRpn).value,
                isCorrect = eval(leftValue+cond.token+rightValue);           
            result.value = isCorrect;
            result.success = true;
        }
        return result;
    } */       
}


/*
((20 && 94)||)

if ( 4<5+x)   // teraz mamy kilka wyrazow polaczony spojnieki and. wiwec mszue
x= (4<5)
x= true;
if ( or or or )

(  3  && ( 20 || 94))

3  20
&&

 piorytet  (  ||  &&
     
*/

// (20 < variable + 10)
// ok



        // wyrazenie na funkcje typu:   sadst-_s2rd(  innd_sad,  innaf( dddsf  )  )
        // [A-Za-z0-9\.\-\_]+\([\s]*([\s]*[A-Za-z0-9\.\-\_]+(\([^\)]*\))*[\s]*[,]?[\s]*)*\)
////////////////////
// Generate Singleton


var Generate = {
    randomCharacters: function(count) {
        var text = "",
            possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";        
        for( var i=0; i < count; i++ )
            text += possible.charAt(Math.floor(Math.random() * possible.length));        
        return text;
    }
}
////////////////////
// CONVERT

var Convert = {
    br2nl: function(str) {
        if(!str) {
            str = "";
        }
        return str.replace(/<br\s*\/?>/mg, "\n");
    },
    nl2br: function(str) {
        if(!str) {
            str = "";
        }
        return str.replace(/\n/g, '<br />');
    },
    nl_and_br2empty: function(str) {
        if(!str) {
            str = "";
        }
        str.replace(/\n/g, '');
        str.replace(/<br\s*\/?>/mg, "");
        return str;
    },
    array2String: function(array,character) {
        var result = "";
        for(var i = 0; i < array.length; i++) {
            result += array[i];
            if (i < array.length - 1) {
               result += character; 
            }
        }
        return result;
    },
    string2Array: function(string,character) {
        var result = string.split(character);
        for(var i = result.length-1; i >=0; i--) {
            if (result[i] == "") {
                result.splice(i,1);
            }
        }
        return result;
    }, // example    tekst|jakis  ->  tekst**jakis 
    stringChangeSeparate: function(string, separateOld, separateNew) {
        var result = string;
        if (string && separateOld && separateNew) {
            var array = string.split(separateOld);
            result = array.join(separateNew);
        }
        return result;
    },
    specialCharsToHtml: function(value) {
        var retval = value;
        if (retval) {
           return retval.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, "\"").replace(/&#039/g, "'").replace(/&#39;/g, "'").replace(/&#39/g, "'");
        } else {
            return "";
        }
    },
    multiLineTextToHtml: function(multiLineText) {
        var textWithBr = that.nl2br(multiLineText),
            textHTML = specialCharsToHtml(textWithBr);
        return textHTML;    
    }                 
}
////////////////////
// EVENTS NOTIFACTION


var EventsNotification = {
    events: [],
    registry: function(type, listener) { // registry event
        if (listener && typeof listener === "function") {
            var ev = {
                type: type,
                listener: listener
            }
            this.events.push(ev);
        } else {
            console.log("Notifications: listener is not function");
        }
    },
    unregistry: function(type) { // unregistry first founded event with type        
        for(var i=this.events.length-1; i >= 0; i--) {
            var ev = this.events[i];
            if (ev.type == type) {
                this.events.splice(i, 1);
                break;
            }
        }
    },    
    exe: function(type, params, callbackResult) {
        for(var i=0; i < this.events.length; i++) {  // execute all events with type
            var ev = this.events[i];
            if (ev.type == type && ev.listener && typeof ev.listener === "function") {
                var result = ev.listener(params);                
                if (callbackResult && typeof callbackResult === "function") {
                    callbackResult(result);
                }
            }
        }
    }, 
}


function Sound(file, callback, callbackEnd) {
    var instance = this;
    instance.element = new Audio();
    instance.loaded = false;
    
    instance.get = function(property) {
        return instance.element[property];
    };
    
    instance.set = function(property, value) {
        instance.element[property] = value;
    };
    
    instance.play = function() {
        instance.element.play();
    };
    
    instance.pause = function() {
        instance.element.pause();
    };
    
    instance.stop = function() {
        instance.pause();
        instance.currentTime = 0;
    };
    
    instance.load = function(file, callback, callbackEnd) {
        instance.loaded = false;
        
        var loadedHandler = function() {
            instance.loaded = true;
            instance.element.removeEventListener('canplaythrough', loadedHandler);
            
            if(callback) {
                callback.apply(instance);
            }
        };
        
        var endedHandler = function() {
            instance.element.removeEventListener('ended', endedHandler);
            instance.element.currentTime = 0;
            
            if(callbackEnd) {
                callbackEnd.apply(instance);
            }
        };        
        
        /*
         myAudio.addEventListener("ended", function() 
     {
          myAudio.currentTime = 0;
          alert("ended");
     });
         */
        
        instance.element.addEventListener('canplaythrough', loadedHandler);
        instance.element.addEventListener('ended', endedHandler);
        
        instance.element.src = file;
        instance.element.load();
    };
    
    if(file) {
        instance.load(file, callback, callbackEnd);
    }
}////////////////////
// STOPER
// 


function Stoper(options) {
    var that = this
        ms = 0,
        timer = null,
        startDateMs = 0,
        nowDateMs = 0,
        isRunning = false,
        isPause = false,
        events = (options && options.events)?options.events:{}, //
        msLoopEvents = []; // {ms, listener} 
    
    this.addLoopEvents = function(id, ms, listener) {
        if (listener && typeof listener === "function") {
            msLoopEvents.push({
               id: id,
               ms: ms,
               listener: listener
            });
        }
    }
    

    this.start = function() {
        if (!isRunning) {
            if (!isPause) {
                startDateMs = (new Date()).getTime();
            }            
            isRunning = true;
            isPause = false;
            
            timer = window.setInterval(function() {
                nowDateMs = (new Date()).getTime();
                for(var i=0; i < msLoopEvents.length; i++) {
                    var loopEv = msLoopEvents[i];
                    if (nowDateMs > loopEv.ms+startDateMs) {
                        loopEv.listener(loopEv.id);
                    }
                }
            }, 20);
        }
    }

    this.reset = function() {
        if (isRunning) {
            that.stop();
            that.start();
        } 
    }
    
    this.pause = function() {
        isRunning = false;
        isPause = true;
        clearInterval(timer);
        timer = null;
    }
    
    this.stop = function() {
        isRunning = false;
        isPause = false;
        clearInterval(timer);
        timer = null;
    }
    
    this.getMs = function() {
        if (isRunning) {
            nowDateMs = (new Date()).getTime();
            return nowDateMs - startDateMs;
        } else {
            return -1; 
        }
    }
    
    this.isRunning = function() {
        return isRunning;
    }
    
}




////////////////////
// CREATOR
// + move & drag & drop & select items on canvas
// + global function

function setDraggableMenuItems(){
	$( ".menu_item" ).draggable({
		  stop: function( event, ui ) {
		  },
		  start: function( event, ui ){
			  console.log("Drag element type: "+this.id);
			  $(ui.helper).attr('id', this.id);
		  },
		  revert:true,
		  revertDuration: 0,
		  helper:"clone",
		  snap: "."+grid.getLineClass()
		});
	
}

function setEditables() {
	/*$('.editable_text').editable(function(value, settings) { 
        return value;
     }, 
     {
		type      : 'textarea',
     	cancel    : 'Cancel',
     	submit    : 'OK',
     	indicator : '<img src="../../media/img/indicator.gif">',
     	tooltip   : 'Click to change..',
        cols      : 40,
     	rows      : 3,
     	data: function(value, settings) {
			var retval = Convert.br2nl(value);
			return retval;
		},
		callback : function(value, settings) {
		    var retval = Convert.br2nl(value);                
            setStyleOfElement(activeElement.elementSelected, {text:retval,html_content:retval});
		    activeElement.updateElementInBase();
 			selectElement(activeElement.elementSelected);
 			console.log("setEditables - NEW VALUE: " + retval);
		}
	});*/
}

function defaultBackgroundOfCanvas() {
    return "";
    /*var defaultCanvas;
    if (orientation == "portrait") {
        defaultCanvas = "canvas720x1280.png";            
    } else {
        defaultCanvas = "canvas1280x720.png"; 
    }
    return "/media/img/"+defaultCanvas;*/    
}

function selectElement(element, onProperties, isFirstTimeOpen) {
    if (element) {
                
        if (activeElement) {	            
	       activeElement.setActiveForElement(element);
	    }
	    if (properties) {
	       properties.setInputValues(element);
	    }
	    if (onProperties) {
	       $( "#tabs" ).tabs({ active: 1 });
	       setSection(1);
	    }
	    if (actions && element.dataset && element.dataset.designIsActions == 1 && element.dataset.designEditActions == 1 && isFirstTimeOpen) {
	        actions.setByJSON(element.dataset.designActions, false);	            
	        element.dataset.designEditActions = 0;	        
	    }    	    
    }
}

function selectSwipegroup(element,onProperties) {
    if (swipegroups) {
        swipegroups.setInputValues(element);
    }
    if (onProperties) {
        $( "#tabs" ).tabs({ active: 1 });
    }    
}	

function openResourcesDialog(resourcesType) {//titleConfirm, callback) {       
    
   // if(!seqList.tryEnter("open_library")){return;}
   
    switch(resourcesType) {
        case RESOURCES_TYPE_IMAGES:
            $( "#tabs_resources" ).tabs({ disabled: [ 1 ], active: 0 });
            resourcesUpload[0].setFocusForFocusedElement();
            break;
        case RESOURCES_TYPE_SOUNDS:
            $( "#tabs_resources" ).tabs({ disabled: [ 0 ], active: 1  });
            resourcesUpload[1].setFocusForFocusedElement();
            break;
        default:
            resourcesUpload[0].resetButton();
            $( "#tabs_resources" ).tabs({ disabled: [ ], active: 0  });
            break;
    }
    $('#dialog_resources').dialog('open');
}
	
function setSection(section) {
    $("#menu_new_item").removeClass("selected");
    $("#menu_properties").removeClass("selected");
    $("#menu_elements_list").removeClass("selected");
    $("#menu_new_item_section").css("display","none");
    $("#menu_properties_section").css("display","none");
    $("#menu_elements_list_section").css("display","none");

    if (section == 0) {
        $("#menu_new_item").addClass("selected");
        $("#menu_new_item_section").css("display","block");
    } else if (section == 1) {
        $("#menu_properties").addClass("selected");
        $("#menu_properties_section").css("display","block");
    } else if (section == 2) {
        $("#menu_elements_list").addClass("selected");
        $("#menu_elements_list_section").css("display","block");
    } 
}

function setEventOfSection() {
    $("#menu_new_item").click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

        setSection(0);
    });
    $("#menu_properties").click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

        setSection(1);
    });
    $("#menu_elements_list").click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

        setSection(2);
    }); 
}
    // const
    var DEFAULT_TEXT_OF_TEXT_NODE  = "Please fill this.";
    var DEFAULT_TEXT_OF_BUTTON_NODE = "Please fill this.";
    var DEFAULT_IMAGE = "/gamedesigner/media/img/image.png";
    var ELEMENT_TYPE_TEXT = "text";
    var ELEMENT_TYPE_BUTTON = "button";
    var ELEMENT_TYPE_HTML = "html";
    var ELEMENT_TYPE_IMAGE = "image";
    var ELEMENT_TYPE_MAP = "map";
    var ELEMENT_TYPE_CLICKABLE_AREA = "clickable_area";
    var ELEMENT_TYPE_TEXTEDIT = "textedit";    
    var ELEMENT_TYPE_SPREADSHEET = "spreadsheet";
    var ELEMENT_TYPE_BOARD = "board";
    var ELEMENT_TYPE_NAVIGATOR_BAR_BUTTON = "navigator_bar_button";
    var ELEMENT_TYPE_NAVIGATOR_BAR_TITLE = "navigator_bar_title";
    var ELEMENT_TYPE_NAVIGATOR_BAR = "navigator_bar";

    // application element
    var application;
    // screen 
    var editorScreen;
    // Canvas element
    var canvas;    
    // The actual active element
    var activeElement;
    // Handle grid
    var grid;
    // Resources
    var resourcesUpload = new Array();
    // List of available properties for active element
    var properties;
    // Actions for elements
    var actions;
    // Crop Image
    var cropImage;
    // Code editor
    var codeEditor;
    // Handle Swipegroups
    //var swipegroups; 
    // Conversation
    var conversationsContainer; 
    // Items container
    var itemsContainer;
    // Popups container
    var popupsContainer;
    // Spreadsheets container
    var spreadsheetsContainer;
    // Hints container
    var hintsContainer;
    // Publish code
    var publishCode;
	// global change
	var globalChange;
    // dialogs
    var messageDialog;    
    // Array of draggable items in menu.
    var draggableItemsMenu = new Array();
    // Array of list resources (image, music etc.)
    var resourcesImageList = new Array();
    var resourcesMusicList = new Array();
    //// text color
    var text_color_hex;
    // isTizen
    var isTizen = false;
    // tizen navigator bar
    var tizenNavigationBar = 60;
    // Emulator
    var browserEmulator;
    // sequences system
    var sequencesSystem;
    // administrator editor
    var adminEditor;
    
    
    
    /*alert(autocorrect("consdole.write","console.write"));
    alert(autocorrect("console..write","console.write"));
    alert(autocorrect("console..write","console.write"));
    alert(autocorrect("conse..wr3ite","console.write"));
    alert(autocorrect("console.dds","console.write"));
    */
    
    

    
    /*
    $(function() {
   
            x = 2,
            y = 3,
            text = "hello";
   
        var testNr = 1;
        function testRpn(test, notEval) {
            console.log("==== "+(testNr++)+" ======> "+test);
            var evValue;
            if (!notEval) {
                evValue = eval(test);
                console.log("Eval: "+evValue);
            }
            var rpn = Algorithm.infix_to_rpn(test);
            var rpnInfo = Algorithm.rpn_to_info(rpn);
            var string = (new CodeEditorStrings()).stringsForRpnConditional(rpn);

            console.log("Test:"+test+" InfixToRpn:"+rpn+" Value:"+rpnInfo.value);              
            console.log(rpnInfo.info);
            if (!notEval) {
                console.log("TEST OK?: "+(rpnInfo.value.toString() == evValue.toString()));
            }
            console.log(string);
        }
        
        testRpn("(2>5)");
        testRpn("(true)");
        testRpn("0");
        testRpn("1");
        testRpn("8");
        testRpn("( (2>5) or (2<5))", true);
        testRpn("( 2>5 or 2<5)", true);
        testRpn("( (2>5) || (2<5))");
        testRpn("( (2>5) and (2<5))", true);
        testRpn("( 2>5 and 2<5)", true);
        testRpn("( (2>5) && (2<5))");
        testRpn("(x>y)");
        testRpn("(x+1>y)");
        testRpn("(2*x>5)");
        testRpn("( (2>5 and 2<5) or (x<y))", true);
        testRpn("(2>x or x>5 or x>6)", true);
        testRpn("(2>x and x>5 and x>6)", true);
        testRpn("(text.length > 17)");

    });
    
    var zmienna = 230;
    function createVar(val) {
        return val;
    }*/

    //var range = jsRangeMake(2, 3);//  jsRange.create(2,3);
    //alert(range.from+" "+range.to);
   
         
    // wait for the DOM to be loaded
    function main() {

        application = new Application();
        // section: new area, properties, items list
        setSection(0);
        setEventOfSection();
        
        //removeAllCookies();displayAllCookies();
         
        //$("#menu_list_container").tooltip();        
        
        // get & set set list of screens (ajax)
        getScreenList({
            async: false,
            data: {
                app_id: appId
            },            
            success: function(resultJSON) {
                var resultData = resultJSON;
                if (!resultData || !application) {
                    return;
                }
                var screenData = JSON.parse(resultData);
                if (screenData) {
                    application.setScreenListFromServer(screenData.screens);        
                    application.showSelectScreen();
                    //application.boardName = application.getScreenParamByParam("name","id",boardId);
                }
            }
        });
                
        //getSwipegroupsList();

        editorScreen = new EditorScreen();  
        editorScreen.setScreenConfig();  

        var isPortrait = (orientation == "portrait")?true:false;
        canvas = new Canvas('canvas', false);
        
        var pathBoardBackground;
        if (boardBackground == "None" || boardBackground == "" || boardBackground == "-") {
            boardBackground = "";
            pathBoardBackground = defaultBackgroundOfCanvas();
            updateBoard(boardId, boardBackground, boardSound);
        } else {
            pathBoardBackground = "/gamedesigner/media/upload/"+appId+"/img/"+boardBackground;
        }
        if (boardSound == "None" || boardSound == ""|| boardSound == "-") {
            boardSound = "";  
            updateBoard(boardId, boardBackground, boardSound);          
        }
        canvas.setResolution({x:720,y:500});                 
        canvas.setBackground(28,20, pathBoardBackground);        
		canvas.setWorkspaceMargin(20, 8, 20, 8); //20, 20, 20, 22
        canvas.setBackground(28,20, pathBoardBackground);        
        
        canvas.enabledNavigationBar(false);

        
        activeElement = new ActiveElement(canvas.id);  
        activeElement.setCallback(activeElement.CALLBACK_ELEMENT_NOT_ACTIVE, callbackElementNotActive);
        properties = new Properties('properties');
         
        grid = new Grid(canvas,"checkbox_show_grid","checkbox_drag_to_grid","input_grid_size");
        //grid.show();grid.setDrag(true);
        
        itemsContainer = new ItemsContainer();
        conversationsContainer = new ConversationsContainer();
        conversationsContainer.characterName = characterName;                
        popupsContainer = new PopupsContainer();
        spreadsheetsContainer = new SpreadsheetsContainer();
        hintsContainer = new HintsContainer();
		
		globalChange = new GlobalChange();
        
        // actions
		var optionsActions = { id_actions: "actions", 
							   id_actions_header: "actions_header",
							   id_actions_tree: "actions_tree",
							   id_actions_tree_option_prefix: "actions_tree_option",
							   id_actions_tree_element_delete: "actions_tree_element_delete",
							   id_actions_parameters: "actions_parameters",
							   id_actions_available: "actions_available",      
							   list_actions_available: new Array(ACTIONS_ONCLICK,/*ACTIONS_ONDROP,*/
									ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML, 
									ACTIONS_SHOW_TPOPUP, ACTIONS_ITEM_SHOW_TPOPUP,
									ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_INITIATE_CONVERSATION/*,
									ACTIONS_TAKE_ITEM, ACTIONS_DROP_ITEM*/),         
							  }		
        actions = new Actions(optionsActions);
        actions.propertyLiClass = "action_property";
        actions.callbackChangeActions = callbackChangeActions;
        //actions.refresh();
		$("#actions").corner();
		$("#actions_parameters").corner();
		
		//swipegroups = new Swipegroups("swipegroups");
		//selectSwipegroup(swipegroups.activeElem);
						
		messageDialog = new MessageDialog("messageDialog");
		
        $( "#dialog_resources" ).dialog({
            autoOpen: false,
            resizable: false,
			title: '<img src="/gamedesigner/media/img/library_title_icon.png" style="vertical-align:top;margin-top:6px;" /> <span class="title">LIBRARY</span>',
            modal: true,
            width: 720,
            height: 620,
            close: function( event, ui ) {
                selectElement(activeElement.elementSelected);
            },                 
        });
        $("#dialog_resources_open").click(function(){
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        

            openResourcesDialog();   
        });         
        resourcesUpload[0] = new ResourcesUpload("uploadImage","resources_upload_image",{accept_file: "image/*",type_data:RESOURCES_TYPE_IMAGES});        
        resourcesUpload[1] = new ResourcesUpload("uploadMusic","resources_upload_sound",{accept_file: "audio/*",type_data:RESOURCES_TYPE_SOUNDS});        
   
        $( "#dialog_export" ).dialog({
            autoOpen: false,
            resizable: false,
            width: 330,
            height: 150,            
        });   
        
        cropImage = new CropImage();
        cropImage.createDialog();
        //cropImage.setImageSrc("/gamedesigner/media/upload/1/img/kosmiczna_przygoda_start_5.png");
                
        /*$( "#dialog_swipegroups" ).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
            width: 360,
            height: 220
        });                 
               
        $( "#dialog_swipegroups_new" ).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
            width: 300,
            height: 165,
            buttons: {
                OK: function() { 
                    var name = $("#dialog_swipegroup_new_name").val();
                    if (name) {                                                
                        if (application.getSwipegroupsParamByParam("name", "name", name)) {
                            messageDialog.show("Swipegroups","The name already exists. Enter different name.");
                        } else {
                            addSwipegroup(name);
                            $( this ).dialog( "close" );    
                            $("#dialog_swipegroup_new_name").val("");                         
                        }                        
                    } else {
                        messageDialog.show("Swipegroups","The name is empty.");
                    }        
                },
                Cancel: function() { //cancel
                    $( this ).dialog( "close" );
                }
            }            
        }); */
            
        // set list for properties & resource upload
        getUploadedFilesByType("image");
        getUploadedFilesByType("sound");              
               
        publishCode = new PublishCode();          
               
        // Set the tabs to be switchable
        $( "#tabs" ).tabs({
            collapsible: true
        });
        
        $( "#tabs_resources" ).tabs({
            collapsible: false            
        });        
        
        codeEditor = new CodeEditor();
        // open & close to create instance of tab
        //codeEditor.openEditor();
        //codeEditor.closeEditor();

        browserEmulator = new BrowserEmulator();
        browserEmulator.displayEmulator(false);
        browserEmulator.displayBoard({}); // default empty board 
        
        sequencesSystem = new SequencesSystem();
        
        $("#back_to_previous").click(function() {
            application.backToPrevious();
        });        

        if (isEditStart != "True") {
            //$("#startingAddingBubbles").css("display", "none");
        } else {                    
            $("#header1_buttons").append('<input id="startingAddingBubbles" style="cursor: pointer;font-size: 10px;width:120px;white-space: normal;" type="button" value="Click this button if you have finished editing starting project and would like to start adding bubbles.">');            
            $("#startingAddingBubbles").click(function() {
                function setProjectAsFinal() {
                    AjaxTutorial.ajaxCopyToEndProject({
                        data:{
                            lesson_id: lessonId,
                            project_id: appId
                        },
                        success: function() {
                            
                          AjaxTutorial.ajaxFinishedEditingStarting({
                              data:{
                                  lesson_id: lessonId,
                              },
                              success: function() {
                                  window.location.assign('/gamedesigner/editend/'+lessonId+"/");
                              },
                              error: function() {
                                  messageDialog.show("Project", "Error.", "OK");
                              }
                          }); 
                        },
                        error: function() {
                          messageDialog.show("Project", "Error.", "OK");
                        }  
                    });
                }
                messageDialog.showWithTwoButtons("Project", "Are you sure?","Tak", "Nie", setProjectAsFinal);   
            });
        }

        $(document).keyup(function(e) {
            if(e.keyCode  == 13) { // ENTER
                if (browserEmulator && browserEmulator.isDebugger && codeEditor.isOpen() && !browserEmulator.isNextStep) {
                    codeEditor.nextStepDebugger();
                }
            }            
            if(e.keyCode  == 46) { // DELETE
                callbackPropertyDeleteElement();
            }
            if(e.keyCode  == 113) { // F2
                if (!adminEditor.isOpen()) {
                    adminEditor.show();
                } else {
                    adminEditor.hide();
                }
            }                        
            if(e.keyCode  == 118) { // F7
                
               //if (!codeEditor.isOpen()) {
                  codeEditor.openEditor(); 
               //} else {
                  //codeEditor.closeEditor();
               //}
            }            
            if(e.keyCode  == 119) { // F8
                console.log("open spreadsheetsContainer");
                spreadsheetsContainer.showDialog();
                //popupwindow("/gamedesigner/emulator/","emulator",750, 1350);                
            } 
            if(e.keyCode  == 120) { // F9
                console.log("always open debugger");
                application.isAlwaysDebugger = true;
            }                        
         
        });        
        
    
        //OnLoad functionality here
        draggableItemsMenu = document.getElementsByClassName('menu_item');          
        // manage menu & elements items
        setDraggableMenuItems();
        setCanvasDroppable();
        setEditables();   
        
        
        var pJSCode = new ParserJSCode();
        pJSCode.testUnit();
        
        /*
       EMU.a = [2];    
       //test = "10 <= 20 * 30";
       //if (6 & 6-2*3) 
       test = "6|6-EMU.a[0]*3<1";
       var conditional = Algorithm.conditional_to_rpn(test),
           result = "";
                   
       result += codeEditor.strings.stringsForRpnConditional(conditional); 
       console.log(test+"  RES: "+result);        
        */				
    }
    
    
    isLessonHelloWorld = function() {      
        var orderTip = sequencesSystem.bubbles.getCurrentTip().order,
            correctOrderLesson = 0,
            correctOrderModule = 1,
            correctOrderTip = 0;
        if (correctOrderModule && parseInt(lessonOrder) == correctOrderLesson && orderTip == correctOrderTip) {
            return true;
        } else {
            return false;
        }
    }
    isLessonHelloWorldRun = function() {      
        var orderTip = sequencesSystem.bubbles.getCurrentTip().order,
            correctOrderLesson = 0,
            correctOrderModule = 1,
            correctOrderTip = 1;
        if (correctOrderModule && parseInt(lessonOrder) == correctOrderLesson && orderTip == correctOrderTip) {
            return true;
        } else {
            return false;
        }
    }    
        
    
////////////////////
// APPLICATION

function Application() {
    var that = this;
    this.idSelectScreen = "select_screen";
    
    this.isAlwaysDebugger = true;

    this.boardsList = []; // [{id, screen_id, background, sound, panel_items}, {...}]
    this.codes = [];  //  [{screen_id, user_code, generated_code, start}, {...}]
    this.screenObjectList = []; // [{id, name}, {...}]
    this.screensNameList = [];  // []
    this.soundsList = [];  // []
    this.imagesList = [];  // []
    this.swipegroupsObjectList = []; // data from old system
    this.mainCode = "";    
    this.settings = {debugger_lessons: [{module: 1,lesson: 0}]}  // "{}"; //

    //id  key                         value
    //1   debugger_module_lesson      1;2    
    this.onlyRun = false;  // this project can only run without edit
        
    $("#create_new_board").click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                
        
        window.location.assign('/gamedesigner/addscreen/app/'+appId+'/?newscreen=1');
    });
    
    this.backToPrevious = function() {
        if (isEditTutorial || isContinueTutorial) {
            window.location.assign('/gamedesigner/lessons/');    
        } else {
            window.location.assign('/gamedesigner/addscreen/app/'+appId+'/');
        }   
    }
      
    this.setScreenListFromServer = function(screensArray) {
        for(var i=0;i<screensArray.length; i++) {
            var objScreen = screensArray[i];
            for( var prop in objScreen ) {
                if( objScreen.hasOwnProperty( prop ) ) {
                    var value = objScreen[ prop ];
                    var obj = { name: prop , id: value };
                    this.screenObjectList.push(obj); 
                    this.screensNameList.push(prop);                  
                }
            }
        }           
    }
    
    this.getScreenParamByParam = function(paramReturn, paramSearched, valueSearched) {
        return paramFromParamAndValue(this.screenObjectList, paramReturn, paramSearched, valueSearched);
    }
    
    this.getScreenListByParam = function(param) {
        return arrayFromArrayParam(this.screenObjectList,param);
    }    
    
    this.getBackgroundByParam = function(paramReturn, paramSearched, valueSearched) {
        return paramFromParamAndValue(this.boardsList, paramReturn, paramSearched, valueSearched);
    }    
   

    var callbackSelectScreen = function(propertyObj,value) {
        if (propertyObj.id == "app_select_screen") {
            $("#"+this.idSelectScreen).val(value);
            var id = that.getScreenParamByParam("id", "name", value);
            if (value && id) {
                //window.location.assign("/gamedesigner/screen/"+id+"/");
                currentScreenId = id;
                boardId = id;
                canvas.setCanvasForScreenId(currentScreenId);
                that.refreshCanvasBackground();
                that.refreshCanvasSound();
                //codeEditor.manager.setObjectOnCanvasByDefinitions();
                that.setCorrectBoardRender();
            }
        }
    }
    
    this.showSelectScreen = function() {
        var propertyScreens = new Property("app_select_screen", "select", "");                
        var listScreensName = this.getScreenListByParam("name");
        
		propertyScreens.setClassName("app_property");
        propertyScreens.setTemplate(320,0);
        propertyScreens.setOptionOfSelect(listScreensName);        
        propertyScreens.styleRight = "width:240px;margin-top:0px;"
        propertyScreens.callbackChangeValue = callbackSelectScreen;
        $("#"+this.idSelectScreen)[0].appendChild(propertyScreens.getElement());
        
		console.log();
        var name = this.getScreenParamByParam("name","id",boardId);
        if (name) {
            propertyScreens.setValue(name);
            if (isContinueTutorial == "True" || isEditTutorial == "True") {
                $("#header_screen_name").html("<a href=\"/gamedesigner/lessons/\">Lessons</a> -> "+name);
            } else {
                $("#header_screen_name").html("<a href=\"/gamedesigner/select/app/\">My apps</a> -> <a href=\"/gamedesigner/addscreen/app/"+appId+"/\">"+appName+"</a> -> "+name); 
            }
        }        
        propertyScreens.refreshActions();
    }  


    this.instancesObjectsCreated = function() {                
        that.setCorrectBoardRender();        
    }        
        
    this.setCorrectBoardRender = function() { 
        
        // setObjectOnCanvasByDefinitions
           
        var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
        var name = that.getScreenParamByParam("name", "id", boardId);        
        
        if (codeObj && canvas && name) {
            var result = codeEditor.checkDefinitionsCorrect(codeObj.generated_code);
            codeEditor.manager.boardNameError = name;
            codeEditor.manager.boardExtensionError = codeEditor.boardExtension.definitions;
            codeEditor.manager.numberLineError = result.errorLineNumber;
            canvas.setRenderBoardElements(result.isCorrect);
        }    
    }
    
    this.refreshCanvasBackground = function() {
        for(var i=0; i < that.boardsList.length; i++) {
            if (boardId == that.boardsList[i].screen_id) {
                var backgroundImage = that.boardsList[i].background;   
                if (backgroundImage && backgroundImage != "-") {          
                    canvas.setBackground(28,20,"/gamedesigner/media/upload/"+appId+"/img/"+backgroundImage);
                } else {
                    canvas.setBackground(28,20,defaultBackgroundOfCanvas());
                }
                $("#app_screen_background").val(backgroundImage);
            }
        } 
    }
    
    this.refreshCanvasSound = function() {
        for(var i=0; i < that.boardsList.length; i++) {
            if (boardId == that.boardsList[i].screen_id) {
                var sound = that.boardsList[i].sound;   
                $("#app_screen_sounds").val(sound);
            }
        } 
    }
    
    var changeCanvasBackground = function(value, idInput) {                
        $("#"+idInput).val(value);                
        if (value || value == "") {
            boardBackground = value;
            //if (value != "") {                
                for(var i=0; i < that.boardsList.length; i++) {
                    if (boardId == that.boardsList[i].screen_id) {
                        that.boardsList[i].background = value;
                    }
                }                
                //canvas.setBackground(28,20,"/gamedesigner/media/upload/"+appId+"/img/"+value);   
            //} else {
                //canvas.setBackground(28,20,defaultBackgroundOfCanvas());
            //}
            that.refreshCanvasBackground();
            
            //resourcesUpload[0].setFocusedElement(boardBackground);
            updateBoard(boardId, boardBackground, boardSound); 
        }
    }
    
    var callbackSelectScreenBackground = function(propertyObj,value) {
        if (propertyObj.id == "app_screen_background") {
            changeCanvasBackground(value, propertyObj.id);
        }
    }    
       
    var changeCanvasSound = function(value, idInput) {
        $("#"+idInput).val(value);
        if (value || value == "") {
            boardSound = value;
            for(var i=0; i < that.boardsList.length; i++) {
                if (boardId == that.boardsList[i].screen_id) {
                    that.boardsList[i].sound = value;
                }
            }                
            
            that.refreshCanvasSound();
            
            //resourcesUpload[1].setFocusedElement(boardSound);
            updateBoard(boardId, boardBackground, boardSound); 
        }
    }   
       
    var callbackSelectSound = function(propertyObj,value) {
        if (propertyObj.id == "app_screen_sounds") {
            changeCanvasSound(value, propertyObj.id );
        }
    }          
     
    this.showScreenInfo = function() {
        
        var parentParams = $("#select_background")[0];
        parentParams.innerHTML = "";
        var propertyScreenBackground = new Property("app_screen_background", "select", "","");//, '<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_IMAGES)" />');        
		propertyScreenBackground.setClassName("app_property");
        propertyScreenBackground.setTemplate(320,0);
        propertyScreenBackground.setOptionOfSelect(arrayWithFirstElement(this.imagesList,""));
        propertyScreenBackground.className = "";
        propertyScreenBackground.styleRight = "width:250px;margin-top:0px;"
        propertyScreenBackground.inputClass = "select_styled2";
        propertyScreenBackground.callbackChangeValue = callbackSelectScreenBackground;
        propertyScreenBackground.showButtonDialog = true;
        propertyScreenBackground.callbackButtonDialog = function(property) { 
            resourcesUpload[0].setFocusedElement(boardBackground); 
            openResourcesDialog(RESOURCES_TYPE_IMAGES);
            resourcesUpload[0].setButtonAndCallback("Set this background", function() { 
                callbackSelectScreenBackground(property, resourcesUpload[0].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });
        };
        
        //$("#app_screen_background").attr("disabled", "disabled");
        
        parentParams.appendChild(propertyScreenBackground.getElement());        
        propertyScreenBackground.setValue(boardBackground);
        propertyScreenBackground.setOldValue(boardBackground);
        propertyScreenBackground.refreshActions();            

        var parentAudioParams = $("#select_audio")[0];
        parentAudioParams.innerHTML = "";
        var propertyScreenSound = new Property("app_screen_sounds", "select", "","");//, '<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_SOUNDS)" />');
		propertyScreenSound.setClassName("app_property");
        propertyScreenSound.setTemplate(280,0);
        propertyScreenSound.setOptionOfSelect(arrayWithFirstElement(this.soundsList,""));
        //propertyScreenSound.setOldValue("");
        propertyScreenSound.className = "";
        propertyScreenSound.styleRight = "width:250px;margin-top:0px;";
        propertyScreenSound.inputClass = "select_styled2";
        propertyScreenSound.callbackChangeValue = callbackSelectSound;
        propertyScreenSound.showButtonDialog = true;
        propertyScreenSound.callbackButtonDialog = function(property) { 
            resourcesUpload[1].setFocusedElement(boardSound); 
            openResourcesDialog(RESOURCES_TYPE_SOUNDS);
            resourcesUpload[1].setButtonAndCallback("Set this sound", function() { 
                callbackSelectSound(property, resourcesUpload[1].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });            
        };        

        parentAudioParams.appendChild(propertyScreenSound.getElement());        
        propertyScreenSound.setValue(boardSound);
        propertyScreenSound.setOldValue(boardSound);
        propertyScreenSound.refreshActions();        

    }    
    
    this.codeSeparate2nl = function(code) {
        var newCode = specialCharsToHtml(code);
        return Convert.stringChangeSeparate(newCode, "|||", "\n");
    }
    
    this.codeNl2separate = function(codeWithNl) {        
        var newCode = Convert.stringChangeSeparate(codeWithNl, "\n", "|||");
        return newCode;
    }       
    
    this.getSwipegroupsListByParam = function(param) {
        return arrayFromArrayParam(this.swipegroupsObjectList, param);
    }    
    
    this.getSwipegroupsParamByParam = function(paramReturn, paramSearched, valueSearched) {
        return paramFromParamAndValue(this.swipegroupsObjectList, paramReturn, paramSearched, valueSearched);  
    }
    
    this.getSwipegroupObjectByName = function(name) {
        return objectFromParamAndValue(this.swipegroupsObjectList, "name", name);
    }    

    this.globalIsExistsForName = function(name, typeDeleted) {
        if (name) {
            for(var i=0; i < this.boardsList.length; i++) {
                if (typeDeleted == DELETED_ELEMENT_IMAGE && this.boardsList[i].background == name) {
                    return true;
                }
                if (typeDeleted == DELETED_ELEMENT_SOUND && this.boardsList[i].sound == name) {
                    return true;
                }
            }
        }
        return false;
    }   
    
    this.globalSetCorrectForName = function(name, typeDeleted) {
        if (name) {
            if (typeDeleted == DELETED_ELEMENT_IMAGE && name == boardBackground) {
                changeCanvasBackground("-", "app_screen_background");
            }
            if (typeDeleted == DELETED_ELEMENT_SOUND && name == boardSound) {
                changeCanvasSound("-", "app_screen_sounds");
            }            
            for(var i=0; i < this.boardsList.length; i++) {
                var isChange = false;
                if (typeDeleted == DELETED_ELEMENT_IMAGE && this.boardsList[i].background == name) {
                    this.boardsList[i].background = "-";
                    isChange = true;
                } 
                if (typeDeleted == DELETED_ELEMENT_SOUND && this.boardsList[i].sound == name) {
                    this.boardsList[i].sound = "-";
                    isChange = true;
                }                      
                if (isChange) {
                    updateBoard(this.boardsList[i].id, this.boardsList[i].background, this.boardsList[i].sound, this.boardsList[i].screen_id);
                }
            }
        }
    }   
}

////////////////////
// EDITOR SCREEN

var TYPE_SCREEN_CANVAS = "canvas";
var TYPE_SCREEN_PORTRAIT = "portrait";

function EditorScreen() {
    this.idScreenConfig = "dialog_screen_config";
    this.screenType = TYPE_SCREEN_CANVAS;
        
    this.setScreenConfig = function() {        
        $("#"+this.idScreenConfig).dialog({
            autoOpen: false,
            width: 330,
            height: 380
        });
        
        var propertyRetina = new Property("retina_display", "checkbox", "Retina display: ");
        var parent = $("#"+this.idScreenConfig+" p")[0];
        var ul = document.createElement("ul");        
        parent.appendChild(ul);
        ul.appendChild( propertyRetina.getElement());
        ul.className = "menu";        
       
        propertyRetina.setCheckbox(this.animated);
        propertyRetina.refreshActions();        
    }   
    
    this.openScreenConfig = function() {
        $("#"+this.idScreenConfig).dialog("open");
    } 
    
    
}


////////////////////
// NAVIGATION BAR

function NavigationBar() {
    var that = this;
    this.idParent;
    this.canvas;
    this.idNavigationBar = "navigation_bar_container";
    this.idNavigatorBarTitle = "navigation_bar_title";
    this.idNavigatorBarToogle = "navigation_bar_toogle";
    this.idNavigatorBarSettings = "navigation_bar_settings";
    var isNavigatorBar = true;    
    
    $("#navigation_bar_toogle input").change( function() {   
        var isChecked =  $("#navigation_bar_toogle input").is(':checked');
        that.setNavigatorBar(isChecked);
    });
    $(".navigator_bar_item").click(function() {
        var id = $(this)[0].id;
        if (id == "navigator_bar_left_button") {
           this.dataset.designPosition = 1;
        } else if (id == "navigation_bar_middle_left_button") {
           this.dataset.designPosition = 2; 
        } else if (id == "navigation_bar_middle_right_button") {
           this.dataset.designPosition = 3; 
        } else if (id == "navigation_bar_right_button") {
           this.dataset.designPosition = 4; 
        } 
        this.dataset.designType = ELEMENT_TYPE_NAVIGATOR_BAR_BUTTON;
        this.dataset.designIsActions = 1;
        if (!this.dataset.designTitleColor) {
            this.dataset.designTitleColor = "20,20,20";
        }
        this.dataset.designVisible = 1;
        selectElement(this, true);        
    });
    
    
    var sett = $("#"+this.idNavigatorBarSettings)[0];
    sett.dataset.designSwipegroupName = ""; //data from base
    $("#"+this.idNavigatorBarSettings).click(function() {
        this.dataset.designType = ELEMENT_TYPE_NAVIGATOR_BAR;
        selectElement(this, true);     
    });
    
    $("#"+this.idNavigatorBarTitle)[0].setAttribute('class', 'editable_nb_title');
    $("#"+this.idNavigatorBarTitle).click(function(){
        this.dataset.designType = ELEMENT_TYPE_NAVIGATOR_BAR_TITLE; 
        selectElement(this, true);
    });
    /*$('.editable_nb_title').editable('http://localhost:8000/dummy/', {
        type      : 'text',
        cancel    : 'Cancel',
        submit    : 'OK',
        indicator : '<img src="../../media/img/indicator.gif">',
        tooltip   : 'Click to change..',
        cols      : 100,
        rows      : 1,
        data: function(value, settings) {
            var retval = Convert.nl_and_br2empty(value);
            return retval;
        },
        callback : function(value, settings) {
            var retval = Convert.nl_and_br2empty(value);             
            setStyleOfElement(activeElement.elementSelected, {text:retval});
            activeElement.updateElementInBase();            
            console.log("setEditables - NEW VALUE: " + retval);
        }
    });*/    
        
    this.isNavigatorBar = function() {
        return isNavigatorBar;
    }
    
    this.setNavigatorBar = function(isBar) {
        isNavigatorBar = isBar;
        if (isBar) {
            var elem = $("#"+that.idNavigationBar);
            $(elem).css('display', "block");            
        } else {
            $("#"+that.idNavigationBar).css('display', "none");
        } 
    }
    
    this.setTitle = function(element, value) {
        var type = element.dataset.designType;
        var position = element.dataset.designPosition;
        if (type && type == ELEMENT_TYPE_NAVIGATOR_BAR_BUTTON && position) {
            if (value == "") {
                var nbButton = this.getButtonByPosition(position);
                $(nbButton).val("+");
                console.log(value);
            }
        }         
    }
    
    this.getButtonByPosition = function(position) {
        var element = undefined;
        $(".navigator_bar_item").each(function() {
           if (this.dataset.designPosition == position) {
               element = this;
               return false;
           }
        });
        return element;
    }
    
    this.setVisible = function(visible) {
        var value = (visible)?"visible":"hidden";
        $("#"+this.idNavigationBar).css("visibility",value);
    }         
    
}

////////////////////
// CANVAS

function Canvas(id, isRetina) {
	var that = this;
    this.id = id;
    this.idCanvasOverlay = "canvas_overlay";  
    this.idCanvasCannotRender = "canvas_cannot_render";
    this.idCanvasCannotRenderOpenDefs = "canvas_cannot_render_open_defs";
    this.overlayBackground = "/gamedesigner/media/img/canvas720x1280.png";
    this.overlayBackgroundCannotRender = "/gamedesigner/media/img/canvas720x1280_cannot_render.png";
        
    var resolution = {x:720*((isRetina) ? 2 : 1), y:720*((isRetina) ? 2 : 1)}
    this.IPAD_RESOLUTION_X = resolution.x;
    this.IPAD_RESOLUTION_Y = resolution.y;
   
    var canvas = document.getElementById(id);
    if(canvas) {
        this.workspaceX = canvas.offsetLeft;
        this.workspaceY = canvas.offsetTop;
        this.workspaceWidth = canvas.offsetWidth;
        this.workspaceHeight = canvas.offsetHeight;
        
        $("#"+that.idCanvasOverlay).click(function(){
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id }, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                        
            
            if(activeElement) {
                activeElement.setNotActive();
            }
        });
        
        $("#"+that.idCanvasCannotRenderOpenDefs).click(function(){
            codeEditor.openEditor();
            codeEditor.openBoardCodeWithCurrentError();            
        });
        
    }
    this.marginLeft = 0;
    this.marginTop = 0;
    this.marginRight = 0;
    this.marginBottom = 0;
    this.parentElementsList = "#elements_list";
    this.elementsList = new Array();    // all elements of clikable area, textfield etc from system
    var draggableItemsAdded = new Array();
    this.navigationBar = new NavigationBar(); 
    this.navigationBar.idParent = id; 
    this.navigationBar.canvas = this; 

    this.enabledNavigationBar = function(enabled) {
        var display = "none";
        if (enabled) {
            display = "block";
        }
        $("#"+this.navigationBar.idNavigationBar).css("display",display);
        $("#"+this.navigationBar.idNavigatorBarToogle).css("display",display);
        $("#"+this.navigationBar.idNavigatorBarSettings).css("display",display);
    }

    this.setResolution = function(resObj) {
        if (!resObj || !resObj.x || !resObj.y) {
            return;
        }        
        
        resolution = resObj; 
        this.IPAD_RESOLUTION_X = resObj.x;
        this.IPAD_RESOLUTION_Y = resObj.y; 
        
        BOARD_SIZE_WIDTH =  this.IPAD_RESOLUTION_X;
        BOARD_SIZE_HEIGHT =  this.IPAD_RESOLUTION_Y;
        
        var qCanvasOverlay = $("#"+this.idCanvasOverlay);
        //if (isPortreit) {            
            qCanvasOverlay.css({"background-image":"url('"+that.overlayBackground+"')","width":""+(resObj.x+30)+"px","height":""+(resObj.y+24)+"px", "background-size": "100% 100%"});//""+resObj.x+"px "+resObj.y+"px"            
        //} else {
        //    qCanvasOverlay.css({"background-image":"url('/gamedesigner/media/img/canvas1280x720.png')","width":"1300px","height":"760px"});
        //}        

        var qContentRulerVert = $("#content_ruler_vert");
        if (qContentRulerVert) {
            var height = $("#"+this.id).height();
            qContentRulerVert.css("height", height-10);
        }        
    }
    
    this.getResolution = function() {
        return resolution;  // {x,y}
    }
    
    this.setBackground = function(offsetX, offsetY, filename) {
        var w = this.IPAD_RESOLUTION_X + offsetX;
        var h = this.IPAD_RESOLUTION_Y + offsetY;
        $("#"+this.id).css({"background-position": "10px "+(that.marginTop)+"px", "max-width":""+w+"px", "max-height":""+h+"px","background-image":"url('"+filename+"')", "background-color": "#fff" , "background-repeat": "no-repeat" });    
		// "width":""+w+"px", "height":""+h+"px", backgroundSize: "100% 100%"
    }    
    
    this.setWorkspaceMargin = function(offsetX, offsetY, offsetWidth, offsetHeight) {
        this.marginLeft = offsetX;
        this.marginTop = offsetY;
        this.marginRight = offsetWidth;
        this.marginBottom = offsetHeight;

        this.workspaceX = canvas.offsetLeft + offsetX;
        this.workspaceY = canvas.offsetTop + offsetY;
        this.workspaceWidth = canvas.offsetWidth - offsetX - offsetWidth;
        this.workspaceHeight = canvas.offsetHeight - offsetY - offsetHeight;
    }

    this.isContainsRect = function(rectX, rectY, rectWidth, rectHeight) {
        var posX = rectX - this.workspaceX;
        var posY = rectY - this.workspaceY;

        if(posX < 0 || posY < 0 || posX + rectWidth > this.workspaceWidth || posY + rectHeight > this.workspaceHeight) {
            return false;
        } else {
            return true;
        }
    }

    this.convertPosXFromCanvasToIPad = function(x) {
        return (x * (this.IPAD_RESOLUTION_X / this.workspaceWidth)).toFixed(0);
    }
    this.convertPosYFromCanvasToIPad = function(y) {
        return (y * (this.IPAD_RESOLUTION_Y / this.workspaceHeight)).toFixed(0);
    }

    this.convertPosXFromIPadToCanvas = function(x) {
        return (x / (this.IPAD_RESOLUTION_X / this.workspaceWidth)).toFixed(0);
    }
    this.convertPosYFromIPadToCanvas = function(y) {
        return (y / (this.IPAD_RESOLUTION_Y / this.workspaceHeight)).toFixed(0);
    }

    this.getCanvas = function() {
        return canvas;
    }

    this.setCanvasForScreenId = function(screenId) {      
        for (var i=0; i < draggableItemsAdded.length; i++) {
            if (draggableItemsAdded[i].dataset.designScreenId == screenId) {
                $(draggableItemsAdded[i]).css("display", "block");
            } else {
                $(draggableItemsAdded[i]).css("display", "none");
            }
        }
        if (activeElement) {
            activeElement.setNotActive();
        }
        this.showElementsList();
    }

    this.addElement = function(elementToAdd) { 
        // try add element to canvas     
        //if (elementToAdd.dataset.designScreenId == currentScreenId) {
            $("#"+this.id)[0].appendChild(elementToAdd);
            draggableItemsAdded.push(elementToAdd);
            
            //if (elementToAdd.dataset.designScreenId != currentScreenId) {
            //    $(elementToAdd).css("display", "none");
            //}
            
            this.showElementsList();
            var navigation = $("#"+this.navigationBar.idNavigationBar);
            $("#"+this.navigationBar.idNavigationBar).insertAfter(elementToAdd);
            $("#"+this.navigationBar.idNavigatorBarToogle).insertAfter("#"+this.navigationBar.idNavigationBar);
            $("#"+this.navigationBar.idNavigatorBarSettings).insertAfter("#"+this.navigationBar.idNavigationBar);
            
            $("#canvas_overlay").insertAfter(elementToAdd);
        //}
         
        // add element to memory
        this.elementsList.push(elementToAdd);        
    }

    this.getElement = function(i) {
        return draggableItemsAdded[i];
    }
    
    this.getLastElement = function() {
        if (draggableItemsAdded.length > 0) {
            return draggableItemsAdded[draggableItemsAdded.length-1];
        } else {
            return undefined;
        }
    }    

    this.removeElement = function(elementRemoved) {
        Editor.removeObjectWithName(elementRemoved.dataset.designName); 

        // remove from draggableItems
        var index = draggableItemsAdded.indexOf(elementRemoved);
        if (index != undefined && index > -1 && index < draggableItemsAdded.length) {       
            draggableItemsAdded.splice(index, 1);
        }   
        
        // remove from global list elements
        index = that.elementsList.indexOf(elementRemoved);
        if (index > -1 && index < that.elementsList.length) {
            that.elementsList.splice(index, 1);
        }
        
        //remove from canvas
        var parent = document.getElementById(this.id);
        parent.removeChild(elementRemoved);
        elementRemoved = undefined;
             
        this.showElementsList();
    }

    this.getElementsList = function() {
        return draggableItemsAdded;
    }
    
    this.getElementsListOfName = function() {
        var namesList = new Array();
        for(var i=0; i < draggableItemsAdded.length; i++) {
            namesList.push(draggableItemsAdded[i].dataset.designName);            
        }
        return namesList;
    }
    
    this.getElementsListForType = function(type) {
        var elements = new Array();
        for(var i=0; i < draggableItemsAdded.length; i++) {
            if (draggableItemsAdded[i].dataset.designType == type) {
                elements.push(draggableItemsAdded[i]);
            }            
        }
        return elements;
    }        
   
    this.showElementsList = function() {
        var html = "<ul>";
        for(var i = 0; i < draggableItemsAdded.length; i++) {
            var element = draggableItemsAdded[i];
            if (element.dataset.designScreenId == currentScreenId) {
                var name = element.dataset.designName;
                var type = element.dataset.designType;
                var x = element.dataset.designXPos;
                var y = element.dataset.designYPos;    
                if(type) {
                    html += "<li><a href='#tagProperties' style='text-decoration:none;'><span class='elements_list' onclick=\"selectElement(canvas.getElement(" + i + "),true);\" onmouseover='selectElement(canvas.getElement(" + i + "));' onmouseout=''>" + name + " </a></li>"; // <span style='color:red;font-size:7pt;'><i>pos:(" + x + "," + y + ")</i></span></span>
                }
            }
        }
        html += "</ul>";
        $(this.parentElementsList).html(html);
    }

    this.existElementName = function(name) {
        for(var i = 0; i < draggableItemsAdded.length; i++) {
            var element = draggableItemsAdded[i];
            if(element.dataset.designName == name) {
                return true;
            }
        }
        return false;
    }
    
    this.getElementForName = function(name) {
        for(var i=0; i < draggableItemsAdded.length; i++) {
            var element = draggableItemsAdded[i];
            if (element.dataset.designName == name) {
                return element;
            }
        }
        return null;
    }

    this.canCreateElementName = function(name) {
       var isExist = this.existElementName(name);
       // element name cannot begin with number
       if (name && name.length > 0 && name.charCodeAt(0) >= 48  && name.charCodeAt(0) <= 57) {
           return false;
       } else if (isExist == false) {
           return true;
       }
       return false;
    }

    this.getFirstAvailableNameForType = function(type) {
        for(var i = 0; ; i++) {
            var name = (type + i).toString();
            name = name.correctVariable("_");
            if(this.existElementName(name) == false) {
                return name;
            }
        }
        return type;
    } 
	
    this.elementForBoardIdAndName = function(id, name) {
        for(var i = 0; i < this.elementsList.length; i++) {
            var element = this.elementsList[i];
            if(element.dataset.designName == name && element.dataset.designScreenId == id) {
                return element;
            }
        }
        return undefined;
    }	
    
    this.setRenderBoardElements = function(isCorrect) {    
        var qCanvasOverlay = $("#"+that.idCanvasOverlay);    
        var qCanvasCannotRender = $("#"+that.idCanvasCannotRender);    
        if (isCorrect) {
            qCanvasCannotRender.css({"display":"none"});            
            //qCanvasOverlay.css({"background-image":"url('"+that.overlayBackground+"')"});                                   
        } else {
            qCanvasCannotRender.css({"display":"block", "width": resolution.x+"px", "height": resolution.y+"px" });
            qCanvasCannotRender.parent().append(qCanvasCannotRender);         
            //qCanvasOverlay.css({"background-image":"url('"+that.overlayBackgroundCannotRender+"')"});
        }
    }
	
	this.globalIsExistImageInActionsForName = function(name)  {
		if (name) {
					
			for(var i=0; i < draggableItemsAdded.length; i++) {
				var tempActions = new Actions();
				tempActions.setByJSON(draggableItemsAdded[i].dataset.designActions, true);				
				if (tempActions.globalIsExistsImageForName(name)) {
					return true;
				}
			}
		}
		return false;
	}
	
	this.globalIsExistsForName = function(name, typeAction) {
		if (name) {
			for(var i=0; i < this.elementsList.length; i++) {			    
				if (typeAction == DELETED_ELEMENT_IMAGE && this.elementsList[i].dataset.designAreaImage == name) {
					return true;
				}
                var tempActions = new Actions();
                tempActions.setByJSON(this.elementsList[i].dataset.designActions, true);              
                if (tempActions.globalIsExistsForName(name, typeAction)) {
                    return true;
                }				
			}
		}
		return false;
	}	
	
	this.globalSetCorrectForName = function(name, typeAction, newName) {
		if (name) {
			for(var i=0; i < this.elementsList.length; i++) {
				var isChange = false;
				
				if (typeAction == DELETED_ELEMENT_IMAGE && this.elementsList[i].dataset.designAreaImage == name) {
					this.elementsList[i].dataset.designAreaImage = "-";
					setStyleOfElement(this.elementsList[i], { area_image : "-" });
					isChange = true;
				}
				
                var tempActions = new Actions();
                tempActions.setByJSON(this.elementsList[i].dataset.designActions, true);
                var json = tempActions.globalSetCorrectForName(name, typeAction, newName);      
                if (json) {
                    this.elementsList[i].dataset.designActions = json;
                    isChange = true;
                    console.log(json);
                }      				

				if (isChange) {
					updateObject(this.elementsList[i], ELEMENT_TYPE_CLICKABLE_AREA);
				}	
			}
		}
		return false;
	}		
}

Canvas.prototype.setDefaultCanvasMargin = function() {
    this.setWorkspaceMargin(14, 15, 15, 92);  // 2par 60px
}
////////////////////
// GRID

function Grid(canvasObject, showGridId, dragToGridId, gridSizeId) {
    var tempGridSize = 30;
    // temp & default gridSize
    this.canvasObject = canvasObject;
    this.showGridId = showGridId;
    this.dragToGridId = dragToGridId;
    this.gridSizeId = gridSizeId;    
    this.gridSize = tempGridSize;
    this.gridColor = "#d9ded7";
    this.gridNumericPlus = "grid_numeric_plus";
    this.gridNumericMinus = "grid_numeric_minus";
    var that = this;
    var lineClass = "gridLine";
    var typeGrid = "solid";//"dashed"
    var gridId = "gridDivId";
    var gridSizeMin = 2;
    var gridSizeMax = 99;
    var isShow;
    var isDrag = false;

    // show grid on/off
    $("#"+this.showGridId+", #"+this.showGridId+"_text").click(function(){
        if(isShow) {
            that.hide();
        } else {
            that.show();
        }
    });

    // drag to grid on/off
    $("#"+this.dragToGridId+", #"+this.dragToGridId+"_text").click(function(){
        if(isDrag) {
            isDrag = false;
        } else {
            isDrag = true;
        }
        that.setDrag(isDrag);
    });
    
    $("#"+gridSizeId).numeric({
                decimal : false,
                negative : false
            }, function() {                                
                this.value = "";
                this.focus();
            });
    $("#"+gridSizeId).change(function() {
        var value = $("#"+gridSizeId).val();
        refreshSizeValue(value);
    });
    
    var refreshSizeValue = function(value) {
        var value = parseInt(value);
        if(isNaN(value)) {
            value = tempGridSize;
        } else if(value < gridSizeMin) {
            value = gridSizeMin;
        } else if(value > gridSizeMax) {
            value = gridSizeMax;
        }

        that.createGrid(value);
        tempGridSize = value;
        document.getElementById(that.gridSizeId).value = value;
    }        
    
    $("#"+this.gridNumericPlus).mousedown(function(){        
        refreshSizeValue(tempGridSize+1);
    });
    $("#"+this.gridNumericMinus).click(function(){
        refreshSizeValue(tempGridSize-1);    
    });
    
    
    // Configure grid size
    
    // spinner
    /*var gridSizeSpinner = $("#" + gridSizeId).spinner({
        min : 2,
        max : 99,
        step : 1,
        start : tempGridSize
    });
    gridSizeSpinner.spinner("value", tempGridSize);
    gridSizeSpinner.keydown(function(e) {
        if(e.keyCode == 13) {
            refreshSpinnerValue(this.value);
        }
    });
    var refreshSpinnerValue = function(valueSpinner) {
        var min = gridSizeSpinner.spinner("option", "min");
        var max = gridSizeSpinner.spinner("option", "max");
        var value = parseInt(valueSpinner);
        if(isNaN(value)) {
            value = tempGridSize;
        } else if(value < min) {
            value = min;
        } else if(value > max) {
            value = max;
        }

        that.createGrid(value);
        tempGridSize = value;
        document.getElementById(that.gridSizeId).value = value;
        //spinner.spinner( "value", value );
    }

    gridSizeSpinner.spinner({
        spin : function(event, ui) {
            refreshSpinnerValue(ui.value);
        },
        change : function(event, ui) {
            refreshSpinnerValue(gridSizeSpinner[0].value);
        }
    });
    */

    var createGridElement = function(canvasObject, gridSize, isShow, isDrag) {
        var gridElement = document.createElement("div");
        gridElement.id = gridId;
        var addStyle = (isShow) ? "visibility: visible;" : "visibility: hidden;";

        gridElement.setAttribute('style', 'left: ' + canvasObject.marginLeft + 'px; top: ' + canvasObject.marginTop + 'px;width: ' + canvasObject.workspaceWidth + 'px;height: ' + canvasObject.workspaceHeight + 'px;  position: absolute;' + addStyle);

        for(var posGridX = 0; posGridX < canvasObject.workspaceWidth; posGridX += gridSize) {
            var lineElement = document.createElement("div");
            if(isDrag) {
                lineElement.setAttribute("class", lineClass);
            }
            lineElement.setAttribute('style', 'left: ' + posGridX + 'px; top: ' + 0 + 'px;width: ' + 2 + 'px;height: ' + canvasObject.workspaceHeight + 'px; border-left: ' +that.gridColor+ ' 1px ' + typeGrid + '; position: absolute');
            gridElement.appendChild(lineElement);
        }
        for(var posGridY = 0; posGridY < canvasObject.workspaceHeight; posGridY += gridSize) {
            var lineElement = document.createElement("div");
            if(isDrag) {
                lineElement.setAttribute("class", lineClass);
            }
            lineElement.setAttribute('style', 'left: ' + 0 + 'px; top: ' + posGridY + 'px;width: ' + canvasObject.workspaceWidth + 'px;height: ' + 2 + 'px; border-top: ' +that.gridColor+ ' 1px ' + typeGrid + '; position: absolute');
            gridElement.appendChild(lineElement);
        }
        return gridElement;
    }

    this.createGrid = function(gridSize) {
        this.gridSize = gridSize;
        var gridElement = document.getElementById(gridId);

        if(gridElement) {
            // remove old grid from canvas
            this.canvasObject.getCanvas().removeChild(gridElement);
        }
        // create new grid for canvas
        gridElement = createGridElement(this.canvasObject, gridSize, isShow, isDrag);        
        this.canvasObject.getCanvas().insertBefore(gridElement, this.canvasObject.getCanvas().firstChild);
        $(gridElement).css("opacity", 0.6);
    }
    refreshSizeValue(tempGridSize);

    this.setDrag = function(canDrag) {
        isDrag = canDrag;
        var gridElement = document.getElementById(gridId);
        if(gridElement) {
            for(var i = 0; i < gridElement.children.length; i++) {
                if(isDrag) {
                    gridElement.children[i].setAttribute("class", lineClass);
                } else {
                    gridElement.children[i].removeAttribute("class");
                }
                document.getElementById(dragToGridId).checked = isDrag;
            }
        }
    }

    this.show = function() {
        var gridElement = document.getElementById(gridId);
        if(!gridElement) {
            this.createGrid(this.gridSize);
        } 
        var gridElement = document.getElementById(gridId);
        if (gridElement) {
            gridElement.style.visibility = "visible";
            document.getElementById(showGridId).checked = true;
            isShow = true;            
        }
    }

    this.hide = function() {
        var gridElement = document.getElementById(gridId);
        if(gridElement) {
            gridElement.style.visibility = "hidden";
            document.getElementById(showGridId).checked = false;
            isShow = false;
        }
    }

    this.isShow = function() {
        return isShow;
    }

    this.getLineClass = function() {
        return lineClass;
    }
}////////////////////
// ACTIVE ELEMENT

function ActiveElement(parentId) {
    this.CALLBACK_ELEMENT_NOT_ACTIVE = "callback_element_not_active";
    var callbackElementNotActive;

    this.parentId = parentId;
    this.elementSelected = undefined;
    this.prevName;
    this.element = document.createElement("div");
    this.element.id = "activeElementDiv";
    this.element.style.position = "absolute";
    this.element.style.border = "2px dotted #aaa";
    this.element.style.visibility = "hidden";
    this.element.style.left = 0 + "px";
    this.element.style.top = 0 + "px";
    this.element.style.width = 0 + "px";
    this.element.style.height = 0 + "px";
    document.getElementById(this.parentId).appendChild(this.element);

    this.show = function(isShow) {
        if(isShow) {
            this.element.style.visibility = "visible";
        } else {
            this.element.style.visibility = "hidden";
        }
    }

    this.refresh = function() {
        if(this.elementSelected) {
            this.element.style.left = this.elementSelected.offsetLeft - 2 + "px";
            this.element.style.top = this.elementSelected.offsetTop - 2 + "px";
            this.element.style.width = this.elementSelected.offsetWidth + "px";
            this.element.style.height = this.elementSelected.offsetHeight + "px";
        }
    }

    this.setCallback = function(nameCallback, functionCallback) {
        if(functionCallback) {
            switch(nameCallback) {
                case this.CALLBACK_ELEMENT_NOT_ACTIVE:
                    callbackElementNotActive = functionCallback;
                    break;
                default:
                    break;
            }
        }
    }

    this.setActiveForElement = function(elementSelected) {
        this.setNotActive();
        this.elementSelected = elementSelected;
        if(elementSelected && elementSelected.dataset && elementSelected.dataset.designOutline == 1) {            
            this.show(true);
            this.refresh();
        }
    }

    this.setNotActive = function() {
        this.elementSelected = undefined;
        this.show(false);
        if(callbackElementNotActive) {
            callbackElementNotActive();
        }
    }

    this.updateElementInBase = function(params) {
        if(this.elementSelected) {
            var type;
            if (this.elementSelected.dataset) {
                type = this.elementSelected.dataset.designType;
            } else {
                type =  this.elementSelected.type;
            }
            updateObject(this.elementSelected, type, params);
        }
    }

    this.removeElementFromBase = function() {
        if(this.elementSelected) {
            var id = this.elementSelected.dataset.designId;
            var type = this.elementSelected.dataset.designType;
            if(id && type) {
                removeObject(this.elementSelected, type);
            }
        }
    }

    this.isVisible = function() {
        if(this.element.style.visibility == "visible")
            return true;
        else
            return false;
    }

}
////////////////////
// PROPERTIES

function Properties(parentId) {
    this.parentId = parentId;
    this.parent = document.getElementById(parentId);
    this.listOfImages = new Array();
    this.propertiesList = [];

    this.addChild = function(propertyToAdd) {
        if(this.parent) {
            this.parent.appendChild(propertyToAdd.getElement());
            propertyToAdd.refreshActions();
            this.propertiesList.push(propertyToAdd);
        } else {
            messageDialog.show("Properties. Add child.","Parent is null.");
        }
    }

    this.removeAllChildren = function() {
        this.propertiesList.length = 0;
        while(this.parent.firstChild) {
            this.parent.removeChild(this.parent.firstChild);
        }
    }
    
    this.getPropertyForId = function(id) {
        for(var i=0; i < this.propertiesList.length; i++) {
            if (id == this.propertiesList[i].id) {
                return this.propertiesList[i];
            }
        }
        return null;
    }

    this.setForType = function(type, element) {
        
        var propertyTypeText = new Property("_type_text", "", "Type", type);

        var propertyXPos = new Property("x_pos", "text", "X pos");
        propertyXPos.setNumeric(true,false);
        propertyXPos.callbackChangeValue = callbackChangeValueXPos;
        propertyXPos.setOldValue(element.dataset.designXPos);        

        var propertyYPos = new Property("y_pos", "text", "Y pos");
        propertyYPos.setNumeric(true,false);
        propertyYPos.callbackChangeValue = callbackChangeValueYPos;
        propertyYPos.setOldValue(element.dataset.designYPos);
        
        var propertyWidth = new Property("width", "text", "Width");
        propertyWidth.setNumeric(true,false);
        propertyWidth.callbackChangeValue = callbackChangeValueWidth;
        propertyWidth.setOldValue(element.dataset.designWidth);

        var propertyHeight = new Property("height", "text", "Height");
        propertyHeight.setNumeric(true,false);
        propertyHeight.callbackChangeValue = callbackChangeValueHeight;        
        propertyHeight.setOldValue(element.dataset.designHeight);
        
        var propertyVisible = new Property("visible", PROPERTY_TYPE_CHECKBOX, "Visible?");
        propertyVisible.setTemplate(280,160);
        propertyVisible.styleRight = "vertical-align:top;"
        propertyVisible.callbackChangeValue = callbackChangeValueVisible;
        
        var propertyName = new Property("name", "text", "Name");
        propertyName.callbackChangeValue = callbackChangeValueName;

        var propertyText = new Property("_text", "textarea", "Text");
        propertyText.styleRight = "height:50px;vertical-align:top";
        propertyText.callbackChangeValue = callbackChangeValueText;

        var propertySingleText = new Property("_text", "text", "Text");
        propertySingleText.callbackChangeValue = callbackChangeValueText;
        
        var propertyHtmlContent = new Property("html_content", "textarea", "HTML");
        propertyHtmlContent.styleRight = "height:50px;vertical-align:top";
        propertyHtmlContent.callbackChangeValue = callbackChangeValueHtmlContent;

        var propertyFontType = new Property("font_type", "select", "Font type");
        propertyFontType.callbackChangeValue = callbackChangeValueFontType;
        propertyFontType.inputClass = "select_styled3";
        propertyFontType.addOptionOfSelect("Helvetica");
        propertyFontType.addOptionOfSelect("Tahoma");
        propertyFontType.addOptionOfSelect("Impact");
        propertyFontType.addOptionOfSelect("Comic Sans MS");
        propertyFontType.addOptionOfSelect("Geneva");

        var propertyFontSize = new Property("font_size", "text", "Font size");
        propertyFontSize.callbackChangeValue = callbackChangeValueFontSize;        
        propertyFontSize.setNumeric(true,false);

        var propertyTextColor = new Property("text_color", "color", "Text color");
        propertyTextColor.callbackChangeValue = callbackChangeValueTextColor;        

        var propertyTitleLabel = new Property("title_label", "text", "Title label");
        propertyTitleLabel.callbackChangeValue = callbackChangeValueTitleLabel;        

        var propertyTitleColor = new Property("title_color", "color", "Title color");
        propertyTitleColor.callbackChangeValue = callbackChangeValueTitleColor;        

        var propertyDraggable = new Property("draggable", PROPERTY_TYPE_CHECKBOX, "Draggable");
        propertyDraggable.callbackChangeValue = callbackChangeValueDraggable;        

        var propertyFileName = new Property("file_name", "select", "File resources",'<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_IMAGES)" />');
        propertyFileName.callbackChangeValue = callbackChangeValueFileName;        
        propertyFileName.styleRight = "width:120px;";
        propertyFileName.setOptionOfSelect(this.listOfImages);

        var propertyBackgroundImage = new Property("background_image", "select", "Background image", "");
        propertyBackgroundImage.callbackChangeValue = callbackChangeValueBackgroundImage;        
        propertyBackgroundImage.inputClass = "select_styled3";    
        var list = this.listOfImages.slice();
        list.push("");    
        propertyBackgroundImage.setOptionOfSelect(list);
        
        propertyBackgroundImage.showButtonDialog = true;
        propertyBackgroundImage.callbackButtonDialog = function(property) { 
            if (activeElement.elementSelected) {
                resourcesUpload[0].setFocusedElement(activeElement.elementSelected.dataset.designBackgroundImage);
            } 
            openResourcesDialog(RESOURCES_TYPE_IMAGES);
            resourcesUpload[0].setButtonAndCallback("Set this image", function() { 
                callbackChangeValueAreaImage(property, resourcesUpload[0].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });           
        };          

        var propertyAreaImage = new Property("area_image", "select", "Area image"," ");
        propertyAreaImage.callbackChangeValue = callbackChangeValueAreaImage;        
        propertyAreaImage.inputClass = "select_styled3";    
        var listArea = this.listOfImages.slice();
        listArea.push("");    
        propertyAreaImage.setOptionOfSelect(listArea);
        
        propertyAreaImage.showButtonDialog = true;
        propertyAreaImage.callbackButtonDialog = function(property) { 
            if (activeElement.elementSelected) {
                resourcesUpload[0].setFocusedElement(activeElement.elementSelected.dataset.designAreaImage);
            } 
            openResourcesDialog(RESOURCES_TYPE_IMAGES);
            resourcesUpload[0].setButtonAndCallback("Set this image", function() { 
                callbackChangeValueAreaImage(property, resourcesUpload[0].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });           
        };  
        
        var propertyProportionalImage = new Property("propertional_image", PROPERTY_TYPE_CHECKBOX, "Proportional",' <input type="image" src="/gamedesigner/media/img/prop_back_to_normal_size_btn.png" onclick="callbackBackToNormalSize()" />');
        propertyProportionalImage.callbackChangeValue = callbackChangeValueProportionalImage;        

        var propertyZoom = new Property("zoom", "select", "Zoom");
        propertyZoom.setNumeric(true,false);
        var zoomOptions = new Array();
        for(var i=0; i < 20; i++) {
            zoomOptions.push(i);
        }
        propertyZoom.setOptionOfSelect(zoomOptions,true);
        propertyZoom.callbackChangeValue = callbackChangeValueZoom;        

        var propertyScreenType= new Property("screen_type","select", "Screen type");
        propertyScreenType.setOptionOfSelect(new Array(TYPE_SCREEN_CANVAS, TYPE_SCREEN_PORTRAIT));
        propertyScreenType.callbackChangeValue = callbackChangeValueTypeScreen;

        var propertySwipegroup = new Property("screen_swipegroup_name","select", "Swipegroup",'<input type="button" value="+" onclick="$( \'#dialog_swipegroups\' ).dialog(\'open\');" />');
        propertySwipegroup.styleRight = "width:120px;";
        propertySwipegroup.setOptionOfSelect(application.getSwipegroupsListByParam("name"));
        propertySwipegroup.addOptionOfSelect(""); // add empty value
        propertySwipegroup.callbackChangeValue = callbackChangeValueSwipegroupName;

        //var propertyUploadImage = new Property("uploadImage", "file", "Upload to resources ");

        var propertyDeleteElement = new Property("delete_element", "image", "");
        propertyDeleteElement.srcImg = "/gamedesigner/media/img/prop_delete_element.png";
        propertyDeleteElement.setTemplate(270,0);
        propertyDeleteElement.styleRight = ""        
        propertyDeleteElement.addAction(PROPERTY_ACTION_CLICK, callbackPropertyDeleteElement);

        this.removeAllChildren();
        //this.addChild(propertyTypeText);
        actions.showActions(false);
        
        //$("#swipegroups").css("display","none");
        //$("#properties").css("display","block");

        switch(type) {
            case ELEMENT_TYPE_BUTTON:
                this.addChild(propertyName);
                this.addChild(propertyText);                
                //this.addChild(propertyTitleLabel);
                this.addChild(propertyBackgroundImage);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyWidth);
                this.addChild(propertyHeight);                                                
                this.addChild(propertyFontType);
                this.addChild(propertyFontSize);
                this.addChild(propertyTextColor);
                //this.addChild(propertyTitleColor);                
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);
                actions.showActions(true);
                break;
            case ELEMENT_TYPE_TEXT:          
                this.addChild(propertyName);
                this.addChild(propertyText);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyWidth);
                this.addChild(propertyHeight);                                                
                this.addChild(propertyFontType);
                this.addChild(propertyFontSize);
                this.addChild(propertyTextColor);
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);
                actions.showActions(false);
                break;
            case ELEMENT_TYPE_TEXTEDIT:          
                this.addChild(propertyName);
                this.addChild(propertyText);                
                //this.addChild(propertySingleText);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyWidth);
                this.addChild(propertyHeight);                                
                this.addChild(propertyFontType);
                this.addChild(propertyFontSize);
                this.addChild(propertyTextColor);
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);
                actions.showActions(false);
                break;

            case ELEMENT_TYPE_IMAGE:
                this.addChild(propertyFileName);
                this.addChild(propertyDraggable);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyName);
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);              
                actions.showActions(true);
                break;
            case ELEMENT_TYPE_HTML:
                this.addChild(propertyHtmlContent);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyName);
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);               
                actions.showActions(true);
                break;
            case ELEMENT_TYPE_MAP:
                this.addChild(propertyZoom);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyWidth);
                this.addChild(propertyHeight);
                this.addChild(propertyName);
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);            
                actions.showActions(true);
                break;                
            case ELEMENT_TYPE_CLICKABLE_AREA:
                this.addChild(propertyName);        
                this.addChild(propertyAreaImage);
                this.addChild(propertyProportionalImage);
                this.addChild(propertyXPos);
                this.addChild(propertyYPos);
                this.addChild(propertyWidth);
                this.addChild(propertyHeight);                
                this.addChild(propertyVisible);
                this.addChild(propertyDeleteElement);            
                actions.showActions(true);
                break;                
            case ELEMENT_TYPE_NAVIGATOR_BAR:
                this.addChild(propertyScreenType);
                this.addChild(propertySwipegroup);
                break;                
            case ELEMENT_TYPE_NAVIGATOR_BAR_BUTTON:
                this.addChild(propertyTitleLabel);
                this.addChild(propertyTitleColor);          
                actions.showActions(true);
                break;
            default:
                break;
        }        
    }

    var returnCheckbox = function(value, inputCheckboxId) {
        var val = parseInt(value);
        var objProperty = document.getElementById(inputCheckboxId);
        if(!isNaN(val) && objProperty) {
            objProperty.checked = (val) ? true : false;
        }
    }

    this.setInputValues = function(element) {
        if(!element) {
            return;
        }
        // elements on canvas
        if (element.dataset) {
            this.setForType(element.dataset.designType, element);
    
            $('#x_pos').val(parseInt(element.dataset.designXPos).toFixed(0));
            
            
            $('#y_pos').val(parseInt(element.dataset.designYPos).toFixed(0));
            $('#width').val(parseInt(element.dataset.designWidth).toFixed(0));
            $('#height').val(parseInt(element.dataset.designHeight).toFixed(0));
            $('#name').val(element.dataset.designName);
            
            returnCheckbox(element.dataset.designVisible, "visible");        
    
            $('#font_size').val(element.dataset.designFontSize);
            $('#font_type').val(element.dataset.designFontType);
    
            $('#title_label').val(element.dataset.designTitleLabel);
            $('#file_name').val(element.dataset.designFileName);
            $('#background_image').val(element.dataset.designBackgroundImage);
            $('#area_image').val(element.dataset.designAreaImage);
    
            returnCheckbox(element.dataset.designProportionalImage, "propertional_image");                
            returnCheckbox(element.dataset.designDraggable, "draggable");
    
            var _text = Convert.br2nl(specialCharsToHtml(element.dataset.designText));
            $('#_text').val(_text);
    
            var html_content = Convert.br2nl(specialCharsToHtml(element.dataset.designHtmlContent));
            $('#html_content').val(html_content);
            
            $('#zoom').val(element.dataset.designZoom);
                        
            $('#screen_type').val(editorScreen.screenType);
            $('#screen_swipegroup_name').val(element.dataset.designSwipegroupName);
            
            if(element.dataset.designTextColor || element.dataset.designTitleColor) {
                var colorHex = "#000000";
                text_color_hex = colorHex;
    
                if(element.dataset.designTextColor) {
                    colorHex = (new Color).myRgbToHex(element.dataset.designTextColor);
                } else if(element.dataset.designTitleColor) {
                    colorHex = (new Color).myRgbToHex(element.dataset.designTitleColor);
                }
                text_color_hex = colorHex;
    
                $.fn.jPicker.defaults.images.clientPath = '/gamedesigner/media/js/jpicker/images/';
                var pickers = new Array("#text_color", "#title_color");
                var titlePickers = new Array("Text color:", "Title color:");
                for(var i = 0; i < pickers.length; i++) {
                    $(pickers[i]).jPicker({
                        window : {
                            expandable : true,
                            title : titlePickers[i]
                        },
                        color : {
                            active : new $.jPicker.Color({
                                ahex : colorHex + 'ff'
                            })
                        }
                    }, function(color, context) {
                        var all = color.val('all');
                        text_color_hex = all.hex;     
                        if(element.dataset.designTextColor) {               
                            callbackChangeValueTextColor();
                        }
                        if(element.dataset.designTitleColor) {               
                            callbackChangeValueTitleColor();
                        }
                    });
                }
            }            
        }       
    }
}

////////////////////
// PROPERTY

var PROPERTY_ACTION_CLICK = "click";
var PROPERTY_TYPE_TITLE = "title";
var PROPERTY_TYPE_TEXT = "text";
var PROPERTY_TYPE_BUTTON = "button";
var PROPERTY_TYPE_IMAGE = "image";
var PROPERTY_TYPE_SELECT = "select";
var PROPERTY_TYPE_CHECKBOX = "checkbox";
var PROPERTY_TYPE_RADIO = "radio";
var PROPERTY_TYPE_TEXTAREA = "textarea";
var PROPERTY_TYPE_FILE = "file";
var PROPERTY_TYPE_SUBMIT = "submit";
var PROPERTY_TYPE_HIDDEN = "hidden";
var PROPERTY_TYPE_RESET = "reset";

function Property(id, _type, prefix, suffix) {
    var that = this;
    this.id = id;
    this.type = _type;
    this.name = id;
    this.actions = new Array();
    this.optionsOfSelect = new Array();
    var className = "menu_property";
    this.callbackChangeValue;
    this.optionsChangeValue = { value:0, selectIndex:0 }
    this.callbackButtonDialog;
    this.styleRight = "";
    this.selectSize = 1;
    this.showButtonDialog = false;
    this.srcImg = "";
    this.srcAddBtn = "/gamedesigner/media/img/property_add.png";
    this.inputClass = "";
    this.acceptFile = "*/*";
    var tempOldValue = null;
    this.oldValue = null;
    var template; 
    var imgTooltipPath;
    var imgTooltipTitle;
    
    this.setClassName = function(_className) {
        className = _className;
        if (className == "menu_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_styled";
                //this.inputClass = "select_styled3";
            } else if (this.type == PROPERTY_TYPE_TEXTAREA) {
                this.inputClass = "textarea_styled";
            }
        } else if (className == "action_property") {   
            if (this.type == PROPERTY_TYPE_SELECT) {
                //this.inputClass = "select_styled";
                this.inputClass = "select_styled3";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_styled";            
            } 
        } else if (className == "app_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_styled";
                //this.inputClass = "select_styled3";
            } 
        } else  if (className == "conversation_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled_gray";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_gray";
            } else if (this.type == PROPERTY_TYPE_CHECKBOX) {
                this.inputClass = "gray";
            }  else if (this.type == PROPERTY_TYPE_TEXTAREA) {
                this.inputClass = "textarea_styled2";
            }
        } else if (className == "conversation_action_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled_gray";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_gray";
            } else if (this.type == PROPERTY_TYPE_CHECKBOX) {
                this.inputClass = "textarea_styled2";
            }
        }  else if (className == "cropped_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled_gray";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_gray";
            } else if (this.type == PROPERTY_TYPE_CHECKBOX) {
                this.inputClass = "gray";
            } else if (this.type == PROPERTY_TYPE_RADIO) {
                this.inputClass = "gray";
            }
        }  else if (className == "editor_code_property") {    
            if (this.type == PROPERTY_TYPE_SELECT) {
                this.inputClass = "select_styled_gray";
            } else if (this.type == PROPERTY_TYPE_TEXT) {
                this.inputClass = "input_text_gray";
            } else if (this.type == PROPERTY_TYPE_CHECKBOX) {
                this.inputClass = "gray";
            } else if (this.type == PROPERTY_TYPE_RADIO) {
                this.inputClass = "gray";
            }
        }            
    }
    this.setClassName(className);
    
  
    if(prefix || prefix == "") {
        this.prefixHTML = prefix;
    } else {
        this.prefixHTML = id + ": ";
    }
    if(suffix || suffix == "") {
        this.suffixHTML = suffix;
    } else {
        this.suffixHTML = "<br/>";
    }
    this.value = "";
    this.isNumeric = false;
    this.numericNegative = true;
    this.floatTemplate = "";
    
    this.setTemplate =function(widthAll,widthLeft, parentStyle) {
        if (!parentStyle) {
            parentStyle = "";
        }
        template = "<div style='width:"+widthAll+"px;"+parentStyle+"'><div id='"+that.id+"_prefix' style='float:left;width:"+widthLeft+"px;margin-top:7px;'>$PREFIX$</div><div style='float:right;width:"+(widthAll-widthLeft)+"px;'>$HTML$$SUFFIX$$OPEN_DIALOG$ <div style='float: right;margin-top:11px;'>$ICON_TOOLTIP$</div></div><div style='clear:both;'></div></div>";
    }
    this.setTemplate(390,105);

    this.setCheckbox = function(isChecked) {
        if (isChecked && this.type == PROPERTY_TYPE_CHECKBOX) {
            $("#"+this.id)[0].checked = (isChecked) ? true : false;
        }
        if (this.type == PROPERTY_TYPE_RADIO) {
            $("#"+this.id).prop("checked", isChecked)
        }
        
    }
    // return 1(true) or 0(false)
    this.getChecked = function() {
       if (this.type == PROPERTY_TYPE_CHECKBOX || this.type == PROPERTY_TYPE_RADIO) {
            return ($("#"+this.id).is(':checked'))?1:0;
        }   
        return undefined;             
    }
    
    this.getElement = function() {
        var property = document.createElement('li');
        property.setAttribute("class", className);
        property.id = this.id+"_parent";               
        
        var html = "";
        var styleTagLi = "";
        if(this.type == PROPERTY_TYPE_SELECT) {
            html += '<div class="'+this.inputClass+'"><select id="' + this.id + '" name="'+this.name+'" size="'+this.selectSize+'" style="'+this.styleRight+'" >';
            for(var i = 0; i < this.optionsOfSelect.length; i++) {
                html += '<option value="' + this.optionsOfSelect[i] + '">' + this.optionsOfSelect[i] + '</option>';
            }
            html += '</select></div>';
        } else if(this.type == PROPERTY_TYPE_CHECKBOX) {
            html += '<input id="' + this.id + '" name="'+this.name+'" class="'+this.inputClass+'" type="' + this.type + '" value="' + this.value + '"  style="'+this.styleRight+'"><label for="' + this.id + '"></label>';
        } else if(this.type == PROPERTY_TYPE_RADIO) {
            html += '<input id="' + this.id + '" name="'+this.name+'" class="'+this.inputClass+'" type="' + this.type + '" value="' + this.value + '"  style="'+this.styleRight+'"><label for="' + this.id + '"></label>';
        } else if(this.type == PROPERTY_TYPE_TEXTAREA) {
            property.style.height = "80px";
            property.style.backgroundPosition = "0px 70px";
            //styleTagLi = "margin-";
            
            html += '<textarea id="' + this.id + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'"></textarea><br />';
        } else if(this.type == "color") {
            html += '<span id="' + this.id + '"></span>';
        } else /*if(this.type == "file") {
            property.style.height = "90px";
            property.style.backgroundPosition = "0px 88px";
            html += contentUpload(this.id);
        } else*/if(this.type == PROPERTY_TYPE_TITLE) {
            html += '<span id="'+ this.id +'">'+this.value+'</span>';
        } else if(this.type == PROPERTY_TYPE_TEXT) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'" value="' + this.value + '">';
        } else if(this.type == PROPERTY_TYPE_BUTTON) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'" value="' + this.value + '">';
        } else if(this.type == PROPERTY_TYPE_IMAGE) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" src="'+this.srcImg+'" class="'+this.inputClass+'" style="'+this.styleRight+'" >';
        } else if(this.type == PROPERTY_TYPE_FILE) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" accept="'+this.acceptFile+'" class="'+this.inputClass+'" style="'+this.styleRight+'" >';
        } else if(this.type == PROPERTY_TYPE_SUBMIT) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'" value="' + this.value + '">';
        } else if(this.type == PROPERTY_TYPE_HIDDEN) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'" value="' + this.value + '">';
        } else if(this.type == PROPERTY_TYPE_RESET) {
            html += '<input id="' + this.id + '" type="' + this.type + '" name="'+this.name+'" class="'+this.inputClass+'" style="'+this.styleRight+'" value="' + this.value + '">';
        }
        
        var imgHtml = "";
        if (imgTooltipPath && imgTooltipTitle) {
            imgHtml = '<img id="'+this.id+'_img_tooltip" src="'+imgTooltipPath+'" title="'+imgTooltipTitle+'" style="cursor: help;" >';
        }
        var buttonDlgHtml = "";
        if (this.showButtonDialog) {
            buttonDlgHtml = '<input id="'+this.id+'_button_dlg" type="image" src="'+this.srcAddBtn+'" style="margin-left: 8px; margin-bottom: 2px;">';
        }

        var templateSet =  template;
        templateSet = templateSet.replace("$PREFIX$",this.prefixHTML);
        templateSet = templateSet.replace("$HTML$",html);
        templateSet = templateSet.replace("$SUFFIX$",this.suffixHTML);
        templateSet = templateSet.replace("$OPEN_DIALOG$",buttonDlgHtml);
        templateSet = templateSet.replace("$ICON_TOOLTIP$",imgHtml);
        
        property.innerHTML = templateSet;//this.prefixHTML + html + this.suffixHTML;
        
        this.setIconTooltip();
        
        return property;
    }

    this.addAction = function(action, callback) {
        var actionObj = new Object();
        actionObj.action = action;
        actionObj.callback = callback;
        this.actions.push(actionObj);
    }

    this.setValue = function(value) {
        $("#"+this.id).val(value);
    }
    
    this.backToOldValue = function() {        
        $("#"+this.id).val(that.oldValue);
    }    
    
    this.setOldValue = function(value) {
        tempOldValue = value;
        that.oldValue = value;
        $("#"+this.id).val(value);
    }        

    this.setNumeric = function(numeric,numericNegative) {
        this.isNumeric = numeric;
        this.numericNegative = numericNegative;
    }

    this.addOptionOfSelect = function(optionValue,notSort) {
        this.optionsOfSelect.push(optionValue);
        if (!notSort) {
            this.optionsOfSelect.sort();
        }
    }
    
    this.setOptionOfSelect = function(arrayList,notSort) {
        this.optionsOfSelect = arrayList;
        if (!notSort) {
            this.optionsOfSelect.sort();
        }
        
        var $parentSelect = $("#"+that.id);
        if ($parentSelect) {
            var html = "";
            for(var i = 0; i < that.optionsOfSelect.length; i++) {
                html += '<option value="' + this.optionsOfSelect[i] + '">' + this.optionsOfSelect[i] + '</option>';
            }     
            $parentSelect.html(html);       
        }
    }
            
    this.setIconTooltip = function(pathToImg, title) {
       imgTooltipPath = pathToImg;
       imgTooltipTitle = title;
    }
    
    /* this.setTooltip = function() {
        $( "#"+this.id ).tooltip({
            items: "li",
        content: function() {
           var element = $( this );
            if ( element.is( "[data-geo]" ) ) {
                var text = element.text();
                return "<img class='map' alt='" + text +
                       "' src='http://maps.google.com/maps/api/staticmap?" +
                       "zoom=11&size=350x350&maptype=terrain&sensor=false&center=" +text + "'>";
            }
           return '<img src="/gamedesigner/media/img/ipad_landscape.png" />';
        if ( element.is( "[title]" ) ) {
        return element.attr( "title" );
        }
        if ( element.is( "img" ) ) {
        return element.attr( "alt" );
        }
        }
        });
    }*/

    this.refreshActions = function() {        
        for(var i = 0; i < this.actions.length; i++) {
            var actionObj = this.actions[i];
            if(actionObj && actionObj.action && actionObj.callback) {
                switch(actionObj.action) {
                    case PROPERTY_ACTION_CLICK:
                        $("#" + this.id).click(function() {
                            var isFind = false;
                            EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

                            actionObj.callback(that);
                        });
                        break;
                    default:
                        break;
                }
            }
        }

        if(this.isNumeric) {
            $("#" + this.id).numeric({
                decimal : false,
                negative : that.numericNegative
            }, function() {                
                //console.log("Positive integers only");
                //this.value = "";
                //this.focus();
            });
        } else {
            $("#" + this.id).removeNumeric();
        }

   
        /*$("#" + this.id).click(function() {
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) return;
        });*/
                                    
               
        $("#" + this.id).change(function() {
            
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_CHANGE_PROPERTY, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); 
            EventsNotification.exe(SequencesSystemEvents.EVENT_CHANGE_BOARD, {text: $(this).val()}, function(r){ if (r) isFind = true;}); 
            if (!isFind) {that.backToOldValue();Messages.tutorialWrong(); Messages.tutorialWrong();return;}


            that.oldValue = tempOldValue;            
            var newValue = $("#"+this.id).val();
            tempOldValue = newValue;    
            
            if (that.oldValue == null) {
                that.oldValue = newValue;
            }

            if(that.callbackChangeValue) {                
                if (that.type != "checkbox") {                                 
                    var index = that.optionsOfSelect.indexOf(newValue);
                    if (index > -1) {
                        that.optionsChangeValue.selectIndex = index;    
                    }                
                    that.optionsChangeValue.value = newValue;
                } else {
                    newValue = that.getChecked();
                }
                // callback    
                that.callbackChangeValue(that,newValue);
            }
        });
        $("#upload_result_" + this.id).fadeOut(5000, function() {
            uploadSuccess = -1;
        });
        $("#"+this.id+"_img_tooltip").tooltip({
              position: {
                my: "center bottom-20",
                at: "center top",
                using: function( position, feedback ) {
                  $( this ).css( position );
                  $( "<div>" )
                    .addClass( "arrow" )
                    .addClass( feedback.vertical )
                    .addClass( feedback.horizontal )
                    .appendTo( this );
                }
             }
         });
        $("#"+this.id+"_button_dlg").click(function() {
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                
                        
            if (typeof that.callbackButtonDialog === "function") {
                that.callbackButtonDialog(that);
            }
        });          
    }
}
////////////////////
// ACTIONS

var ACTIONS_ROOT = "root"
var ACTIONS_ONCLICK = "onclick"
var ACTIONS_ONDROP = "ondrop"
var ACTIONS_SHOW_ELEMENT = "show_element"
var ACTIONS_HIDE_ELEMENT = "hide_element"
var ACTIONS_RUN_XML = "run_xml"
var ACTIONS_GO_BACK = "go_back"
var ACTIONS_PLAY_MP3 = "playmp3"
var ACTIONS_STOP_MP3 = "stopmp3"
var ACTIONS_SHOW_IMAGE = "show_image"
var ACTIONS_SHOW_TPOPUP = "show_tpopup"
var ACTIONS_ITEM_SHOW_TPOPUP = "item_show_tpopup"
var ACTIONS_SHOW_POPOVER = "show_popover"
var ACTIONS_ITEM_SHOW_POPOVER = "item_show_popover"
var ACTIONS_SHOW_GALLERY = "show_gallery"
var ACTIONS_ITEM_SHOW_GALLERY = "item_show_gallery"
var ACTIONS_INITIATE_CONVERSATION = "initiate_conversation"
var ACTIONS_EXECUTE_FUNCTION = "execute_function"
var ACTIONS_TAKE_ITEM = "take_item"
var ACTIONS_DROP_ITEM = "drop_item"

var ActionParams = {
    SHOW_ELEMENT_NAME: "actions_show_element_name",
    HIDE_ELEMENT_NAME: "actions_hide_element_name",
    RUN_BOARD_NAME: "actions_run_board_name",
    PLAY_SOUND_NAME: "actions_play_sound_name",
    SHOW_IMAGE_NAME: "actions_show_image_name",
    SHOW_POPUP_NAME: "actions_show_popup_name",
    ITEM_SHOW_POPUP_TITLE: "actions_item_show_popup_title",
    INITIATE_CONVERSATION_NAME: "actions_initiate_conversation_name",    
}



var optionsActionsDefault = { id_actions: "temp_actions", 
					   id_actions_header: "temp_actions_header",
					   id_actions_tree: "temp_actions_tree",
					   id_actions_tree_option_prefix: "temp_actions_tree_option",
					   id_actions_tree_element_delete: "temp_actions_tree_element_delete",
					   id_actions_parameters: "temp_actions_parameters",
					   id_actions_available: "temp_actions_available",      
					   list_actions_available: new Array(ACTIONS_ONCLICK, //ACTIONS_ONDROP,
									ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML, 
									ACTIONS_SHOW_TPOPUP, ACTIONS_ITEM_SHOW_TPOPUP,
									ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_INITIATE_CONVERSATION
									/*ACTIONS_TAKE_ITEM, ACTIONS_DROP_ITEM*/),         
					  }	

function Actions(options) {    
    if (!options) {
        options = optionsActionsDefault;
    }    
    this.idActions = options.id_actions;
    this.idActionsHeader = options.id_actions_header;
    this.idActionsTree = options.id_actions_tree;
    this.idActionsTreeOptionPrefix = options.id_actions_tree_option_prefix
    this.idActionsTreeElementDelete = options.id_actions_tree_element_delete;
    this.idActionsParameters = options.id_actions_parameters;
    this.idActionsAvailable = options.id_actions_available;
    var listActionsAvailable = options.list_actions_available;
    this.colorTree = "#ffffff";
    this.propertyLiClass = "menu_property";
    var timeMsAfterClickOption = 6000;
    var timeMsAfterLeaveOption = 300;
    
    var that = this;
    var uniqueId = 0;
    var nodeIdSelected;
    
    var tryAddNewAction = false;
    var lastAddedElement;
    var lastDeletedElement;
    var isAddNewAction;    
    var isDeleteAction;    
    this.isAbsoluteParameters = true;
    
    this.arrayIdParentsOfSelectedNode = new Array();    
    this.callbackChangeActions;
    
    //var dataTree = new Array();  //elements of Action for tree
    var dataRoot = ActionFactory(ACTIONS_ROOT);  //root for elements of Action
    dataRoot.uniqueId=uniqueId++;
    var onclick = undefined;
    var ondrop = undefined;
    if (isExistStringInArray(ACTIONS_ONCLICK, listActionsAvailable)) {
        onclick = ActionFactory(ACTIONS_ONCLICK, dataRoot);
        onclick.uniqueId = uniqueId++;
        dataRoot.addChild(onclick);
        if (!this.objectActionSelected) {
            this.objectActionSelected = onclick;
        }
    }
    if (isExistStringInArray(ACTIONS_ONDROP, listActionsAvailable)) {
        ondrop = ActionFactory(ACTIONS_ONDROP, dataRoot);    
        ondrop.uniqueId = uniqueId++;
        dataRoot.addChild(ondrop);
        if (!this.objectActionSelected) {
            this.objectActionSelected = ondrop;
        }
    }
    if (!this.objectActionSelected) {
        this.objectActionSelected = dataRoot;
    }  
    this.idActionSelected=0;  
    
    this.getOnclick = function() {
        return onclick;
    }
    this.getOndrop= function() {
        return ondrop;
    }
    
    this.showActions = function(visible) {
        $("#"+this.idActions).css("display",(visible)?"block":"none");
    }  
    this.showActions(false);
    
    this.showActionsAvailable = function(visible) {
        if (visible) {
            $("#"+this.idActionsAvailable).show("250");
        } else {
            $("#"+this.idActionsAvailable).hide("250");
        }        
        //$("#"+this.idActionsAvailable).css("display",(visible)?"block":"none");
        if (visible) {
            this.showActionsParameters(false);
        }
    }      
    this.showActionsAvailable(false);
	
    this.setListActionsAvailable = function(arrayList) {
        listActionsAvailable = arrayList;
        setActionAvailable();
    }
    
    this.getListActionsAvailable = function(arrayList) {
        return listActionsAvailable;
    }    
    this.isActionAvailable = function(typeAction) {
        return isExistStringInArray(typeAction, listActionsAvailable);
    }   	
    
    this.showActionsParameters = function(visible) {
        if (visible) {
            $("#"+this.idActionsParameters).show("120");
        } else {
            $("#"+this.idActionsParameters).hide("120");
        }
        //$("#"+this.idActionsParameters).css("display",(visible)?"block":"none");
        if (visible) {
            this.showActionsAvailable(false);
        }
    }  
    this.showActionsParameters(false);    
    
    this.setJSTree = function() {
        $("#"+this.idActionsTree).jstree( { "plugins" : ["themes","html_data", "crrm","ui"], // ,"ui"
            "core" : { /*"initially_open" : this.arrayIdParentsOfSelectedNode*/ }, 
            "themes" : { "theme" : "classic","icons" : false},
            "ui": { "select_limit" : 1, }
            // 1) if using the UI plugin bind to select_node
            }).bind("select_node.jstree", function (event, data) { 
                // `data.rslt.obj` is the jquery extended node that was clicked    
                
                nodeIdSelected = data.rslt.obj.attr("id");
                $.jstree._focused().select_node("#"+nodeIdSelected);                    

                /*alert("now");
                
                var nodeId = data.rslt.obj.attr("id");
                var obj = that.getActionObjectByNodeId(nodeId);
                console.log(nodeId);          
                console.log(obj);   

                that.objectActionSelected = obj;
                that.nodeIdSelected = nodeId;
                
                                              
                //that.idActionSelected = data.rslt.obj.attr("id");                     
                
                var ids = undefined;
                if (isDeleteAction) {
                    ids = data.inst.get_path('#' + that.idActionSelected,true);
                } else {
                    ids = data.inst.get_path('#' + data.rslt.obj.attr('id'),true);                 
                }  
                if (ids) {
                    that.arrayIdParentsOfSelectedNode = ids;
                }    

                tryAddNewAction = false;
                
                $("#"+that.idActionsTreeElementDelete).button().button(isDeleteEnabled);*/
            }).bind("loaded.jstree", function (event, data) {
                //$.jstree._focused().select_node("#"+that.idActionSelected);                                      
            }).delegate("a", "click", function (event, data) { event.preventDefault(); });                       
    }    
    
	this.setByObject = function(objActions,parent) { 
        for(var i=0; i < objActions.length; i++) {
            var objAct = objActions[i];
            if (!objAct.type) {
                return;
            }
            var actionElement = ActionFactory(objAct.type, parent);
            actionElement.uniqueId = uniqueId++;
            actionElement.container = this;
            actionElement.propertyLiClass = this.propertyLiClass;
            switch(objAct.type) {
                case ACTIONS_ONCLICK:
                    if (objAct.events) {       
                        this.setByObject(objAct.events,actionElement);
                    }                                          
                    break;
                case ACTIONS_ONDROP:
                    if (objAct.events) {       
                        this.setByObject(objAct.events,actionElement);
                    }
                    break;                
                case ACTIONS_SHOW_ELEMENT:
                case ACTIONS_HIDE_ELEMENT:
                    actionElement.name = objAct.name;
                    actionElement.key = objAct.key;
                    break;
                case ACTIONS_RUN_XML:
                    actionElement.name = objAct.name;
                    actionElement.key = objAct.key;
                    actionElement.animated = objAct.animated;
                    break;
                case ACTIONS_PLAY_MP3:
                    actionElement.name = objAct.name;
                    actionElement.key = objAct.key;
                    actionElement.loop = objAct.loop;
                    break;
                case ACTIONS_SHOW_IMAGE:
                    actionElement.pImage = objAct.image;
                    actionElement.key = objAct.key;
                    if (objAct.events) {    
                        this.setByObject(objAct.events,actionElement);
                    }                    
                    break;  
                case ACTIONS_SHOW_TPOPUP:
					actionElement.name = objAct.name;
                    actionElement.key = objAct.key;
                    //actionElement.title = objAct.title;
                    //actionElement.description = objAct.description;
                    //actionElement.x_pos = (objAct.x_pos)?objAct.x_pos:"";
                    //actionElement.y_pos = (objAct.y_pos)?objAct.y_pos:"";
                    //actionElement.width = (objAct.width)?objAct.width:"";
                    //actionElement.height = (objAct.height)?objAct.height:"";                    
                    if (objAct.items) {  
                        this.setByObject(objAct.items,actionElement);
                    }                    
                    break;
                case ACTIONS_ITEM_SHOW_TPOPUP:
                    actionElement.title = objAct.title;
                    actionElement.subtitle = objAct.subtitle;
                    actionElement.image = objAct.image;
                    if (objAct.events) {     
                        this.setByObject(objAct.events,actionElement);
                    }                      
                    break;                                        
                case ACTIONS_SHOW_POPOVER:
                    actionElement.x_pos = (objAct.x_pos)?objAct.x_pos:"";
                    actionElement.y_pos = (objAct.y_pos)?objAct.y_pos:"";
                    actionElement.width = (objAct.width)?objAct.width:"";
                    actionElement.height = (objAct.height)?objAct.height:"";                    
                    if (objAct.items) {  
                        this.setByObject(objAct.items,actionElement);
                    }                    
                    break;
                case ACTIONS_ITEM_SHOW_POPOVER:
                    actionElement.title = objAct.title;
                    actionElement.subtitle = objAct.subtitle;
                    actionElement.image = objAct.image;
                    if (objAct.events) {     
                        this.setByObject(objAct.events,actionElement);
                    }                      
                    break;   
                case ACTIONS_SHOW_GALLERY:
                    actionElement.startup = objAct.startup;
                    actionElement.startup_image = objAct.startup_image;
                    actionElement.thumbnails_mode = objAct.thumbnails_mode;
                    if (objAct.images) {
                        for(var j=0; j < objAct.images.length; j++) {         
                            this.setByObject(objAct.images,actionElement);
                        }
                    }                    
                    break;                    
                case ACTIONS_ITEM_SHOW_GALLERY:
                    actionElement.thumbnail = objAct.thumbnail;
                    if (objAct.events) {       
                        this.setByObject(objAct.events,actionElement);
                    }                      
                    break;     
                case ACTIONS_INITIATE_CONVERSATION:
                    actionElement.pName = objAct.name;
                    actionElement.key = objAct.key;
                    if (objAct.events) {      
                        this.setByObject(objAct.events,actionElement);
                    }     
                    break;   
                case ACTIONS_TAKE_ITEM:
                    actionElement.pItemName = objAct.item_name;
                    actionElement.pDisappearAfterTaking = objAct.disappear_after_taking;
                    if (objAct.events) {
                        this.setByObject(objAct.events,actionElement);
                    }                      
                case ACTIONS_DROP_ITEM:
                    actionElement.pItemName = objAct.item_name;
                    actionElement.pLeaveAfterDrop = objAct.leave_after_drop;
                    if (objAct.events) {
                        this.setByObject(objAct.events,actionElement);
                    }     
                    break;                                                       
            }   
            if (parent) {
                parent.addChild(actionElement);
            } 
        }        
    }

	// set actions instance Objects by json
	this.setByJSON = function(json, notRefresh) {
	    // remove all actions
	    //console.log("Set by JSON: "+json);
	    if (dataRoot.getChildren()[0] && dataRoot.getChildren()[0].children) {
            dataRoot.getChildren()[0].children = [];
        }
        if (dataRoot.getChildren()[1] && dataRoot.getChildren()[1].children) {
            dataRoot.getChildren()[1].children = [];
        }
	    if (json) {
    	    try {                  
    	       var objActions = JSON.parse(json); 
    	       if (objActions.actions) {
                   if (objActions.actions[0]) { // click
                       //console.log(objActions.actions[0].events);
                       this.setByObject(objActions.actions[0].events, dataRoot.getChildren()[0]);
                   }
                   if (objActions.actions[1]) { // drop
                       //console.log(objActions.actions[1].events);
                       this.setByObject(objActions.actions[1].events, dataRoot.getChildren()[1]);
                   }
    	       } else {
    	           throw "Bad format JSON in set Actions.";
    	       }    	           	           	      
    	    } catch(e) { console.log("Error set actions by JSON: "+e); }
	    } else {
	        //console.log("JSON is empty in set actions");
	    }  	    
		//if (!notRefresh) {
		this.reflowTree();  
		this.setJSTree();
		//}
	}
	
    this.canAddAction = function(typeAction) {
        var actionParent = that.getActionObjectByNodeId(nodeIdSelected);
        if (actionParent) {
            var enabledActions = actionParent.enabledActions;
            if (enabledActions) {
                for(var i=0; i < enabledActions.length; i++) {
                    if (typeAction == enabledActions[i]) {
                        return true;
                    }
                }            
            }
        }
        return false;
    }
    
    this.addActionForActionParent = function(typeAction, actionParent) {        
        //var isFind = false;
        //EventsNotification.exe(SequencesSystemEvents.EVENT_ADD_ACTION, {actionType: typeAction}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
        
        var actionElement = ActionFactory(typeAction, actionParent);
        actionElement.uniqueId = uniqueId++;
        actionElement.container = this;
        actionParent.addChild(actionElement); 
        this.callbackAsJSON();
        return actionElement;       
    }        
    
    this.addActionForNodeId = function(typeAction, nodeId) {        
        if (this.canAddAction(typeAction)) {  
            
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_ADD_ACTION, {actionType: typeAction}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
                      
            var actionParent = that.getActionObjectByNodeId(nodeId);
            if (actionParent) {   
                
                var actionElement = ActionFactory(typeAction, actionParent);
                actionElement.uniqueId = uniqueId++;
                actionElement.container = this;
                actionElement.propertyLiClass = this.propertyLiClass;

                console.log("add action "+typeAction+" for node id:"+nodeId);
                            
                var addNodeId = that.idActionsTreeOptionPrefix+actionElement.uniqueId;                                
                $("#"+this.idActionsTree).jstree("create","#"+nodeId, "last", {attr : {id: addNodeId}, data: "Wezel"}, false, true);
                
                var html = createLeafNode(actionElement);
                //console.log(html);
                $("#"+addNodeId).html(html);
                
                actionParent.addChild(actionElement);                
                setEventsLeafNode(addNodeId);
                $.jstree._focused().select_node("#"+addNodeId);
                
                $("#"+addNodeId+"_edit").trigger("click");
                
                this.callbackAsJSON();
            }                                              
        }
    }
    
    
    this.removeActionForNodeId = function(idNode) {
        var action = that.getActionObjectByNodeId(idNode);
        if (action) {               
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_REMOVE_ACTION, {actionType: action.type}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        

            console.log("remove node id:"+idNode);
            
            $("#"+this.idActionsTree).jstree("remove",$("#"+idNode));
            action.parent.removeChild(action);
            this.callbackAsJSON();
        }
    }    
    
    var addActionAvailable = function(typeAction,isParent,parent) {
        if (that.isActionAvailable(typeAction) == false || that.canActionAvailableDisplay(typeAction) == false) {
            return;
        }
        var li = document.createElement("li");
        li.id = that.idActionsAvailable+"_"+typeAction;
        var a = document.createElement("a");
        a.href = "javascript:void(0)";
        var tempAction = ActionFactory(typeAction);
        a.innerHTML = tempAction.getStringName(); 
        li.appendChild(a);
        if (isParent) {
            var ul = document.createElement("ul");
            ul.id = that.idActionsAvailable+"_parent_"+typeAction;
            li.appendChild(ul);
            console.log(parent);
        }            
        parent.appendChild(li);       
        
        $(a).click(function() {            
           that.addActionForNodeId(typeAction, nodeIdSelected);           
           that.showActionsAvailable(false);
        });
    }
    
    var setActionAvailable = function() {   
        var parentObj = $("#"+that.idActionsAvailable);
        var parent = parentObj[0];   
        parentObj.html("");
        
        addActionAvailable(ACTIONS_SHOW_ELEMENT, false, parent);
        addActionAvailable(ACTIONS_HIDE_ELEMENT, false, parent);
        addActionAvailable(ACTIONS_RUN_XML, false, parent);
        addActionAvailable(ACTIONS_GO_BACK, false, parent);
        addActionAvailable(ACTIONS_PLAY_MP3, false, parent);
        addActionAvailable(ACTIONS_STOP_MP3, false, parent);
        addActionAvailable(ACTIONS_SHOW_IMAGE, false, parent);
        addActionAvailable(ACTIONS_SHOW_TPOPUP, false, parent);
        addActionAvailable(ACTIONS_ITEM_SHOW_TPOPUP, false, parent);
        addActionAvailable(ACTIONS_SHOW_POPOVER, false, parent);
        addActionAvailable(ACTIONS_ITEM_SHOW_POPOVER, false, parent); //$("#"+that.idActionsAvailable+"_parent_"+ACTIONS_SHOW_POPOVER)[0]);
        addActionAvailable(ACTIONS_SHOW_GALLERY, false, parent);
        addActionAvailable(ACTIONS_ITEM_SHOW_GALLERY, false, $("#"+that.idActionsAvailable+"_parent_"+ACTIONS_SHOW_GALLERY)[0]);
        addActionAvailable(ACTIONS_INITIATE_CONVERSATION, false, parent);
        addActionAvailable(ACTIONS_TAKE_ITEM, false, parent);
        addActionAvailable(ACTIONS_DROP_ITEM, false, parent);
        
        $("#"+that.idActionsAvailable).menu();	
		//that.showActionsAvailable(tryAddNewAction);		
        $("#"+that.idActionsAvailable).click(function() {
            
            that.showActionsAvailable(false); 
        });       
    }
    
    this.canActionAvailableDisplay = function(typeAction) {
        var action = this.getActionObjectByNodeId(nodeIdSelected);
        if (action && action.displayActions) {
            var list = action.displayActions;
            for(var i=0; i < list.length; i++) {
                if (list[i] == typeAction) {
                    return true;
                }
            }  
        }
        return false;
    }       
     
    this.setVisibilityActionAvailable = function() {    
       var action = this.getActionObjectByNodeId(nodeIdSelected);                  
       if (action) {
            for (var i=0; i < actionList().length; i++) {
                $("#"+that.idActionsAvailable+"_"+actionList()[i]).addClass("ui-state-disabled");
            }
            var typeAction = action.getType();
            var clickableActions = action.clickableActions;
            if (clickableActions) {
                for (var i=0; i < clickableActions.length; i++) {
                    var isAvailable = false;
                    for (var j=0; j < actionList().length; j++) {
                        if(actionList()[j] == clickableActions[i]) {
                            isAvailable = true;
                            break;
                        }
                    }
                    if (isAvailable) {
                        $("#"+that.idActionsAvailable+"_"+clickableActions[i]).removeClass("ui-state-disabled");
                    }
                }
            }                        
        }
    }   
    
    this.setEvents = function() {           
       
        var allActionsList = this.getActionsList();
        if (allActionsList) {
            for(var i=0; i < allActionsList.length; i++) {      
                
                setEventsLeafNode(this.idActionsTreeOptionPrefix+allActionsList[i].uniqueId);                       
            }
            //$("#"+this.idActionsParameters).empty();
        }         
       
       $( "#"+this.idActionsTreeElementDelete ).button().unbind("click").click(function() {
           that.removeAction();
	   });            
	   //$("#"+this.idActionsTree).tooltip();	
	   //$("#"+this.idActionsParameters).mouseleave(function() { that.showActionsParameters(false); });  	
    }
   
    this.setOptionsOfTreeElement = function(typeAction, nodeId) {   
        var rightPos = 2;     
        var widthSplit = 18; 
        var html = "";      
        
        var offsetX = 0;
        
        var tempAction = ActionFactory(typeAction);   
        var canAdd = (tempAction.displayActions.length > 0);  
        if (typeAction == ACTIONS_ONCLICK || typeAction == ACTIONS_ONDROP || canAdd) { 
            offsetX += widthSplit;
        }
                      
        var remove = '<img id="'+nodeId+'_remove" data-id="'+nodeId+'" src="/gamedesigner/media/img/icon_remove.png" style="position:absolute; right:'+rightPos+'px;cursor:pointer;" class="actions_tree_icon">';
        var add = '<img id="'+nodeId+'_add" data-id="'+nodeId+'" src="/gamedesigner/media/img/icon_add.png" style="position:absolute;right:'+(rightPos-widthSplit)+'px;cursor:pointer;" class="actions_tree_icon">';
        var edit = '<img id="'+nodeId+'_edit" data-id="'+nodeId+'" src="/gamedesigner/media/img/pencil_small.png" style="position:absolute;right:'+(rightPos-widthSplit-offsetX)+'px;cursor:pointer; width:16px;margin-top:0px;" class="actions_tree_icon">';
  
        if (typeAction == ACTIONS_ONCLICK || typeAction == ACTIONS_ONDROP || canAdd) {            
            html += add;
        }
        if (typeAction != ACTIONS_ONCLICK && typeAction != ACTIONS_ONDROP) {            
            html += remove;
            if (tempAction.params.length > 0) {
                html += edit;            
            }
        }
        return html;
    }   
    
    var createLeafNode = function(action) {
        var html = "";
        //html += "<ul>";
        var nodeId = that.idActionsTreeOptionPrefix+action.uniqueId; 
        //html += "<li id=\""+nodeId+"\" title='"+action.getInfo()+"' style='margin-left:0px;' >";
        html += "<ins class='jstree-icon'>&nbsp;</ins>";
        html += "<a style='cursor:default;'><ins class='jstree-icon'>&nbsp;</ins>";
        html += "<div style='position:relative;display:inline;overflow:hidden;width:150px;background-color:transparent;'>";
        html += "<div style='display:inline-block;width:200px;background-color:transparent;color:"+that.colorTree+";'>";
        html += shortenString(action.getTreeName(), 25, "..");
        html += "</div>";
        html += "<div style='display:inline-block;position:absolute;right:10px;'>"; 
        html += that.setOptionsOfTreeElement(action.getType(), nodeId);
        html += "</div>";
        html += "</div>";
        html += "</a>";
        //html += "</li>";            
       // html += "</ul>";    
       return html;    
    }
    
    var timers = new Array();
    var timersEdit = new Array();
    var setEventsLeafNode = function(nodeId) {
   
        // add
        var idAdd = nodeId+'_add';
        var timer;
        timers.push(timer);        
        $("#"+idAdd).click(function() {    
            
            // clear
            for(var i=0; i < timers.length; i++) {
                window.clearInterval(timers[i]);
            } 
            $("#"+this.idActionsAvailable).hide();

            nodeIdSelected = $(this)[0].dataset.id;            
                      
            setActionAvailable();            
            that.setVisibilityActionAvailable();    
                        
            //var typeAction =   spis akcji od $(this)[0].dataset.id
            var isEnabled = true;//(that.objectActionSelected.displayActions.length > 0)?"enable":"disable";
            //var isDeleteEnabled = (typeAction != ACTIONS_ONCLICK && typeAction != ACTIONS_ONDROP)?"enable":"disable";
            $("#"+that.idActionsAvailable).menu(isEnabled);
            

            var parentOffset = $(this).parent().offset();                
            that.correctPositionOfMenuActionsAvailable((parentOffset.left+16), parentOffset.top);                    
            
            that.showActionsAvailable(true);
                         
            timer = window.setTimeout(function(){  that.showActionsAvailable(false) }, timeMsAfterClickOption);          
        });
        
        /*$("#"+idAdd).mouseenter(function() {
            window.clearInterval(timer);
            that.showActionsAvailable(false);            
        });*/
        $("#"+that.idActionsAvailable).mouseenter(function() {
            window.clearInterval(timer);
        });
        $("#"+that.idActionsAvailable).mouseleave(function() {
            timer = window.setTimeout(function(){  that.showActionsAvailable(false) }, timeMsAfterLeaveOption);
        });    

        // edit         
        var idEdit = nodeId+'_edit';       
        var timerEdit;
        timersEdit.push(timer);  
        $("#"+idEdit).click(function(e) {    
            
            // clear
            for(var i=0; i < timersEdit.length; i++) {
                window.clearInterval(timersEdit[i]);
            } 
            $("#"+this.idActionsAvailable).hide();
            
            nodeIdSelected = $(this)[0].dataset.id;            
                       
            var parentOffset = $(this).parent().offset();                
            that.correctPositionOfMenuActionsParameters((parentOffset.left+16), parentOffset.top);
            
            that.setParameters(nodeId);
            that.showActionsParameters(true);  
            
            timerEdit = window.setTimeout(function(){  that.showActionsParameters(false) }, timeMsAfterClickOption);                    
        }); 
        $("#"+that.idActionsParameters).mouseenter(function() {
            window.clearInterval(timerEdit);
        });
        $("#"+that.idActionsParameters).mouseleave(function() {
            timerEdit = window.setTimeout(function(){  that.showActionsParameters(false) }, timeMsAfterLeaveOption);
        });                 
    
        // remove
        var idRemove = nodeId+'_remove';
        $("#"+idRemove).click(function() {                
           that.removeActionForNodeId($(this)[0].dataset.id);
        });      
    }
    
    var showTreeElement = function(parentAction) {
        var html = "";
        var hasChilds = parentAction.canHasChildren() && (parentAction.getChildren().length > 0);
        if (hasChilds) {
            html += "<ul>";
            for(var i=0; i < parentAction.getChildren().length; i++) {// this.className = 'actions_tree_element_active';
                var action = parentAction.getChildren()[i];
                var nodeId = that.idActionsTreeOptionPrefix+action.uniqueId; 
                html += "<li id=\""+nodeId+"\" title='"+action.getInfo()+"'> ";
                html += "<a style='cursor:default;'> ";
                html += "<div style='position:relative;display:inline;overflow:hidden;width:150px;background-color:transparent;'>";
                html += "<div style='display:inline-block;width:200px;background-color:transparent;color:"+that.colorTree+";'> ";
                html += ""+shortenString(action.getTreeName(), 25, "..")+"";
                html += "</div>";
                html += "<div style='display:inline-block;position:absolute;right:10px;'>";
                html += ""+that.setOptionsOfTreeElement(action.getType(), nodeId)+"";
                html += "</div>";
                html += "</div>";
                html += "</a>";                 
                html += showTreeElement(action);
                html += "</li>";            
            }
            html += "</ul>";
        }
        return html;
    }       
    
    
    this.correctPositionOfMenuActionsAvailable = function(offsetLeft, offsetTop) {
        $("#"+that.idActionsAvailable).css({ 
            position: "absolute",
            marginLeft: 0, marginTop: 0,
            top: (offsetTop), left: (offsetLeft)
        }).appendTo('body');
    }
    
    this.correctPositionOfMenuActionsParameters = function(offsetLeft, offsetTop) {
        if (this.isAbsoluteParameters) {
            $("#"+that.idActionsParameters).css({ 
                position: "absolute",
                marginLeft: 0, marginTop: 0,
                top: (offsetTop), left: (offsetLeft)
            }).appendTo('body');
        }
    }   
      
    
    this.reflowTree = function() {   
        var html = "";
        html += showTreeElement(dataRoot);
        $("#"+this.idActionsTree).html(html);
        
        /*window.setTimeout(function(){
           if (isAddNewAction) {
                isAddNewAction = false;
                //alert("new acr "+that.idActionSelected);
                //that.displayActionsParameters($("#"+that.idActionSelected));
            }            
        }, 1000);*/
        
        that.setEvents();
     
        
        /*for(var i=0; i < idTree; i++) {            
            var removeAction = this.idActionsTreeOptionPrefix+i+'_remove';
            $("#"+removeAction).click(function() {                
               that.removeActionForNodeId($(this)[0].dataset.id);
            });  
            $("#"+removeAction).mouseenter(function() {                
               //console.log($(this)[0].dataset.id);
            });       
            
            var addAction = this.idActionsTreeOptionPrefix+i+'_add';        
            $("#"+addAction).click(function(e) {               
                var parentOffset = $(this).parent().offset();                
				that.correctPositionOfMenuActionsAvailable((parentOffset.left+16), parentOffset.top);
				
				tryAddNewAction = true;
                that.showActionsAvailable(true);                              
            });           
            var editAction = this.idActionsTreeOptionPrefix+i+'_edit';        
            $("#"+editAction).click(function(e) {                
                that.displayActionsParameters(this);                          
            });                                                          
        }
        $("#"+this.idActionsParameters).empty();  
        */
    }
    	
    this.setParameters = function(nodeId) {
        var action = this.getActionObjectByNodeId(nodeId);
        if (action && nodeId) {
            $("#"+this.idActionsParameters).html("");
            if (action.container) {          
                action.setParams(this.idActionsParameters);
            }            
        }
    }
    
    this.getByJSON = function() {
        var json = JSON.stringify(dataRoot.getObject());
        return json;
    }
    
    this.callbackAsJSON = function() {
        if (typeof this.callbackChangeActions === "function") {
            var json = JSON.stringify(dataRoot.getObject());
            this.callbackChangeActions(this, json);
        }  
    }       
    
    this.refreshWithCallback = function(action) {
        $("#"+nodeIdSelected)[0].title = action.getInfo();
        action.setParams(that.idActionsParameters);
        this.callbackAsJSON();
    }    

    var actionsListElement = function(parentAction, data) {
        data.push(parentAction);
        var hasChilds = parentAction.canHasChildren() && (parentAction.getChildren().length > 0);
        if (hasChilds) {
            for(var i=0; i < parentAction.getChildren().length; i++) {
                var action = parentAction.getChildren()[i];             
                actionsListElement(action,data);
            }
        }
    }   
        
    this.getActionsList = function() {   
        var actionsList = [];
        actionsListElement(dataRoot, actionsList);
        return actionsList;
    }   

    this.getUniqueIdByNodeId = function(nodeId) {        
        var uniId = parseInt(nodeId.replace(that.idActionsTreeOptionPrefix,""));        
        if (!isNaN(uniId)) {
            return uniId;
        }
        return 0;
    }
    
    this.getActionObjectByNodeId = function(nodeId) {
        var compareUniqueId = this.getUniqueIdByNodeId(nodeId); 
        var allActionsList = this.getActionsList();
        if (compareUniqueId && allActionsList) {
            for(var i=0; i < allActionsList.length; i++) {                
                if (compareUniqueId == allActionsList[i].uniqueId) {
                    return allActionsList[i];
                }
            }
        }
        return undefined;               
    }
    
    this.globalAreAnyParametersEmpty = function() {
        var actionsList = this.getActionsList();
        for(var i=0; i < actionsList.length; i++) { 
            
            if (actionsList[i].getType() == ACTIONS_SHOW_IMAGE && !actionsList[i].pImage) {
                return true;
            }
            if (actionsList[i].getType() == ACTIONS_PLAY_MP3 && !actionsList[i].name) {
                return true;
            }
            if ((actionsList[i].getType() == ACTIONS_TAKE_ITEM || actionsList[i].getType() == ACTIONS_DROP_ITEM) && !actionsList[i].pItemName) {
                return true;
            }
            if (actionsList[i].getType() == ACTIONS_INITIATE_CONVERSATION && !actionsList[i].pName) {
                return true;
            }
            if (actionsList[i].getType() == ACTIONS_SHOW_TPOPUP && !actionsList[i].name) {
                return true;
            }
            if ((actionsList[i].getType() == ACTIONS_SHOW_ELEMENT || actionsList[i].getType() == ACTIONS_HIDE_ELEMENT) && !actionsList[i].name) {
                return true;
            }            
        }
        return false;
    }

    this.globalIsExistsForName = function(name, typeAction) {
        var actionsList = this.getActionsList();
        for(var i=0; i < actionsList.length; i++) { 
            
            if (typeAction == DELETED_ELEMENT_IMAGE && actionsList[i].getType() == ACTIONS_SHOW_IMAGE && actionsList[i].pImage == name) {
                return true;
            }
            if (typeAction == DELETED_ELEMENT_SOUND && actionsList[i].getType() == ACTIONS_PLAY_MP3 && actionsList[i].name == name) {
                return true;
            }
            if (typeAction == DELETED_ELEMENT_ITEM && (actionsList[i].getType() == ACTIONS_TAKE_ITEM || actionsList[i].getType() == ACTIONS_DROP_ITEM) && actionsList[i].pItemName == name) {
                return true;
            }
            if (typeAction == DELETED_ELEMENT_CONVERSATION && actionsList[i].getType() == ACTIONS_INITIATE_CONVERSATION && actionsList[i].pName == name) {
                return true;
            }
            if (typeAction == DELETED_ELEMENT_POPUP && actionsList[i].getType() == ACTIONS_SHOW_TPOPUP && actionsList[i].name == name) {
                return true;
            }
            if (typeAction == DELETED_ELEMENT_CLICKABLE_AREA && (actionsList[i].getType() == ACTIONS_SHOW_ELEMENT || actionsList[i].getType() == ACTIONS_HIDE_ELEMENT) && actionsList[i].name == name) {
                return true;
            }            
        }
        return false;
    }
    
    
    this.globalSetCorrectForName = function(name, typeAction, newName) {
        var actionsList = this.getActionsList();

        var isChange = false;
        for(var i=0; i < actionsList.length; i++) {   
            
            // edit section
            if (typeAction == EDIT_ELEMENT_IMAGE && (actionsList[i].getType() == ACTIONS_SHOW_IMAGE)) {                                
                if (actionsList[i].pImage == name) {
                    actionsList[i].pImage = newName;
                    isChange = true;
                }
            }             
            if (typeAction == EDIT_ELEMENT_SOUND && actionsList[i].getType() == ACTIONS_PLAY_MP3) {                                
                if (actionsList[i].name == name) {
                    actionsList[i].name = newName;
                    isChange = true;
                }
            }      
            if (typeAction == EDIT_ELEMENT_ITEM && (actionsList[i].getType() == ACTIONS_TAKE_ITEM || actionsList[i].getType() == ACTIONS_DROP_ITEM)) {                                
                if (actionsList[i].pItemName) {
                    actionsList[i].pItemName = newName;
                    isChange = true;
                }
            }    
            if (typeAction == EDIT_ELEMENT_CONVERSATION && actionsList[i].getType() == ACTIONS_INITIATE_CONVERSATION) {                                
                if (actionsList[i].pName == name) {
                    actionsList[i].pName = newName;
                    isChange = true;
                }
            }   
            if (typeAction == EDIT_ELEMENT_POPUP && actionsList[i].getType() == ACTIONS_SHOW_TPOPUP) {                                
                if (actionsList[i].name == name) {
                    actionsList[i].name = newName;
                    isChange = true;
                }
            }                         
            if (typeAction == EDIT_ELEMENT_CLICKABLE_AREA && (actionsList[i].getType() == ACTIONS_SHOW_ELEMENT || actionsList[i].getType() == ACTIONS_HIDE_ELEMENT)) {                                
                if (actionsList[i].name == name) {
                    actionsList[i].name = newName;
                    isChange = true;
                }
            }             
            
            // delete section
            if (typeAction == DELETED_ELEMENT_IMAGE && actionsList[i].getType() == ACTIONS_SHOW_IMAGE) {                                
                if (actionsList[i].pImage == name || !actionsList[i].pImage) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            }
            if (typeAction == DELETED_ELEMENT_SOUND && actionsList[i].getType() == ACTIONS_PLAY_MP3) {                                
                if (actionsList[i].name == name || !actionsList[i].name) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            }            
            if (typeAction == DELETED_ELEMENT_ITEM && (actionsList[i].getType() == ACTIONS_TAKE_ITEM || actionsList[i].getType() == ACTIONS_DROP_ITEM)) {                                
                if (actionsList[i].pItemName == name || !actionsList[i].pItemName) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            }         
            if (typeAction == DELETED_ELEMENT_CONVERSATION && actionsList[i].getType() == ACTIONS_INITIATE_CONVERSATION) {                                
                if (actionsList[i].pName == name || !actionsList[i].pName) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            }   
            if (typeAction == DELETED_ELEMENT_POPUP && actionsList[i].getType() == ACTIONS_SHOW_TPOPUP) {                                
                if (actionsList[i].name == name || !actionsList[i].name) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            } 
            if (typeAction == DELETED_ELEMENT_CLICKABLE_AREA && (actionsList[i].getType() == ACTIONS_SHOW_ELEMENT || actionsList[i].getType() == ACTIONS_HIDE_ELEMENT)) {                                
                if (actionsList[i].name == name || !actionsList[i].name) {
                    actionsList[i].parent.removeChild(actionsList[i]);
                    isChange = true;
                }
            }              
        }
        if (isChange) {
            var json = JSON.stringify(dataRoot.getObject());
            return json;
        } else {
            return undefined
        }
    } 
}

function arrayObjectsFromArrayAction(array) {
    var arrayObjects = new Array();
    for(var i=0; i < array.length; i++) {
		var object = array[i].getObject();
		//console.log(object.type);
		if (object.type == ACTIONS_SHOW_TPOPUP) {
			if (object.name) {
				//console.log(">> ACTIONS_SHOW_TPOPUP");
				arrayObjects.push(object);
			}			
		} else {
			arrayObjects.push(object);
		}
    }
    return arrayObjects;
}

/*function searchActionWithUniqueId(rootAction,uniqId) {
    var result = undefined;
    if (rootAction.uniqueId == uniqId) {
        result = rootAction;
        console.log(rootAction.uniqueId)
    } else {
        for(var i=0; i < rootAction.getChildren().length; i++) {
            var child = rootAction.getChildren()[i];
            console.log(child.uniqueId);
            result = searchActionWithUniqueId(child,uniqId);
            if (result && result.uniqueId == uniqId) {                    
                break;
            }
        } 
    }
    return result;
}*/

function ActionFactory(typeAction,parent) {
    switch(typeAction) {
        
        case ACTIONS_ROOT:
            return new RootAction();
        case ACTIONS_ONCLICK: 
            return new OnClickAction(parent);
        case ACTIONS_ONDROP: 
            return new OnDropAction(parent);
        case ACTIONS_SHOW_ELEMENT: 
            return new ShowElementAction(parent);
        case ACTIONS_HIDE_ELEMENT: 
            return new HideElementAction(parent);
        case ACTIONS_RUN_XML:
            return new RunXmlAction(parent);        
        case ACTIONS_GO_BACK: 
            return new GoBackAction(parent);
        case ACTIONS_PLAY_MP3: 
            return new PlayMp3Action(parent);
        case ACTIONS_STOP_MP3: 
            return new StopMp3Action(parent);
        case ACTIONS_SHOW_IMAGE: 
            return new ShowImageAction(parent);
        case ACTIONS_SHOW_TPOPUP: 
            return new ShowTPopupAction(parent);
        case ACTIONS_ITEM_SHOW_TPOPUP: 
            return new ItemShowTPopupAction(parent);
        case ACTIONS_SHOW_POPOVER: 
            return new ShowPopoverAction(parent);
        case ACTIONS_ITEM_SHOW_POPOVER: 
            return new ItemShowPopoverAction(parent);
        case ACTIONS_SHOW_GALLERY: 
            return new ShowGalleryAction(parent);
        case ACTIONS_ITEM_SHOW_GALLERY: 
            return new ImageShowGalleryAction(parent);
        case ACTIONS_INITIATE_CONVERSATION: 
            return new InitiateConversationAction(parent);
        case ACTIONS_TAKE_ITEM: 
            return new TakeItemAction(parent);
        case ACTIONS_DROP_ITEM: 
            return new DropItemAction(parent);
        default: 
            return undefined;
    }
}

function actionList() {
    var array = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,
                          ACTIONS_GO_BACK,ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3, ACTIONS_SHOW_IMAGE,
                          ACTIONS_SHOW_TPOPUP,ACTIONS_ITEM_SHOW_TPOPUP,
                          ACTIONS_SHOW_POPOVER,ACTIONS_ITEM_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,ACTIONS_ITEM_SHOW_GALLERY,
                          ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM, ACTIONS_DROP_ITEM);
    return array;
}

function actionList() {
    var array = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,
                          ACTIONS_GO_BACK,ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3, ACTIONS_SHOW_IMAGE,
                          ACTIONS_SHOW_TPOPUP,ACTIONS_ITEM_SHOW_TPOPUP,
                          ACTIONS_SHOW_POPOVER,ACTIONS_ITEM_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,ACTIONS_ITEM_SHOW_GALLERY,
                          ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM, ACTIONS_DROP_ITEM);
    return array;
}



// action root 
function RootAction() {  
    this.parent = undefined;
    this.type = ACTIONS_ROOT;
    this.stringName = "Root";
    this.allowHasChildren = true;
    this.children = new Array();
    
    this.getObject = function() {
        var obj={
            //type : this.type,
            actions : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }                                    
}
RootAction.prototype = Object.create(BaseAction.prototype);

function OnClickAction(_parent) {  
    this.parent = _parent;
    this.type = ACTIONS_ONCLICK;
    this.stringName = "Onclick";
    this.allowHasChildren = true;
    this.children = new Array();
    
    this.getObject = function() {
        var obj={
            type : this.type,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }    
    this.displayActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
        ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
        ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);
    this.clickableActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
        ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
        ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);   
    this.enabledActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
        ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
        ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);                                 
}
OnClickAction.prototype = Object.create(BaseAction.prototype);

function OnDropAction(_parent) {  
    this.parent = _parent;
    this.type = ACTIONS_ONDROP;
    this.stringName = "Ondrop";
    this.allowHasChildren = true;
    this.children = new Array();
    
    this.getObject = function() {
        var obj={
            type : this.type,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }
    this.displayActions = new Array(ACTIONS_DROP_ITEM);
    this.clickableActions = new Array(ACTIONS_DROP_ITEM);   
    this.enabledActions = new Array(ACTIONS_DROP_ITEM);           
}
OnDropAction.prototype = Object.create(BaseAction.prototype);

function ShowElementAction(_parent) {
    var that = this;
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_SHOW_ELEMENT;      
    this.stringName = "Show object";
    this.name = "";//firstElementOfArray(canvas.getElementsListOfName());
    this.key = "";
    this.params = new Array(this.name); 
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.name,
            key : this.key
        }
        return obj;
    }  
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];      
        var params = new Array();
        params[0] = new Property(ActionParams.SHOW_ELEMENT_NAME, "select", "Name: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(canvas.getElementsListOfName()));              
        params[1] = new Property(ActionParams.SHOW_ELEMENT_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.name);     
        params[1].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params); 
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.SHOW_ELEMENT_NAME) {
            that.name = value;
        } else if (propertyObj.id == ActionParams.SHOW_ELEMENT_NAME+"_key") {
            that.key = value;
        } 
        that.container.refreshWithCallback(that);
    }       
    this.getInfo = function() { 
        return "(name = \""+this.name+"\", key = \""+this.key+"\")";
    }    
}
ShowElementAction.prototype = Object.create(BaseAction.prototype);

function HideElementAction(_parent) {
    var that = this;
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_HIDE_ELEMENT;
    this.stringName = "Hide object";
    this.name = "";//firstElementOfArray(canvas.getElementsListOfName());
    this.key = "";
    this.params = new Array(this.name);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.name,
            key  : this.key
        }
        return obj;
    }  
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];      
        var params = new Array();
        params[0] = new Property(ActionParams.HIDE_ELEMENT_NAME, "select", "Name: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(canvas.getElementsListOfName()));              
        params[1] = new Property(ActionParams.HIDE_ELEMENT_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.name);     
        params[1].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);         
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.HIDE_ELEMENT_NAME) {
            that.name = value;
        } else if (propertyObj.id == ActionParams.HIDE_ELEMENT_NAME+"_key") {
            that.key = value;
        } 
        that.container.refreshWithCallback(that);
    }       
    this.getInfo = function() { 
        return "(name = \""+this.name+"\", key = \""+this.key+"\")";
    }    
}
HideElementAction.prototype = Object.create(BaseAction.prototype);
        
function RunXmlAction(_parent) {
    var that = this;
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_RUN_XML;
    this.stringName = "Go to board";
    this.animated = 0;
    var listScreens = application.getScreenListByParam("name");
    this.name = "";//firstElementOfArray(listScreens);
    this.key = "";
    this.params = new Array(this.name);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.name,
            animated : this.animated,
            key : this.key
        }
        return obj;
    }
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];      
        var params = new Array();
        params[0] = new Property(ActionParams.RUN_BOARD_NAME, "select", "Board name: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(listScreens));              
        params[1] = new Property(ActionParams.RUN_BOARD_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.name);     
        params[1].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);          
    }    
    this.callbackParams = function(propertyObj,value) {
        console.log(propertyObj);
        if (propertyObj.id == ActionParams.RUN_BOARD_NAME) {
            that.name = value;
        } else if (propertyObj.id == ActionParams.RUN_BOARD_NAME+"_key") {
            that.key = value;
        }
        that.container.refreshWithCallback(that);        
    }
    /*this.getTreeName = function() {
        return this.stringName+" "+this.name;
    } */       
    this.getInfo = function() { 
        return "(name = \""+this.name+"\", key = "+this.key+")";
    } 
}        
RunXmlAction.prototype = Object.create(BaseAction.prototype);
                
/*function GoBackAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_GO_BACK;
    this.stringName = "Go back";

    this.getObject = function() {
        var obj={
            type : this.getType()
        }
        return obj;
    }
}            
GoBackAction.prototype = Object.create(BaseAction.prototype);       
*/    
    
       
function PlayMp3Action(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_PLAY_MP3;
    this.stringName = "Play mp3";
    this.loop = 0;
    this.name = "";//firstElementOfArray(application.soundsList);
    this.key = "";
    this.params = new Array(this.name);

    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.name,
            key  : this.key,
            loop : this.loop
        }
        return obj;
    }
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];      
        var params = new Array();
        params[0] = new Property(ActionParams.PLAY_SOUND_NAME, "select", "Sound name: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(application.soundsList));
        params[0].showButtonDialog = true;
        params[0].callbackButtonDialog = function(property) { 
            resourcesUpload[1].setFocusedElement(that.name);
            openResourcesDialog(RESOURCES_TYPE_SOUNDS);
            resourcesUpload[1].setButtonAndCallback("Set this sound", function() { 
                that.callbackParams(property, resourcesUpload[1].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });           
        };                         
        params[1] = new Property(ActionParams.PLAY_SOUND_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.name);     
        params[1].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);         
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.PLAY_SOUND_NAME) {
            that.name = value;
        } else if (propertyObj.id == ActionParams.PLAY_SOUND_NAME+"_key") {
            that.key = value;
        } 
        that.container.refreshWithCallback(that);        
    }        
    this.getInfo = function() { 
        return "(name = \""+this.name+"\", key = \""+this.key+"\")";
    } 
} 
PlayMp3Action.prototype = Object.create(BaseAction.prototype);    


function StopMp3Action(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_STOP_MP3;
    this.key = "";
    this.stringName = "Stop mp3";

    this.getObject = function() {
        var obj={
            type : this.getType(),
            key  : this.key
        }
        return obj;
    }
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];      
        var params = new Array();                    
        params[0] = new Property(ActionParams.ACTIONS_STOP_MP3+"_key", "select", "Key: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);         
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.ACTIONS_STOP_MP3+"_key") {
            that.name = value;
        } 
        that.container.refreshWithCallback(that);        
    }        
    this.getInfo = function() { 
        return "(name = \""+this.name+"\", key = \""+this.key+"\")";
    }     
}           
StopMp3Action.prototype = Object.create(BaseAction.prototype); 
       
function ShowImageAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_SHOW_IMAGE;
    this.stringName = "Show image";
    this.pImage= ""; //firstElementOfArray(application.imagesList);
    this.key = "";
    this.params = new Array(this.pImage);
    
    this.getObject = function() {
        var obj={
            type  : this.getType(),
            image : this.pImage,
            key   : this.key
        }
        return obj;
    }                
    
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];    
        var params = new Array();
        params[0] = new Property(ActionParams.SHOW_IMAGE_NAME, "select", "Image: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(application.imagesList));              
        params[0].showButtonDialog = true;
        params[0].callbackButtonDialog = function(property) { 
            resourcesUpload[0].setFocusedElement(that.pImage);
            openResourcesDialog(RESOURCES_TYPE_IMAGES);
            resourcesUpload[0].setButtonAndCallback("Set this image", function() { 
                that.callbackParams(property, resourcesUpload[0].getFocusedElement().val());
                $( "#dialog_resources" ).dialog( "close" ); 
            });           
        };        
        params[1] = new Property(ActionParams.SHOW_IMAGE_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));               
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.pImage);     
        params[1].setValue(this.key);     
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.SHOW_IMAGE_NAME) {
            that.pImage = value;
        } else if (propertyObj.id == ActionParams.SHOW_IMAGE_NAME+"_key") {
            that.key = value;
        } 
        that.container.refreshWithCallback(that);        
    }                
    this.getInfo = function() { 
        this.setKeyValueInfo("image",'"'+this.pImage+'"');          
        this.setKeyValueInfo("key",'"'+this.key+'"');          
        return this.getInfoString();        
    }
}   
ShowImageAction.prototype = Object.create(BaseAction.prototype); 
    
function ShowTPopupAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_SHOW_TPOPUP;
    this.stringName = "Show popup";
    this.name = "";//firstElementOfArray(popupsContainer.popupsListName());
    this.key = "";
	this.idPopup = 0;
	this.params = new Array(this.name);
	
	// display
    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.name,
            key  : this.key
            //id : popupsContainer.popupNameForId(value), 
			// id popupu.  Ustawiamy na popup.  Gdy brak jego, id zostaje, ale nie jest on skojarzony z zadna nazwa, wtedy nie wysylamy.
        }	
        return obj;
    }     
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];
        // configuration      
        var params = new Array();
        params[0] = new Property(ActionParams.SHOW_POPUP_NAME, "select", "Popup: ","");
        params[0].setClassName(this.propertyLiClass);                                                          
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(popupsContainer.popupsListName()));
        params[0].showButtonDialog = true;
        params[0].callbackButtonDialog = function(property) { 
			popupsContainer.setFocusForName(that.name);
            popupsContainer.showDialog();
			popupsContainer.setCallbackButtonOK(function(){
				that.callbackParams(params[0], popupsContainer.getFocus());				
			});       
        };  		
        params[1] = new Property(ActionParams.SHOW_POPUP_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters())); 
        // display        
        this.displayParams(params, parentParams);         
        // set value
        params[0].setValue(this.name);         
        params[1].setValue(this.key);         
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params); 
    }
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.SHOW_POPUP_NAME) {
            that.name = value;
			that.idPopup = popupsContainer.popupIdForName(value);	
        } else if (propertyObj.id == ActionParams.SHOW_POPUP_NAME+"_key") {
            that.key = value;
        } 
        that.container.refreshWithCallback(that);        
    }               
    this.getInfo = function() { 
        this.setKeyValueInfo("name",'"'+this.name+'"');          
        this.setKeyValueInfo("key",'"'+this.key+'"');          
        return this.getInfoString();           
    }
}
ShowTPopupAction.prototype = Object.create(BaseAction.prototype); 

function ItemShowTPopupAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_ITEM_SHOW_TPOPUP;
    this.stringName = "Button";
    this.title = "";
    this.allowHasChildren = true;
    this.children = new Array();
    this.params = new Array(this.title);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            title : this.title,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }               
    this.displayActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);
    this.clickableActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);   
    this.enabledActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);                 
    this.setParams = function(parentIdParameters) {
        
var parentParams = $("#"+parentIdParameters)[0];
        // configuration      
        var params = new Array();
        params[0] = new Property(ActionParams.ITEM_SHOW_POPUP_TITLE, "text", "Title: ");
        params[0].setClassName(this.propertyLiClass);      
        // display        
        this.displayParams(params, parentParams);         
        // set value
        params[0].setValue(this.title);         
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);         
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.ITEM_SHOW_POPUP_TITLE) {
            that.title = value;
        } 
        that.container.refreshWithCallback(that);        
    }               
    /*this.getTreeName = function() {
        return this.stringName+" "+this.title;
    } */        
    this.getInfo = function() { 
        this.setKeyValueInfo("title",'"'+this.title+'"');          
        return this.getInfoString();          
    }
}   
ItemShowTPopupAction.prototype = Object.create(BaseAction.prototype);     
       
function ShowPopoverAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_SHOW_POPOVER;
    this.stringName = "Show popover";
    this.width = 200;
    this.height = 400;
    this.x_pos = "";
    this.y_pos = "";
    this.allowHasChildren = true;
    this.children = new Array();
    this.params = new Array(this.width,this.height,this.x_pos,this.y_pos);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            width : this.width,
            height : this.height,
            x_pos : this.x_pos,
            y_pos : this.y_pos,
            items : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }     
    this.displayActions = new Array(ACTIONS_ITEM_SHOW_POPOVER);
    this.clickableActions = new Array(ACTIONS_ITEM_SHOW_POPOVER);   
    this.enabledActions = new Array(ACTIONS_ITEM_SHOW_POPOVER);    
    this.setParams = function(parentIdParameters) {
        // x_pos property        
        var propertyXPos = new Property("a_pos_x", "text", "Pos X: ");
        propertyXPos.setClassName(this.propertyLiClass);
        propertyXPos.setNumeric(true,false);                
        propertyXPos.callbackChangeValue = this.callbackParams;
        // y_pos property        
        var propertyYPos = new Property("a_pos_y", "text", "Pos Y: ");
        propertyYPos.setClassName(this.propertyLiClass);   
        propertyYPos.setNumeric(true,false);              
        propertyYPos.callbackChangeValue = this.callbackParams;
        // width property        
        var propertyWidth = new Property("a_width", "text", "Width: ");
        propertyWidth.setClassName(this.propertyLiClass);
        propertyWidth.setNumeric(true,false);                
        propertyWidth.callbackChangeValue = this.callbackParams;
        // height property        
        var propertyHeight = new Property("a_height", "text", "Height: ");
        propertyHeight.setClassName(this.propertyLiClass);   
        propertyHeight.setNumeric(true,false);              
        propertyHeight.callbackChangeValue = this.callbackParams;
        // parent
        var parentParams = $("#"+parentIdParameters)[0];
        parentParams.innerHTML = "<br />";
        parentParams.appendChild(propertyXPos.getElement());
        parentParams.appendChild(propertyYPos.getElement());
        parentParams.appendChild(propertyWidth.getElement());
        parentParams.appendChild(propertyHeight.getElement());
        // set events
        propertyXPos.setValue(this.x_pos);  
        propertyYPos.setValue(this.y_pos);  
        propertyWidth.setValue(this.width);  
        propertyHeight.setValue(this.height);  
        propertyXPos.refreshActions();
        propertyYPos.refreshActions();
        propertyWidth.refreshActions();
        propertyHeight.refreshActions();
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_pos_x") {
            that.x_pos = value;
        } else if (propertyObj.id == "a_pos_y") {
            that.y_pos = value;
        } else if (propertyObj.id == "a_width") {
            that.width = value;
        } else if (propertyObj.id == "a_height") {
            that.height = value;
        }
        that.container.refreshWithCallback(that);        
    }            
    this.getInfo = function() { 
        return "(x_pos = "+this.x_pos+",y_pos = "+this.y_pos+",width = "+this.width+",height = "+this.height+")";
    }
}
ShowPopoverAction.prototype = Object.create(BaseAction.prototype); 

function ItemShowPopoverAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_ITEM_SHOW_POPOVER;
    this.stringName = "Item popover";
    this.title = "";
    this.subtitle = "";
    this.image = firstElementOfArray(application.imagesList);
    this.allowHasChildren = true;
    this.children = new Array();
    this.params = new Array(this.title,this.subtitle,this.image);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            title : this.title,
            subtitle : this.subtitle,
            image : this.image,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }               
    this.displayActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);
    this.clickableActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);   
    this.enabledActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION, ACTIONS_TAKE_ITEM);                 
    this.setParams = function(parentIdParameters) {
        // title property        
        var propertyTitle = new Property("a_title", "text", "Title: ");
        propertyTitle.setClassName(this.propertyLiClass);
        propertyTitle.callbackChangeValue = this.callbackParams;
        // subtitle property        
        var propertySubtitle = new Property("a_subtitle", "text", "Subtitle: ");
        propertySubtitle.setClassName(this.propertyLiClass);   
        propertySubtitle.callbackChangeValue = this.callbackParams;
        // width property   
        var propertyImage = new Property("a_image", "select", "Image: ",'<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_IMAGES)" />');
        propertyImage.setClassName(this.propertyLiClass);
        propertyImage.styleRight = "width:120px;";                 
        propertyImage.setOptionOfSelect(application.imagesList);
        propertyImage.callbackChangeValue = this.callbackParams;
        // parent
        var parentParams = $("#"+parentIdParameters)[0];
        parentParams.innerHTML = "<br />";
        parentParams.appendChild(propertyTitle.getElement());
        parentParams.appendChild(propertySubtitle.getElement());
        parentParams.appendChild(propertyImage.getElement());
        // set events
        propertyTitle.setValue(this.title);  
        propertySubtitle.setValue(this.subtitle);  
        propertyImage.setValue(this.image); 
        propertyTitle.refreshActions();
        propertySubtitle.refreshActions();
        propertyImage.refreshActions();
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_title") {
            that.title = value;
        } else if (propertyObj.id == "a_subtitle") {
            that.subtitle = value;
        } else if (propertyObj.id == "a_image") {
            that.image = value;
        } 
        that.container.refreshWithCallback(that);        
    }                
    this.getInfo = function() { 
        return "(title = \""+this.title+"\", subtitle = \""+this.subtitle+"\", image = \""+this.image+"\")";
    }
}   
ItemShowPopoverAction.prototype = Object.create(BaseAction.prototype); 

function ShowGalleryAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_SHOW_GALLERY;
    this.stringName = "Show gallery";
    this.startup = 1;
    this.thumbnails_mode = 2;
    this.startup_image = 0;
    this.allowHasChildren = true;
    this.children = new Array();
    this.params = new Array(this.startup,this.thumbnails_mode,this.startup_image);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            startup : this.startup,
            thumbnails_mode : this.thumbnails_mode,
            startup_image : this.startup_image,
            images : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }       
    this.displayActions = new Array(ACTIONS_SHOW_GALLERY, ACTIONS_ITEM_SHOW_GALLERY);
    this.clickableActions = new Array(ACTIONS_ITEM_SHOW_GALLERY);   
    this.enabledActions = new Array(ACTIONS_SHOW_GALLERY, ACTIONS_ITEM_SHOW_GALLERY);    
    this.setParams = function(parentIdParameters) {
        // startup property        
        var propertyStartup = new Property("a_startup", "select", "Startup: ");
        propertyStartup.setClassName(this.propertyLiClass);
        propertyStartup.styleRight = "width:144px;";                 
        var startupList = new Array(1,2);               
        propertyStartup.setOptionOfSelect(startupList);  
        propertyStartup.callbackChangeValue = this.callbackParams;
        // thumbnails_mode property        
        var propertyThumbnailsMode = new Property("a_thumbnails_mode", "select", "Thumbnails mode: ");
        propertyThumbnailsMode.setClassName(this.propertyLiClass);
        propertyThumbnailsMode.styleRight = "width:144px;";                 
        var thumbnailsList = new Array(1,2);               
        propertyThumbnailsMode.setOptionOfSelect(thumbnailsList);  
        propertyThumbnailsMode.callbackChangeValue = this.callbackParams;
        // startup_image property        
        var propertyStartupImage = new Property("a_startup_image", "select", "Startup image: ");
        propertyStartupImage.setClassName(this.propertyLiClass);
        propertyStartupImage.styleRight = "width:144px;";                 
        var startupImageList = new Array();
        for(var i=0; i < this.children.length; i++) {
            startupImageList.push(i+1);
        }
        propertyStartupImage.setOptionOfSelect(startupImageList);  
        propertyStartupImage.callbackChangeValue = this.callbackParams;        
        // parent
        var parentParams = $("#"+parentIdParameters)[0];
        parentParams.innerHTML = "<br />";
        parentParams.appendChild(propertyStartup.getElement());
        parentParams.appendChild(propertyThumbnailsMode.getElement());
        parentParams.appendChild(propertyStartupImage.getElement());
        // set events
        propertyStartup.setValue(this.startup);  
        propertyThumbnailsMode.setValue(this.thumbnails_mode);  
        propertyStartupImage.setValue(this.startup_image);  
        propertyStartup.refreshActions();
        propertyThumbnailsMode.refreshActions();
        propertyStartupImage.refreshActions();
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_startup") {
            console.log(propertyObj.optionsChangeValue);
            that.startup = value;
        } else if (propertyObj.id == "a_thumbnails_mode") {
            that.thumbnails_mode = value;
            console.log(propertyObj.optionsChangeValue);
        } else if (propertyObj.id == "a_startup_image") {
            that.startup_image = value;
        } 
        that.container.refreshWithCallback(that);        
    }                
    this.getInfo = function() { 
        return "(startup = "+this.startup+", thumbnails_mode = "+this.thumbnails_mode+", startup_image = "+this.startup_image+")";
    }
}
ShowGalleryAction.prototype = Object.create(BaseAction.prototype); 

function ImageShowGalleryAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_ITEM_SHOW_GALLERY;
    this.stringName = "Item gallery";
    this.thumbnail = firstElementOfArray(application.imagesList);
    this.params = new Array(this.thumbnail);

    this.getObject = function() {
        var obj={
            type : this.getType(),
            thumbnail : this.thumbnail
        }
        return obj;
    }       
    this.setParams = function(parentIdParameters) {
        // thumbnail property        
        var propertyThumbnail = new Property("a_thumbnail", "select", "Thumbnail: ",'<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_IMAGES)" />');
        propertyThumbnail.setClassName(this.propertyLiClass);
        propertyThumbnail.styleRight = "width:120px;";                               
        propertyThumbnail.setOptionOfSelect(application.imagesList);  
        propertyThumbnail.callbackChangeValue = this.callbackParams;      
        // parent
        var parentParams = $("#"+parentIdParameters)[0];
        parentParams.innerHTML = "<br />";
        parentParams.appendChild(propertyThumbnail.getElement());
        // set events
        propertyThumbnail.setValue(this.startup);  
        propertyThumbnail.refreshActions();
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_thumbnail") {
            that.thumbnail = value;
        } 
        that.container.refreshWithCallback(that);        
    }    
    /*this.getTreeName = function() {
        return this.stringName+" "+this.thumbnail;
    } */                 
    this.getInfo = function() { 
        return "("+this.thumbnail+")";
    }
}   
ImageShowGalleryAction.prototype = Object.create(BaseAction.prototype); 

function InitiateConversationAction(_parent) {
    var that = this;
    this.parent = _parent;
    this.arrayInfo = new Array();
    this.type = ACTIONS_INITIATE_CONVERSATION;      
    this.stringName = "Initiate conversation";  
    this.allowHasChildren = true;
    this.children = new Array();
    this.pName = "";//firstElementOfArray(conversationsContainer.conversationsListName());
    this.key = "";  
    this.params = new Array(this.name); 
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            name : this.pName,
            key  : this.key,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }  
   
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];
        // configuration      
        var params = new Array();
        params[0] = new Property(ActionParams.INITIATE_CONVERSATION_NAME, "select", "Conversation: ","");
        params[0].setClassName(this.propertyLiClass);       
        params[0].setOptionOfSelect(arrayWithFirstEmptyElement(conversationsContainer.conversationsListName()));
        params[0].showButtonDialog = true;
        params[0].callbackButtonDialog = function(property) { 
			conversationsContainer.setFocusForName(that.pName);
            conversationsContainer.showDialog();
			conversationsContainer.setCallbackButtonOK(function(){
				that.callbackParams(params[0], conversationsContainer.getFocus());				
			});       
        };  		
        params[1] = new Property(ActionParams.INITIATE_CONVERSATION_NAME+"_key", "select", "Key: ", "");
        params[1].setClassName(this.propertyLiClass);
        params[1].setOptionOfSelect(arrayWithFirstEmptyElement(listOfKeyboardLetters()));         
        // display
        this.displayParams(params, parentParams);   
        var preview = conversationsContainer.getPreviewForName(this.pName);
        if (preview) {
            $("#"+parentIdParameters).append('<p style="color:white;">Preview:<p/>');
            $("#"+parentIdParameters).append(specialCharsToHtml(preview));
        }   
        params[0].setValue(this.pName);                      
        params[1].setValue(this.key);                      
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);        
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == ActionParams.INITIATE_CONVERSATION_NAME) {
            that.pName = value;           
        } else if (propertyObj.id == ActionParams.INITIATE_CONVERSATION_NAME+"_key") {
            that.pName = value;           
        }
        that.container.refreshWithCallback(that);
    }
    /*this.getTreeName = function() {
        return this.stringName+" "+this.pName;
    } */       
    this.getInfo = function() {
        this.setKeyValueInfo("name",'"'+this.pName+'"');          
        this.setKeyValueInfo("key",'"'+this.key+'"');          
        return this.getInfoString();
    }
}
InitiateConversationAction.prototype = Object.create(BaseAction.prototype);

function TakeItemAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_TAKE_ITEM;
    this.stringName = "Take item";
    this.pItemName = firstElementOfArray(itemsContainer.itemsListName());
    this.pDisappearAfterTaking = 0;
    this.params = new Array(this.pItemName,this.pDisappearAfterTaking);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            item_name : this.pItemName,
            disappear_after_taking : this.pDisappearAfterTaking,
        }
        return obj;
    }                                 
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];
        // configuration      
        var params = new Array();
        params[0] = new Property("a_item_name", "select", "Item name: ", "");
        params[0].setClassName(this.propertyLiClass);
        params[0].setOptionOfSelect(itemsContainer.itemsListName());
        params[0].showButtonDialog = true;
        params[0].callbackButtonDialog = function(property) { 
			itemsContainer.setFocusForName(that.pItemName);
            itemsContainer.showDialog();
			itemsContainer.setCallbackButtonOK(function(){
				console.log(itemsContainer.getFocus());
				that.callbackParams(params[0], itemsContainer.getFocus());				
			});       
        };                       
        params[1] = new Property("a_disappear_after_taking", "checkbox", "Disappear after taking: ");
        params[1].setClassName(this.propertyLiClass);
        params[1].setTemplate(380,160);  
        params[1].callbackChangeValue = this.callbackParams;
             
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.pItemName);              
        params[1].setCheckbox(this.pDisappearAfterTaking);
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_item_name") {
            that.pItemName = value;
        } else if (propertyObj.id == "a_disappear_after_taking") {
            that.pDisappearAfterTaking = propertyObj.getChecked("a_disappear_after_taking");        
        }
        that.container.refreshWithCallback(that);        
    }       
    /*this.getTreeName = function() {
        return this.stringName+" "+this.pItemName;
    } */   
    this.getInfo = function() { 
        this.setKeyValueInfo("name",'"'+this.pItemName+'"');          
        this.setKeyValueInfo("disappear after taking",'"'+this.pDisappearAfterTaking+'"');          
        return this.getInfoString();        
    }
}   
TakeItemAction.prototype = Object.create(BaseAction.prototype); 

function DropItemAction(_parent) {
    var that = this;    
    this.parent = _parent;
	this.arrayInfo = new Array();
    this.type = ACTIONS_DROP_ITEM;
    this.stringName = "Drop item";    
    this.allowHasChildren = true;
    this.children = new Array();
    this.pItemName = firstElementOfArray(itemsContainer.itemsListName());
    this.pLeaveAfterDrop = 0;
    this.params = new Array(this.pItemName);
    
    this.getObject = function() {
        var obj={
            type : this.getType(),
            item_name : this.pItemName,
            leave_after_drop : this.pLeaveAfterDrop,
            events : arrayObjectsFromArrayAction(this.getChildren())
        }
        return obj;
    }                  
    this.displayActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION);
    this.clickableActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION);   
    this.enabledActions = new Array(ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML,ACTIONS_GO_BACK,
                         ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,ACTIONS_SHOW_TPOPUP,ACTIONS_SHOW_POPOVER,ACTIONS_SHOW_GALLERY,
                         ACTIONS_INITIATE_CONVERSATION);                  
    this.setParams = function(parentIdParameters) {
        var parentParams = $("#"+parentIdParameters)[0];
        // configuration      
        var params = new Array();
        params[0] = new Property("a_item_name", "select", "Item name ");
        params[0].setClassName(this.propertyLiClass);
        //params[0].inputClass = "select_styled3"; 
        params[0].setOptionOfSelect(itemsContainer.itemsListName());       
        params[1] = new Property("a_leave_after_drop", "checkbox", "Leave item after drop ");
        params[1].setClassName(this.propertyLiClass)   
        params[1].setTemplate(280,160);             
        params[1].callbackChangeValue = this.callbackParams;              
        // display
        this.displayParams(params, parentParams);      
        params[0].setValue(this.pItemName);    
        params[1].setCheckbox(this.pLeaveAfterDrop);  
                          
        // set events
        this.setParamsCallback(params);
        this.refreshParamsActions(params);
    }    
    this.callbackParams = function(propertyObj,value) {
        if (propertyObj.id == "a_item_name") {
            that.pItemName = value;
        } else if (propertyObj.id == "a_leave_after_drop") {
            that.pLeaveAfterDrop = propertyObj.getChecked();
        } 
        that.container.refreshWithCallback(that);        
    }                
    /*this.getTreeName = function() {
        return this.stringName+" "+this.pItemName;
    } */    
    this.getInfo = function() { 
        this.setKeyValueInfo("name",'"'+this.pItemName+'"');          
        this.setKeyValueInfo("leave after drop",'"'+this.pLeaveAfterDrop+'"');          
        return this.getInfoString();        
    }
}   
DropItemAction.prototype = Object.create(BaseAction.prototype); 

function BaseAction() {
}
BaseAction.prototype.uniqueId = 0;
BaseAction.prototype.container = undefined;
BaseAction.prototype.parent = undefined;
BaseAction.prototype.stringName = "Base Action";
BaseAction.prototype.propertyLiClass = "menu_property";
BaseAction.prototype.params = new Array();
BaseAction.prototype.children = new Array();
BaseAction.prototype.allowHasChildren = false;
BaseAction.prototype.arrayInfo = new Array();
BaseAction.prototype.getStringName = function() {
    return this.stringName;
}
BaseAction.prototype.getTreeName = function() {
    return this.stringName;
}
BaseAction.prototype.getObject = function() {
    var obj= undefined;
    return obj;
}
BaseAction.prototype.getType = function() { 
    return this.type; 
}
BaseAction.prototype.canHasChildren = function() {
    return this.allowHasChildren;
}
BaseAction.prototype.getChildren = function() {
    return this.children;
}
BaseAction.prototype.setKeyValueInfo = function(key, value) { 
    var isKey = false;
    for(var i=0; i < this.arrayInfo.length; i++) {
        if (this.arrayInfo[i].key == key) {
            isKey = true;
            this.arrayInfo[i].value = value;
        }
    }    
    if (!isKey) {
        var keyVal = new Object();
        keyVal.key = key;
        keyVal.value = value;
        this.arrayInfo.push(keyVal);
    }
}
BaseAction.prototype.getInfoString = function() { 
    if (!this.arrayInfo || this.arrayInfo.length == 0) {
        return "";
    }
    var result = "(";
    for(var i=0; i < this.arrayInfo.length; i++) {
        if (i>0) {
           result += ", "; 
        }
        var keyVal = this.arrayInfo[i];
        result += keyVal.key+" = "+keyVal.value;
    }
    result += ")";
    return result;
}
BaseAction.prototype.getInfo = function() {
    return "";
}
BaseAction.prototype.setParams = function(parentIdParameters,containr) {        
}
BaseAction.prototype.displayParams = function(paramsArray, parent) {
    if (!parent) {
        return;
    }    
    parent.innerHTML = "<br />";
    for(var i=0; i < paramsArray.length; i++) {
        var param = paramsArray[i];
        parent.appendChild(param.getElement());          
    }    
}  
BaseAction.prototype.setParamsCallback = function(paramsArray) {    
    for(var i=0; i < paramsArray.length; i++) {
        var param = paramsArray[i];
        param.callbackChangeValue = this.callbackParams;
    }    
}  
BaseAction.prototype.refreshParamsActions = function(paramsArray) {    
    for(var i=0; i < paramsArray.length; i++) {
        paramsArray[i].refreshActions();
    }    
}  
BaseAction.prototype.callbackParams = function(propertyObj,value) {    
}
BaseAction.prototype.addChild = function(childNode) {
    if (this.canHasChildren()) {
        this.children.push(childNode);
    }
}   
BaseAction.prototype.removeChild = function(childNode) {
    if (this.canHasChildren()) {
        var index = this.children.indexOf(childNode);
        this.children.splice(index,1);
    }
} 
BaseAction.prototype.displayActions = new Array();  // visible/hidden action
BaseAction.prototype.clickableActions = new Array();// set actions available to choose
BaseAction.prototype.enabledActions = new Array(); // enabled/disable action
 
////////////////////
// Color

function Color() {

    // rgb(rrr,ggg,bbb) ->  #rrggbb
    this.qRgbToHex = function(qRgb) {
        qRgb = qRgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
        function hex(x) {
            return ("0" + parseInt(x).toString(16)).slice(-2);
        }

        return "#" + hex(qRgb[1]) + hex(qRgb[2]) + hex(qRgb[3]);
    }
    // rrr,ggg,bbb ->  #rrggbb
    this.myRgbToHex = function(rgb) {
        return this.qRgbToHex("rgb(" + rgb + ")");
    }
    // #rrggbb ->  rrr,ggg,bbb
    this.hexToMyRgb = function(hex, isSplit) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function(m, r, g, b) {
            return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        if(isSplit) {
            return result ? {
                r : parseInt(result[1], 16),
                g : parseInt(result[2], 16),
                b : parseInt(result[3], 16)
            } : null;
        } else {
            return parseInt(result[1], 16) + "," + parseInt(result[2], 16) + "," + parseInt(result[3], 16);
        }
    }

    this.hexToQRgb = function(hex) {
        var myRgb = this.hexToMyRgb(hex);
        return this.myRgbToHex(myRgb);
    }

    this.qRgbToMyRgb = function(qRgb) {
        var hex = this.qRgbToHex(qRgb);
        return this.hexToMyRgb(hex);
    }
}
/*function fileUpload(form, action_url, div_id)
{
    // Create the iframe...
    var iframe = document.createElement("iframe");
    iframe.setAttribute("id","upload_iframe");
    iframe.setAttribute("name","upload_iframe");
    iframe.setAttribute("width","0");
    iframe.setAttribute("height","0");
    iframe.setAttribute("border","0");
    iframe.setAttribute("style","width: 0; height: 0; border: none;");
    
    // Add to document...
    form.parentNode.appendChild(iframe);
    window.frames['upload_iframe'].name="upload_iframe";
    
    iframeId = document.getElementById("upload_iframe");
    
    // Add event...
    var eventHandler = function()  {
    
        if (iframeId.detachEvent)
        iframeId.detachEvent("onload", eventHandler);
        else
        iframeId.removeEventListener("load", eventHandler, false);
        
        // Message from server...
        if (iframeId.contentDocument) {
            content = iframeId.contentDocument.body.innerHTML;
        } else if (iframeId.contentWindow) {
            content = iframeId.contentWindow.document.body.innerHTML;
        } else if (iframeId.document) {
            content = iframeId.document.body.innerHTML;
        }
        
        document.getElementById(div_id).innerHTML = content;
        
        // Del the iframe...
        setTimeout('iframeId.parentNode.removeChild(iframeId)', 250);
    }

    if (iframeId.addEventListener)
        iframeId.addEventListener("load", eventHandler, true);
    if (iframeId.attachEvent)
        iframeId.attachEvent("onload", eventHandler);
    
    // Set properties of form...
    form.setAttribute("target","upload_iframe");
    form.setAttribute("action", action_url);
    form.setAttribute("method","post");
    form.setAttribute("enctype","multipart/form-data");
    form.setAttribute("encoding","multipart/form-data");
    
    // Submit the form...
    form.submit();
    
    document.getElementById(div_id).innerHTML = "Uploading...";
}
*/

/* index.php could be any script server-side for receive uploads. 
<form>
<input type="file" name="datafile" /></br>
<input type="button" value="upload"
        onClick="fileUpload(this.form,'index.php','upload'); return false;" >
<div id="upload"></div>
</form>

</html> */



var RESOURCES_TYPE_ALL = "all"
var RESOURCES_TYPE_IMAGES = "image"
var RESOURCES_TYPE_SOUNDS = "sound"

// callback from other iFrame, upload finished
function stopUpload(name,filename,success) {
    if (resourcesUpload[0] && resourcesUpload[0].name == name) {
        resourcesUpload[0].stopUpload(filename,success);
    } 
    if (resourcesUpload[1] && resourcesUpload[1].name == name) {
        resourcesUpload[1].stopUpload(filename,success);
    }     
}

////////////////////
// RESOURCES UPLOAD

var optionsDefaultResourcesUpload = {
    accept_file : "",
    type_data : RESOURCES_TYPE_IMAGES
} 

function ResourcesUpload(name,idParent, options) {
    var idDialogResources = "dialog_resources";
    var that = this;
    this.idParent = idParent;
    this.name = name;
    var listFilename = new Array();
    var uploadSuccess = -1;       
    
    this.buttonOK = "OK";
    this.callbackOK;
    this.focusedElement;
    this.canCroppedImage = true;
    
    if (options == undefined) {
        options = optionsDefaultResourcesUpload;
    }
    this.acceptFile = options.accept_file;
    this.typeData = options.type_data;
    
    var stringTextResult = function(success) {
        switch(success) {
            case 1: return '<span>The file was uploaded successfully!<\/span>';
            case 0: return  '<span>There was an error during file upload!<\/span>';
            default: return  '';
        }
    }
    
    this.resetButton = function() {
        var objButtons = {};
        $("#"+idDialogResources).dialog({         
            buttons: objButtons, 
        });            
    }      
    
    this.setButtonAndCallback = function(buttonName, buttonCallback) {
        this.buttonOK = buttonName;
        this.callbackOK = buttonCallback;
        var objButtons = {};
        objButtons[buttonName] = buttonCallback;
        console.log(objButtons);
        $("#"+idDialogResources).dialog({         
            buttons: objButtons, 
        });            
    }         
    
    this.setFocusedElement = function(elementName) {
        this.focusedElement = elementName;
    }  
    
    var contentUploadHtml = function() {   
        var upload_process = "upload_process_"+that.name;
        var upload_result = "upload_result_"+that.name;
        var upload_target = "upload_target_"+that.name;
        var upload_file = "upload_file_"+that.name;
        var upload_response = "upload_response_"+that.name;
        var form_upload_file = "form_upload_file_"+that.name;
        
        //getUploadedFilename
        //var response = "<script language='javascript' type='text/javascript'>window.top.window.stopUpload('"+that.name+"', '"+name+"',1);</script>";
        
        var content = "";
        content += '<p id="'+upload_process+'" class="upload_process">Loading...<br/><img src="/gamedesigner/media/img/loader.gif" /></p>';
        content += '<form id="'+form_upload_file+'" class="upload" action="/gamedesigner/uploadfile/" method="post" enctype="multipart/form-data" target="'+upload_target+'"  >';
        content += '<input id="'+upload_file+'" name="data" type="file" accept="'+that.acceptFile+'" style="color:black;" value="Choose the file" />';
        content += '<input name="loader_id" type="hidden" value="'+that.name+'" />';
        content += '<input name="type" type="hidden" value="'+that.typeData+'" />';
        content += '<input name="app_id" type="hidden" value="'+appId+'" />';
        content += '<input id="'+upload_response+'" name="response_type" type="hidden" value="javascript" />';
        content += '<p id="'+upload_result+'" style="margin:0px;padding:0px;color:green;"><strong>'+stringTextResult(uploadSuccess)+'</strong></p>';
        content += '</form>';
        content += '<iframe id="'+upload_target+'" name="'+upload_target+'" src="" style="width:0;height:0;border:0px;"></iframe>';
                              
        return content;
    }    
    
    this.refreshPreviewSetSizeImage = function(size) {
        $("#"+that.idParent+"_preview_data").append("<br /><strong>Dimension:</strong> "+size.width+" x "+size.height);        
    }
    
    this.refreshPreview = function(pathToFile) {
        var html = '<p class="dialog_section_title">Preview</p><p id="'+this.idParent+'_preview_data" style="color:black;"></p></p>';
        var fileInfo;
        var deleteUl;
        if(pathToFile) {
            fileInfo = new FileInfo(pathToFile);
            switch(that.typeData) {
                case RESOURCES_TYPE_IMAGES:                    
                    html += '<img src="'+pathToFile+'" style="max-width:270px;margin-top: 12px;"> ';                    
                    fileInfo.sizeOfImage(this.refreshPreviewSetSizeImage);
                    break;
                case RESOURCES_TYPE_SOUNDS: 
                    html += '<br /><audio controls><source src="'+pathToFile+'" /></audio>';
                    break;
            }
        }                
        $("#"+this.idParent+"_preview").html(html);

        if (pathToFile) {            
			var conversationLiClass = "conversation_property"; 
            deleteUl = document.createElement("ul");
            deleteUl.className = "menu";
			//deleteUl.style.width = 
            var propertyDelete = new Property(this.idParent+"_file_delete","image","");
            propertyDelete.srcImg = "/gamedesigner/media/img/ditem_delete.png";
			propertyDelete.setClassName(conversationLiClass);
            propertyDelete.setTemplate(150, 0);
            propertyDelete.addAction(PROPERTY_ACTION_CLICK, that.callbackRemoveFile);			
						            
            deleteUl.appendChild(propertyDelete.getElement());
            $("#"+this.idParent+"_preview").append("<br /><br />");
            $("#"+this.idParent+"_preview").append(deleteUl);
            propertyDelete.refreshActions();            
        } 
        $("#"+this.idParent+"_preview").corner("");
        if (pathToFile && fileInfo) { 
            $("#"+that.idParent+"_preview_data").append("<br /><strong>Filename:</strong> "+($("#"+that.idParent+"_list").val())+"<br /><strong>Extension:</strong> "+fileInfo.getExtension());
        }
    }
    
    this.callbackRemoveFile = function(propertyObj) {
		var filename = $("#"+that.idParent+"_list").val();
		var message = "";
		var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
		var message2 = 'Are you sure you want to remove?'
		
		switch(that.typeData) {
			case RESOURCES_TYPE_IMAGES:                    
				if (globalChange.isExistsForName(filename,DELETED_ELEMENT_IMAGE)) {
					message = message1
				} else {
					message = message2;
				}
				break;
			case RESOURCES_TYPE_SOUNDS: 
				if (globalChange.isExistsForName(filename,DELETED_ELEMENT_SOUND)) {
					message = message1
				} else {
					message = message2;
				}
				break;
		}		
		messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/library_title_icon.png" style="vertical-align:top;margin-top:6px;>" /> Library',message,"Remove","Cancel",that.removeFile);
    }
        
    this.removeFile = function() {
        var filename = $("#"+that.idParent+"_list").val();
        removeFile(that.typeData, filename);
        that.refreshPreview();
    }
   
    this.setFocusForFilename = function(filename) {
        if (filename) {
            $("#"+that.idParent+"_list").val(filename);
            this.changeSelect();
        }
    }   
    
    this.setFocusForFocusedElement = function() {
        console.log(this.focusedElement);
        this.setFocusForFilename(this.focusedElement);
    }      
        
    this.getIdList = function() {
        return ""+that.idParent+"_list";
    }
    
    this.getFocusedElement = function() {
        return $("#"+this.idParent+"_list");
    }    
    
    this.setListFilename = function(list) {
        listFilename = list;
        setSelectListByStringArray(list, that.getIdList());
    }
    
    this.cropImage = function(userInfo) {
        cropImage.setImageSrc("/gamedesigner/media/upload/"+appId+"/img/"+userInfo.filename,false, true);
        cropImage.callbackSaveCrop = function() {
            that.setFocusForFilename(userInfo.filename);
        }               
    }
    
    this.messageCroppedUploadedImage = function(filename) {
        messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/library_title_icon.png" style="vertical-align:top;margin-top:6px;>" /> Library',"Are you want to crop the image '"+filename+"'?","Crop","Cancel",that.cropImage, false, {filename: filename});
    }
    
    this.changeSelect = function() {
        var val = $("#"+this.getIdList()).val();
        if (val) {
            var filename = $("#"+this.getIdList()).val();
            var fullPathToFile = "/gamedesigner/media/upload/"+appId+"/";
            
            switch(that.typeData) {
                case RESOURCES_TYPE_IMAGES:
                    fullPathToFile += "img/";
                    break;
                case RESOURCES_TYPE_SOUNDS:
                    fullPathToFile += "sound/";
                    break;
            }
            
            fullPathToFile+=filename;        
            that.refreshPreview(fullPathToFile);
        }
    }
    
    this.contentUpload = function() {
        var html = contentUploadHtml(this.name);        
        $("#"+this.idParent).html(html);
        $("#"+this.idParent).parent().corner("");
        this.refreshPreview();
        

        var form_upload_file = "form_upload_file_"+that.name;
        $("#"+form_upload_file).submit(function() {
            console.log("preventDefault");
            return startUpload();
        });

        $("#upload_file_"+this.name).change(function() {
            var form_upload_file = "form_upload_file_"+that.name;
            //var upload_response = "upload_response_"+that.name;
            
            //var filename = getUploadedFilename();            
            //var responseValue = "<script language='javascript' type='text/javascript'>window.top.window.stopUpload('"+that.name+"', '"+filename+"',1);</script>";
            //$("#"+upload_response).val(responseValue);          
            
            $("#"+form_upload_file).submit();
        });
        
        $("#upload_file_"+this.name).click(function() {
            resetResultText(that.name);
        });
        $("#"+this.idParent+"_list").change(function() {
            that.changeSelect();
        });       
        var upload_file = "upload_file_"+that.name;
    } 
    
    this.contentUpload(); 
    
    var getUploadedFilename = function() {
        var upload_file = "upload_file_"+that.name;
        var filename = "";
        var file = $("#"+upload_file)[0].files[0];
        if (file && file.name) {
            filename = file.name;
        } 
        return filename;
    }
    
    var startUpload = function() {  
        var upload_process = "upload_process_"+that.name;
        var upload_result = "upload_result_"+that.name;    
        var uploadProcess = document.getElementById(upload_process);
        
        var filename = getUploadedFilename();
        var isOverwrite = isExistStringInArray(filename, listFilename)        
        
        if (filename) {
            if (!isOverwrite) {
                if (uploadProcess) {
                    uploadProcess.style.visibility = 'visible';
                    return true;
                }            
            } else {
                messageDialog.show("Upload file","The file already exists.");
                return false;
            }
        }
        else {
            messageDialog.show("Upload file","The first select the file to upload.");
            return false;
        }
    }
    
    this.stopUpload = function(filename,success){
        var upload_process = "upload_process_"+this.name;
        var upload_result = "upload_result_"+this.name;
        var upload_file = "upload_file_"+that.name;
        if (success == 1) {
            callbackUploadSuccessful(this.name,filename,this.typeData);
            uploadSuccess = success;
            $("#"+upload_result).html(stringTextResult(uploadSuccess));
            $("#"+upload_file).val("");   
            
            if (this.typeData == RESOURCES_TYPE_IMAGES && this.canCroppedImage) {
                this.messageCroppedUploadedImage(filename);
            }                     
        }             
        document.getElementById(upload_process).style.visibility = 'hidden';
        return true;
    }
   
    
    var resetResultText = function() {
        var upload_result = "upload_result_"+that.name;
        $("#"+upload_result).html("");
    }
    
    /* server side -> response
        <script language="javascript" type="text/javascript">
        window.top.window.stopUpload(<?php echo $result; ?>);
        </script>
    */                  
}

////////////////////
// CALLBACK HANDLE

    function callbackElementNotActive() {        
        if (properties) {
            properties.removeAllChildren();
        }
        actions.showActions(false);
    }
    
    function callbackBackToNormalSize() {
        if (activeElement) {
            var myActive = activeElement.elementSelected;
            setStyleOfElement(activeElement.elementSelected, { width : myActive.dataset.designImageOriginalWidth, height : myActive.dataset.designImageOriginalHeight });
            codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "width", value: myActive.dataset.designImageOriginalWidth}]);
            codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "height", value: myActive.dataset.designImageOriginalHeight}]);
            callbackChangeValueRefresh();
        }    
    }    
    
    
    function removeActiveElement() {
        if (activeElement && activeElement.elementSelected && activeElement.elementSelected.dataset) {
            removeObject(activeElement.elementSelected, activeElement.elementSelected.dataset.designType, {isUserCreated: true})
            actions.showActions(false);
            $( "#tabs" ).tabs({ active: 0 });
        }          
    }   
    
    function callbackPropertyDeleteElement() {       
        if (activeElement) { 
            
            var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
            var message2 = 'Are you sure you want to remove?'
                              
            if (globalChange.isExistsForName(activeElement.elementSelected.dataset.designName, DELETED_ELEMENT_CLICKABLE_AREA)) {
                message = message1
            } else {
                message = message2;
            }        
            messageDialog.showWithTwoButtons("Remove the item from the canvas", message,"Remove","Cancel",removeActiveElement);
        }
    }        
    
    function callbackChangePanelItemsVisible(property, value) {
        /*panelItemsVisible = value;
		changePanelItemsVisible();
        updateBoard(boardId, boardBackground, boardSound);
        */
    }      
	
	/*function changePanelItemsVisible() {
		if (panelItemsVisible) {
			$("#canvas_bottombar").css("display","block");
		} else {
			$("#canvas_bottombar").css("display","none");
		}
	}*/
    
    function callbackSwipegroupsPropertyDeleteSwipegroup() {
        $( "#tabs" ).tabs({ active: 0 }); 
    }      
    
    function setElementPosXOnCanvas(element,pos_x) {
        var pos = pos_x;
        if (canvas) {            
            pos = canvas.marginLeft + parseInt(pos_x);
            
            if (pos + element.offsetWidth > canvas.workspaceWidth) {
                pos = canvas.marginLeft + canvas.workspaceWidth - element.offsetWidth;
            } 
            console.log(canvas.workspaceWidth);
        }
        return pos;
    }

    function callbackUploadSuccessful(loaderName,filename,type) {
        getUploadedFilesByType(type, filename);
    }
    
    /*function tryChangeParamsActiveObject(arrayParamsChange) {
        messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/icon-warning-32.png" style="vertical-align:top;margin-top:6px;>" /> Canvas', "Zmiana obiektu na canvasie, zmieni również definicje. Kontynuować?","Yes","No", function() {
            for(var i=0; i < arrayParamsChange.length; i++) {
                var paramChange = arrayParamsChange[i];
                if (paramChange.property == "x_pos") {
                    callbackChangeValueXPos(null, paramChange.value);
                }
            }
        }); 
    }*/
    
    // lista wszystkich typow + lista wszystkich wlasciwosci i wartosci
    
    function tryChangeParamsActiveObject(type, property, value) {
        //messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/icon-warning-32.png" style="vertical-align:top;margin-top:6px;>" /> Canvas', "Zmiana obiektu na canvasie, zmieni również definicje. Kontynuować?","Yes","No", function() {
            
            // petla in po wlasciwosciach
            /*            
            var json = "{}",
                obj = {};
            for(var i=0; i < properts.length; i++) {
                obj = properts[i];
                json = "{\""+type+"\": \""+value+"\"}";
             }
                
             */
            
            var json = "{\""+type+"\": \""+value+"\"}"; 
            var obj = JSON.parse(json);
            setStyleOfElement(activeElement.elementSelected, obj);
            // petla end
            
            callbackChangeValueRefresh();
        /*},function(){
            property.backToOldValue();
            //setStyleOfElement(activeElement.elementSelected, obj);
            //alert("new:"+value+" old:"+property.oldValue);
        });*/
    }

    function callbackChangeValueXPos(property, value) {   
        tryChangeParamsActiveObject("x_pos", property, value);
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "x", value: value}]);                    
        //var obj = { type: "x_pos", property: property, value: value };
        //tryChangeParamsActiveObject([{ type: "x_pos", property: property, value: value }]);
    }
    function callbackChangeValueYPos(property, value) {
        tryChangeParamsActiveObject("y_pos", property, value);
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "y", value: value}]);                    
    }
    function callbackChangeValueWidth(property, value) {
        tryChangeParamsActiveObject("width", property, value);
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "width", value: value}]);                    
    }
    function callbackChangeValueHeight(property, value) {
        tryChangeParamsActiveObject("height", property, value);
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "height", value: value}]);                    
    }
    function callbackChangeValueFontSize(property, value) {
        setStyleOfElement(activeElement.elementSelected, { font_size : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "fontSize", value: value}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueFontType(property, value) {
        setStyleOfElement(activeElement.elementSelected, { font_type : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "fontType", value: value}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueTextColor(property, value) {
        var myRgb = (new Color).hexToMyRgb(text_color_hex);
        setStyleOfElement(activeElement.elementSelected, { text_color : myRgb });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "textColor", value: myRgb}]);                                    
        callbackChangeValueRefresh();
    }
    function callbackChangeValueTitleColor(property, value) {
        var myRgb = (new Color).hexToMyRgb(text_color_hex);
        setStyleOfElement(activeElement.elementSelected, { title_color : myRgb });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "titleColor", value: myRgb}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueText(property, value) {
        setStyleOfElement(activeElement.elementSelected, { text : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "text", value: value}]);                            
        // event
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CHANGE_ELEMENT_TEXT, {text: value}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

        callbackChangeValueRefresh();
    }
    function callbackChangeValueTitleLabel(property, value) {
        setStyleOfElement(activeElement.elementSelected, { title_label : value });
        canvas.navigationBar.setTitle(activeElement.elementSelected, value);
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "titleLabel", value: "\""+value+"\""}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueHtmlContent(property, value) {
        setStyleOfElement(activeElement.elementSelected, { html_content : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "html", value: value}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueFileName(property, value) {
        setStyleOfElement(activeElement.elementSelected, { file_name : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "image", value: value}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueBackgroundImage(property, value) {
        setStyleOfElement(activeElement.elementSelected, { background_image : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "background", value: value}]);                            
        callbackChangeValueRefresh();
    }
    function callbackChangeValueAreaImage(property, value) {
        setStyleOfElement(activeElement.elementSelected, { area_image : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "image", value: value}]);                            
        callbackChangeValueRefresh();
    }    
    function callbackChangeValueName(property, value) {
        var oldName = activeElement.elementSelected.dataset.designName;
        activeElement.prevName = activeElement.elementSelected.dataset.designName;   
        setStyleOfElement(activeElement.elementSelected, { name : value });
        codeEditor.generateByChangeParam([{name:oldName,  parameter: "name", value: value}]);
        //console.log("prev name:"+activeElement.prevName);     
        //console.log("new name:"+activeElement.elementSelected.dataset.designName);     
        callbackChangeValueRefresh();
    }
    function callbackChangeValueVisible(property, value) {
        setStyleOfElement(activeElement.elementSelected, { visible : value });
        codeEditor.generateByChangeParam([{name:activeElement.elementSelected.dataset.designName,  parameter: "visible", value: value}]);
        callbackChangeValueRefresh();
    }
    
    function callbackChangeValueProportionalImage(property, value) {        
        setStyleOfElement(activeElement.elementSelected, { proportional_image : value });
        callbackChangeValueRefresh();
    }    
    function callbackChangeValueDraggable(property, value) {
        setStyleOfElement(activeElement.elementSelected, { draggable : value });
        callbackChangeValueRefresh();
    }
    function callbackChangeValueZoom(property, value) {
        setStyleOfElement(activeElement.elementSelected, { zoom : value });
        callbackChangeValueRefresh();
    }    
    function callbackChangeValueTypeScreen(property, value) {
        editorScreen.screenType = value;
        callbackChangeValueRefresh();                        
    }
    function callbackChangeValueSwipegroupName(property, value) {
        activeElement.elementSelected.dataset.designSwipegroupName = value;
        callbackChangeValueRefresh();                
    }    
    // swipegroups group callbacks 
    function callbackSwipegroupsChangeValueSwipegroupName(property, value) {
        swipegroups.activeElem = application.getSwipegroupObjectByName(value);
        swipegroups.activeElem.name = value;
        callbackSwipegroupChangeValueRefresh();        
    }
    function callbackSwipegroupsChangeValuePageControlVisible(property, value) {
        swipegroups.activeElem.page_control_visible = value;
        callbackSwipegroupChangeValueRefresh();
    }
    function callbackSwipegroupsChangeValueNavigationBarVisible(property, value) {
        swipegroups.activeElem.navigation_bar_visible = value;
        callbackSwipegroupChangeValueRefresh();
    }
    function callbackSwipegroupsChangeValuePagerTabVisible(property, value) {
        swipegroups.activeElem.pager_tab_visible = value;
        callbackSwipegroupChangeValueRefresh();
    }
    function callbackSwipegroupsChangeValuePagerTabTitle(property, value) {
        swipegroups.activeElem.pager_tab_title = value;
        callbackSwipegroupChangeValueRefresh();
    }        

    function callbackChangeValueRefresh() {
        if (activeElement && activeElement.elementSelected) {        
            activeElement.refresh();
            activeElement.elementSelected.dataset.designEditActions = 0;
            activeElement.updateElementInBase();
        }
    }        
    
    function callbackSwipegroupChangeValueRefresh() {
        if (swipegroups && swipegroups.activeElem) {                    
            selectSwipegroup(swipegroups.activeElem, true);
            //swipegroups.updateElementInBase();
        }
    }    
    
    function callbackChangeActions(myActions, json) {   
        if (activeElement && activeElement.elementSelected) { // !myActions.globalAreAnyParametersEmpty()            
            activeElement.elementSelected.dataset.designActions = json;
            codeEditor.generateByChangeActions([{name: activeElement.elementSelected.dataset.designName}]);
            console.log("Change action: "+json);  
            activeElement.updateElementInBase();
        }
    }
    
////////////////////
// CONVERSATIONS
// 

function ConversationsContainer() {
    var that = this;    
    var conversations = new Array();
    this.idDialog = "dialog_conversations";     
    this.idShowDialogOpen = "dialog_conversations_open"
         
    this.idConversationsAdd = "conversations_add"; 
    this.idConversationsList = "conversations_list"; 
    this.idConversationsEdit = "conversations_edit"; 
    this.idConversationsPreview = "conversations_preview";
    
    this.idAddDialog = "dialog_add";    
    this.idParentUl = "conversations_sortable";
    
    this.characterName = "Character";
    
    var qParentConversationsList= $("#"+this.idConversationsList);
    var qParentConversationsEdit = $("#"+this.idConversationsEdit);
    var qParentConversationsPreview = $("#"+this.idConversationsPreview);
    var selectedConversation;     
	var callbackButtonOK;
	var callbackButtonOKData;		
    
    $( "#"+this.idDialog ).dialog({
        autoOpen: false,
        modal: true,
        width: 1050,
        height: 670,
        //position: 'top',
        resizable: false,
        title: '<img src="/gamedesigner/media/img/conver_title_icon.png" style="vertical-align:top;margin-top:6px;" /> <span class="title">CONVERSATIONS</span>',
        buttons: {
            Save: function() { 
				if (typeof callbackButtonOK === "function") {
					callbackButtonOK(callbackButtonOKData);
				}			
                $( this ).dialog( "close" );
            },
        },
        close: function( event, ui ) {
            selectElement(activeElement.elementSelected);
        }, 
        open: function(event, ui) {
            $('.ui-dialog-buttonpane')
            .find('button:contains("Save")')
            .removeClass('ui-button-text-only')
            .css('border',"0px")
            .css('background-color',"transparent")
            .html('<div class="dialog_img_save"></div>');            
        },        
    }); 
    
    var options = { id_actions: "conversations_actions", 
                           id_actions_header: "conversations_actions_header",
                           id_actions_tree: "conversations_actions_tree",
                           id_actions_tree_option_prefix: "conversations_tree_option",
                           id_actions_tree_element_delete: "conversations_actions_tree_element_delete",
                           id_actions_parameters: "conversations_actions_parameters",
                           id_actions_available: "conversations_actions_available",
                           list_actions_available: new Array(ACTIONS_ONCLICK,
                            ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML, 
                            ACTIONS_SHOW_TPOPUP, ACTIONS_ITEM_SHOW_TPOPUP,
                            ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,
                            ACTIONS_TAKE_ITEM),                        
                          }
             
    var callbackConversationChangeActions = function(myActions, json) {   
        console.log("ok");
        if (selectedConversation && !myActions.globalAreAnyParametersEmpty()) {            
            console.log(json);
            selectedConversation.onclick = json;
            that.editConversationInBase(selectedConversation); 
        }
    }                 
                          
    var conversationActions = new Actions(options);
    conversationActions.isAbsoluteParameters = false;
    conversationActions.colorTree = "000";
    conversationActions.propertyLiClass = "conversation_action_property";
    conversationActions.callbackChangeActions = callbackConversationChangeActions;
    conversationActions.showActions(true);
    conversationActions.showActionsAvailable(true);
    //conversationActions.refresh();
    $("#"+options.id_actions).corner();
    $("#"+options.id_actions_parameters).corner();     
    
    var tooltipActions = ' <img src="/gamedesigner/media/img/icon_question.png" title="....." style="cursor: help;vertical-align:bottom;margin-left:100px;" >';
    $("#"+options.id_actions_header+" p").append(tooltipActions);
    
    this.conversationsListName = function() {
        return arrayFromArrayParam(conversations,"name"); 
    }      
    
    $("#"+this.idConversationsAdd).click(function() {
        var tempName = autonumerateForArrayWithString(that.conversationsListName(),"conversation").name;
        selectedConversation = that.addConversations(false, undefined, tempName, "", "", "", "", "", "", "", "");  
        that.refresh();    
    });
    
    $("#"+this.idShowDialogOpen).click(function() {
        that.showDialog(); 
    });
	
	this.setCallbackButtonOK = function(callback, data) {
		if (typeof callback === "function") {
			callbackButtonOK = callback;
		}
		if (data) {
			callbackButtonOKData = data;
		}
	}	
	
	this.setFocusForName = function(name) {
		 if (name) {	
			selectedConversation = objectFromParamAndValue(conversations, "name", name);
			that.refresh();
		 }
	}
    
	this.getFocus = function() {
		if (selectedConversation) {
			return selectedConversation.name;
		 }
	}	
        
    this.refresh = function() {
        this.refreshListSection();
        this.refreshEditSection();
        this.refreshPreviewSection();
    }
    
    this.refreshListSection = function() {
        qParentConversationsList[0].innerHTML = '<p class="dialog_section_title">Conversations list</p>';

        for (var i=0; i < conversations.length; i++) {
            var name = conversations[i].name;
            var className = "";
            if (selectedConversation && selectedConversation.name == name) {
                className = "selected"
            }
            
            var li = document.createElement("li");
            li.className = className;
            li.id = "conversations_id_list_item"+i;
            var p = document.createElement("p");
            p.innerHTML = name;
            li.appendChild(p);
            qParentConversationsList.append(li);//'<li class="'+className+'"><p>'+name+'</p></div>');
            $("#"+li.id).click(function() { //"+this.idConversationsList+" li").click(function(){
                 var pName = $(this).first();
                 var value = pName.text();
                 console.log(value);
                 if (value) {
                    selectedConversation = objectFromParamAndValue(conversations, "name", value);
                    that.setConversationsFromString();
                    that.refresh();
                    //$( "#"+that.idDialog ).dialog({position: ['top']});
                 }
            });            
        }   
    }    
    this.refreshEditSection = function() {
        qParentConversationsEdit[0].innerHTML = '<p class="dialog_section_title">Edit Conversation</p>';
        
        if(selectedConversation) {
            var conversationLiClass = "conversation_property"; 
            var srcAddBtn = "/gamedesigner/media/img/icon_sphere_green_add.png"; 
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            var templateData = { widthAll: 370, leftWidth: 100 }
            
            var propertyConversationName = new Property("conversation_name_edit","text","Name: ","");
            propertyConversationName.setClassName(conversationLiClass);
            propertyConversationName.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationName.setIconTooltip(imgIconTooltip,".....");
            var propertyConversationTitle = new Property("conversation_edit_title","text","Title: ","");
            propertyConversationTitle.setClassName(conversationLiClass);
            propertyConversationTitle.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationTitle.setIconTooltip(imgIconTooltip,".....");
            var propertyConversationImage = new Property("conversation_edit_image","select","Character image: ",""); //,'<input type="button" value="+" onclick="openResourcesDialog(RESOURCES_TYPE_IMAGES)" />');
            propertyConversationImage.setClassName(conversationLiClass);
            propertyConversationImage.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationImage.setIconTooltip(imgIconTooltip,"Please upload image or photo of a character that player will be having conversation with.");
            propertyConversationImage.setOptionOfSelect(arrayWithFirstEmptyElement(application.imagesList));
            //propertyConversationImage.styleRight = "width:120px;"      
            propertyConversationImage.showButtonDialog = true;
            propertyConversationImage.srcAddBtn = srcAddBtn;
            propertyConversationImage.callbackButtonDialog = function(property) { 
                resourcesUpload[0].setFocusedElement(selectedConversation.image); 
                openResourcesDialog(RESOURCES_TYPE_IMAGES);
                resourcesUpload[0].setButtonAndCallback("Set character image", function() { 
                    that.callbackChangeConversation(property, resourcesUpload[0].getFocusedElement().val());
                    $( "#dialog_resources" ).dialog( "close" ); 
                });            
            };                            
            var propertyConversationSpeakerName = new Property("conversation_edit_speaker_name","text","Speaker name: ","");
            propertyConversationSpeakerName.setClassName(conversationLiClass);
            propertyConversationSpeakerName.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationSpeakerName.setIconTooltip(imgIconTooltip,".....");
            var propertyConversationSound = new Property("conversation_edit_sound","select","Sound: ","");
            propertyConversationSound.setClassName(conversationLiClass);
            propertyConversationSound.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationSound.setIconTooltip(imgIconTooltip,".....");
            propertyConversationSound.setOptionOfSelect(arrayWithFirstEmptyElement(application.soundsList));
            //propertyConversationSound.styleRight = "width:120px;"
            propertyConversationSound.showButtonDialog = true;
            propertyConversationSound.srcAddBtn = srcAddBtn;
            propertyConversationSound.callbackButtonDialog = function(property) { 
                resourcesUpload[1].setFocusedElement(selectedConversation.sound); 
                openResourcesDialog(RESOURCES_TYPE_SOUNDS);
                resourcesUpload[1].setButtonAndCallback("Set sound", function() { 
                    that.callbackChangeConversation(property, resourcesUpload[1].getFocusedElement().val());
                    $( "#dialog_resources" ).dialog( "close" ); 
                });            
            }; 
            var propertyConversationPlayerSayTheFirst = new Property("conversation_edit_player_say_the_first","checkbox","Player say the first: ","");
            propertyConversationPlayerSayTheFirst.setClassName(conversationLiClass);
            propertyConversationPlayerSayTheFirst.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyConversationPlayerSayTheFirst.setIconTooltip(imgIconTooltip,".....");
            var propertyDeleteConversation = new Property("conversation_edit_delete","image","");
            propertyDeleteConversation.setClassName(conversationLiClass);
            propertyDeleteConversation.srcImg = "/gamedesigner/media/img/conver_delete.png";
            propertyDeleteConversation.setTemplate(templateData.widthAll,50);
            
            qParentConversationsEdit[0].appendChild(propertyConversationName.getElement());
            qParentConversationsEdit[0].appendChild(propertyConversationTitle.getElement());
            qParentConversationsEdit[0].appendChild(propertyConversationImage.getElement());
            qParentConversationsEdit[0].appendChild(propertyConversationSpeakerName.getElement());
            qParentConversationsEdit[0].appendChild(propertyConversationSound.getElement());
            qParentConversationsEdit[0].appendChild(propertyConversationPlayerSayTheFirst.getElement());
            qParentConversationsEdit[0].appendChild(propertyDeleteConversation.getElement());
            qParentConversationsEdit.append("<p class=\"horiz_line\"></p>");            
            
            propertyConversationName.setValue(selectedConversation.name);
            propertyConversationTitle.setValue(selectedConversation.title);
            propertyConversationImage.setValue(selectedConversation.image);
            propertyConversationSpeakerName.setValue(selectedConversation.speaker_name);
            propertyConversationSound.setValue(selectedConversation.sound);
            propertyConversationPlayerSayTheFirst.setCheckbox(selectedConversation.player_say_the_first);

            propertyConversationName.callbackChangeValue = this.callbackChangeConversation;
            propertyConversationTitle.callbackChangeValue = this.callbackChangeConversation;
            propertyConversationImage.callbackChangeValue = this.callbackChangeConversation;
            propertyConversationSpeakerName.callbackChangeValue = this.callbackChangeConversation;
            propertyConversationSound.callbackChangeValue = this.callbackChangeConversation;
            propertyConversationPlayerSayTheFirst.callbackChangeValue = this.callbackChangeConversation;
            propertyDeleteConversation.addAction(PROPERTY_ACTION_CLICK, this.callbackDeleteConversation);

            propertyConversationName.refreshActions();        
            propertyConversationTitle.refreshActions();        
            propertyConversationImage.refreshActions();        
            propertyConversationSpeakerName.refreshActions();      
            propertyConversationSound.refreshActions();                  
            propertyConversationPlayerSayTheFirst.refreshActions();                  
            propertyDeleteConversation.refreshActions();                  

            
            // actions
            conversationActions.setByJSON(selectedConversation.onclick);
            conversationActions.showActions(true);
            
            $("#"+this.idParentUl).css("display","block");
            $("#"+this.idAddDialog).css("display","block"); 
        } else {
            conversationActions.showActions(false);
            $("#"+this.idParentUl).css("display","none");
            $("#"+this.idAddDialog).css("display","none"); 
        }        
    }    
    this.refreshPreviewSection = function() {  
        //if (selectedConversation) {
           this.refreshPreview();
        //}
    }    

    this.showDialog = function() {
        this.refresh();
        $( "#"+this.idDialog ).dialog("open");
    }
    
    this.addConversations = function(loaded, id, name, title, image, speakerName, sound, playerSayTheFirst, _conversat, html, onclick) {
        var objConversation = {
            id: id,
            name: name,
            title: title,
            image: image,
            speaker_name: speakerName,
            sound: sound,
            player_say_the_first: playerSayTheFirst,
            conversations: specialCharsToHtml(_conversat),
            html_preview : html,
            html_content: html,
            onclick: specialCharsToHtml(onclick),
        }     
        conversations.push(objConversation);     
        if (!loaded) {
            this.addConversationToBase(objConversation);
        }      
        return objConversation;
    }
    
    this.setConversationsFromString = function() {
        if (selectedConversation) {
            this.removeDialogs();
            var objConv = Convert.string2Array(selectedConversation.conversations,"|");            
            for(var i=0; i < objConv.length; i++) {
                this.addDialog(objConv[i]);
            }
        }
    }
    
    this.getConversationsFromArray = function() {
        if (selectedConversation) {
            selectedConversation.conversations = Convert.array2String(this.getDialogs(),"|");
        }        
    }
        
    this.unselectConversation = function() {
        selectedConversation = undefined;
        this.refresh();
    }    
    
    $("#"+this.idAddDialog).click(function() {
        that.addDialog("");
    });
    
    this.getDialogs = function() {
        var dialogsList = new Array();
        $("#"+this.idParentUl+" li").each(function(index, element) {
            var elem = $(element).find("textarea");
            var dialog = elem.val().replace(/"/g, "'");
            //console.log(dialog);
            dialog = specialCharsToHtml(dialog);
            dialogsList.push(dialog);   
        });
        return dialogsList;
    }

    this.getPreviewForName = function(name, options) {
        var tempConversation = selectedConversation;
        var obj = objectFromParamAndValue(conversations,"name",name);
        if (obj) {
			selectedConversation = obj;
			that.setConversationsFromString();
			that.refresh();
			
			var html = "";
			if (options && options.editor) {
                html = this.getPreviewEditor("/gamedesigner/media/upload/"+appId+"/img/");
			} else {			
			    html = this.getPreviewSmall("/gamedesigner/media/upload/"+appId+"/img/");
			}
			
			selectedConversation = tempConversation;	
			that.setConversationsFromString();
			that.refresh();			
            return html;
        }
        return "";
    }
    
    this.getPersonOfDialog = function(index) {
        if (selectedConversation) {
            var person = this.characterName;
            if (index%2 == selectedConversation.player_say_the_first) {
                if (selectedConversation.speaker_name) {
                    person = selectedConversation.speaker_name;    
                } else {
                    person = "Noname";
                }                    
            }
            return person;
        }
        return "";
    }
    
    this.getPreviewSmall = function(path) {
        var html = "";
        if (selectedConversation) {
            html += "<div style='font-size:14px;'>";
            if (selectedConversation.image) {
                html += "<p><img src=\""+path+selectedConversation.image+"\" style=\"max-width:280px;\" /></p>";
            }        
            html += "<p style='font-weight: bold;font-size:22px;'>";
            if (selectedConversation.title) {
                html += selectedConversation.title;
            } else {
                html += ""
            }
            html += "</p>";
            var dialogs = this.getDialogs();
            for(var i=0; i < dialogs.length; i++) {
                var person = this.getPersonOfDialog(i);
                html+= "<p class=\"person_name\"><span>"+person+" says:</span> <strong>"+dialogs[i]+"</strong></p>";
            }
            html += "</div>";  
        }
        html = html.replace(/"/g, "'");     
        return html;
    }   	
	
    this.getPreviewEditor = function(path) {
        var html = "";
        if (selectedConversation) {
            html += "<div style='color: #000; font-size:20px;'>";
            if (selectedConversation.image) {
                html += "<p><img src=\""+path+selectedConversation.image+"\" style=\"max-height:250px;\" /></p>";
            }        
            html += "<p style='color: #000; font-weight: bold;font-size:30px;margin-bottom:10px;'>";
            if (selectedConversation.title) {
                html += selectedConversation.title;
            } else {
                html += ""
            }
            html += "</p>";
            var dialogs = this.getDialogs();
            for(var i=0; i < dialogs.length; i++) {
                var person = this.getPersonOfDialog(i);
                html+= "<p class=\"person_name\" style=\"color: #000;font-size:16px;\"><span>"+person+" says:</span> <strong>"+dialogs[i]+"</strong></p>";
            }
            html += "</div>";  
        }
        html = html.replace(/"/g, "'");     
        return html;
    }  	
	
    this.getPreview = function(path) {
        var html = "";
        if (selectedConversation) {
            html += "<div style='font-weight: bold;font-size:20px;'>";
            html += "<p class='title'>";
            if (selectedConversation.title) {
                html += selectedConversation.title;
            } else {
                html += ""
            }
            html += "</p>";
            if (selectedConversation.image) {
                html += "<p><img src=\""+path+selectedConversation.image+"\" class=\"preview\" /></p>";
                html += "<p class=\"horiz_line\"></p>";
            }        
            
            var dialogs = this.getDialogs();
            for(var i=0; i < dialogs.length; i++) {
                var person = this.getPersonOfDialog(i);
                html+= "<p class=\"person_name\"><span class=\"name\">"+person+" says:</span> <strong>"+dialogs[i]+"</strong></p>";
            }
            html += "</div>";  
        }
        html = html.replace(/"/g, "'");     
        return html;
    }   
    this.getHtmlContent = function() {
        var html = "";
        if (selectedConversation) {
            html += "<div style='font-size:40px;padding:60px;'>";
            if (selectedConversation.image) {
                html += "<p><img src=\""+selectedConversation.image+"\" class=\"preview\" /></p>";
            }        
            html += "<p style='font-weight: bold;font-size:80px;'>";
            if (selectedConversation.title) {
                html += selectedConversation.title;
            } else {
                html += ""
            }
            html += "</p>";            
            var dialogs = this.getDialogs();
            for(var i=0; i < dialogs.length; i++) {
                var person = this.getPersonOfDialog(i);
                html+= "<p class=\"person_name\"><span><strong>"+person+" says:</strong></span> "+dialogs[i]+"</p>";
            }
            html += "</div>";  
        }
        html = html.replace(/"/g, "'");     
        return html;
    }       
    this.refreshPreview = function() {
        var html = '<p class="dialog_section_title">Preview</p>';
        var html_preview = this.getPreview("/gamedesigner/media/upload/"+appId+"/img/");
        var html_content = this.getHtmlContent();
        if (selectedConversation) {
            selectedConversation.html_content = html_content;
            selectedConversation.html_preview = html_preview;
        }
        $("#"+this.idConversationsPreview).html(html);
        $("#"+this.idConversationsPreview).append(html_preview);
    }     
    
    this.refreshPlayersSays = function() {
        $( "#"+this.idParentUl+" li").each(function(index,element) {   
            var search = $( "div.playerSays" );         
            var playerSays = $(element).find(search);
            var person = that.getPersonOfDialog(index);
            playerSays[0].innerHTML = person+" says:";
        });        
    }
    
    this.addDialog = function(text) {
        var parent = $( "#"+this.idParentUl )[0];
        if (parent) {
            var li = document.createElement("li");
            //li.style.width="280px"
            li.style.height="125px"
            li.className = "conver_item_dialog";
            
            var playerSays = document.createElement("div");
            playerSays.className = "playerSays";
            playerSays.innerHTML = "Player says";
            li.appendChild(playerSays);
            li.innerHTML += '<textarea style="background-color:white;">'+text+'</textarea> '+
                            '<input name="remove" type="image" src="/gamedesigner/media/img/icon_sphere_green_remove.png" style="vertical-align:top;margin-left:8px;margin-top:20px;" value="-">'; //<div style="display: inline-block;vertical-align:top;" class="ui-state-default"><span class="ui-icon ui-icon-carat-2-n-s"></span></div> ';
            parent.appendChild(li);            
            this.refreshPlayersSays();

            $(li).find("textarea").focus();
            $(li).find("textarea").bind("keyup input paste", function() {
                //this[0].dataset.dialog = //TODO
                that.getConversationsFromArray();
                that.refreshPreview();
            });
            $(li).find("textarea").bind("change", function() {
                that.getConversationsFromArray();
                that.editConversationInBase(selectedConversation);
            });
            
            // remove
            $(li).find("input[name='remove']").click(function() {
               $(this).parent().remove();
               that.getConversationsFromArray();
               that.refreshPlayersSays();
               that.refreshPreview(); 
            });
        }
        this.refreshPreview();
        this.refreshActions();
    }
    
    this.removeDialogs = function() {
       var parent = $( "#"+this.idParentUl )[0];
       if (parent) {
           parent.innerHTML = "";
           that.refreshPlayersSays();
           this.refreshPreview();
       }
    }    
    
    this.refreshActions = function() {
        $( "#"+this.idParentUl ).sortable({
            placeholder: "ui-state-highlight",
            stop: function() {
                that.refreshPlayersSays();
                that.refreshPreview();
            }
        });
        $("#"+this.idPlayerSaysTheFirst).change(function() {
            that.refreshPlayersSays();
            that.refreshPreview();
        }); 
    }       

    this.callbackChangeConversation = function(propertyObj,value) {
        if (selectedConversation) {
            if (propertyObj.id == "conversation_name_edit") { 
                if (isExistStringInArray(value, that.conversationsListName()) == false) {
                    selectedConversation.prevName = selectedConversation.name;
                    selectedConversation.name = value;
                    that.editConversationInBase(selectedConversation); 
                } else {
                    messageDialog.show("Conversations","Duplicate name!");
                }
            } else if (propertyObj.id == "conversation_edit_title") {
                selectedConversation.title = value;
                that.refreshPreview();
                that.editConversationInBase(selectedConversation);
            } else if (propertyObj.id == "conversation_edit_image") {
                selectedConversation.image = value;
                that.refreshPreview();
                that.editConversationInBase(selectedConversation);
            } else if (propertyObj.id == "conversation_edit_speaker_name") {
                selectedConversation.speaker_name = value;
                that.refreshPreview();
                that.editConversationInBase(selectedConversation);
            } else if (propertyObj.id == "conversation_edit_sound") {
                selectedConversation.sound = value;
                that.refreshPreview();
                that.editConversationInBase(selectedConversation);
            } else if (propertyObj.id == "conversation_edit_player_say_the_first") {
                selectedConversation.player_say_the_first = propertyObj.getChecked("conversation_edit_player_say_the_first");
                that.refreshPlayersSays();
                that.editConversationInBase(selectedConversation);
            }
        }        
    }    
    
    this.removeConversation = function() {
        that.removeConversationFromBase(selectedConversation); 
    }   
    
    this.callbackDeleteConversation = function() {
            var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
            var message2 = 'Are you sure you want to remove?'
                              
            if (globalChange.isExistsForName(selectedConversation.name, DELETED_ELEMENT_CONVERSATION)) { 
                message = message1
            } else {
                message = message2;
            }    
            window.close();    
            messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/pitems_title_icon.png" style="vertical-align:top;margin-top:6px;" /> Conversations', message,"Remove","Cancel",that.removeConversation);
    }
    
    this.addConversationToBase = function(element) {
        this.manageBase(element,"add_conversation");
    }
    this.editConversationInBase = function(element) {
        this.manageBase(element,"edit_conversation");        
    }
    this.removeConversationFromBase = function(element) {
        this.manageBase(element,"remove_conversation");        
    }

    this.manageBase = function(element,action) {
        element.action =  action;
        element.app_id =  appId; 
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: element,
            dataType: "text",
            success: function(resultData) {
                if (resultData) {
                    if (element.action == "add_conversation") {
                       element.id = resultData;
                    } else if (element.action == "edit_conversation") {   
                       globalChange.setCorrectForName(selectedConversation.prevName, EDIT_ELEMENT_CONVERSATION, selectedConversation.name);                  
                       that.refresh();
                    } else if (element.action == "remove_conversation") {
                        if (removeObjectFromObjectsArray(element, conversations)) {
                            globalChange.setCorrectForName(element.name, DELETED_ELEMENT_CONVERSATION);      
                            that.refresh();            
                            that.unselectConversation();      
                        }                                              
                    }
                }
            }
        });       
    } 
    
    
	this.globalIsExistsForName = function(name, typeAction) {
		if (name) {
			for(var i=0; i < conversations.length; i++) {
				if (conversations[i].image == name) {
					return true;
				}
                var tempActions = new Actions();
                tempActions.setByJSON(conversations[i].onclick, true);                
                if (tempActions.globalIsExistsForName(name, typeAction)) {
                    return true;
                }
			}
		}
		return false;
	}	
	
	this.globalSetCorrectForName = function(name, typeAction, newName) {
		if (name) {
			for(var i=0; i < conversations.length; i++) {
				var isChange = false;
				if (typeAction == DELETED_ELEMENT_IMAGE && conversations[i].image == name) {
					conversations[i].image = "";
					isChange = true;
				}
                if (typeAction == DELETED_ELEMENT_SOUND && conversations[i].sound == name) {
                    conversations[i].sound = "";
                    isChange = true;
                }				
                var tempActions = new Actions();
                tempActions.setByJSON(conversations[i].onclick, true);
                var json = tempActions.globalSetCorrectForName(name, typeAction, newName);      
                if (json) {
                    conversations[i].onclick = json;
                    isChange = true;
                }  								
				if (isChange) {
					this.editConversationInBase(conversations[i]);
				}
			}
		}
	}	
		
}
////////////////////
// ITEMS CONTAINER
// 

function ItemsContainer() {
    var that = this;
    var items = new Array();
    this.idDialogItems = "dialog_items";
    this.idShowDialogOpen = "dialog_items_open"
    this.idItemAdd = "item_add"; // button add Item
    this.idItemList = "item_list";  // section item list
    this.idItemEdit = "item_edit"; // section edit item
    this.idItemPreview = "item_preview"; // section item preview
    
    var qParentItemList = $("#"+this.idItemList);
    var qParentItemEdit = $("#"+this.idItemEdit);
    var qParentItemPreview = $("#"+this.idItemPreview);
    var selectedItem;               
	var correctSize = {width:0, height:0};
	var activeThumbnail;
	var activeBigImage;
	var callbackButtonOK;
	var callbackButtonOKData;	
        
    $("#"+this.idDialogItems).dialog({
        autoOpen: false,
        modal: true,
        width: 1050,
        height: 650,
        resizable: false,
        title: '<img src="/gamedesigner/media/img/pitems_title_icon.png" style="vertical-align:top;margin-top:6px;" /> <span class="title">ITEMS MANAGER</span>',
        buttons: {
            Save: function() { 
				console.log("Save");
				if (typeof callbackButtonOK === "function") {
				console.log("Save call");
					callbackButtonOK(callbackButtonOKData);
				}
                $( this ).dialog( "close" );
            },
        },
        close: function( event, ui ) {
            selectElement(activeElement.elementSelected);
        },    
        open: function(event, ui) {
            $('.ui-dialog-buttonpane')
            .find('button:contains("Save")')
            .removeClass('ui-button-text-only')
            .css('border',"0px")
            .css('background-color',"transparent")
            .html('<div class="dialog_img_save"></div>');            
        },                      
    });   
    
    this.itemsListName = function() {
        return arrayFromArrayParam(items,"name"); 
    }      
    
    $("#"+this.idItemAdd).click(function() {
        var nameItem = autonumerateForArrayWithString(that.itemsListName(),"item").name;
        selectedItem = that.addItem(false, undefined, nameItem,"","","");    
        that.refresh();    
    });
    
    $("#"+this.idShowDialogOpen).click(function() {
        that.showDialog(); 
    });
	
	this.setCallbackButtonOK = function(callback, data) {
		if (typeof callback === "function") {
			callbackButtonOK = callback;
		}
		if (data) {
			callbackButtonOKData = data;
		}
	}	
	
	this.setFocusForName = function(name) {
		 if (name) {
			selectedItem = objectFromParamAndValue(items, "name", name);
			that.refresh();
		 }
	}
    
	this.getFocus = function() {
		if (selectedItem) {
			return selectedItem.name;
		 }
	}	
        
    this.refresh = function() {
        // general
        qParentItemList[0].innerHTML = '<p class="dialog_section_title">Items list<p/>';
        qParentItemEdit[0].innerHTML = '<p class="dialog_section_title">Edit item<p/>';
        qParentItemPreview[0].innerHTML = '<p class="dialog_section_title">Preview<p/>';
        
        // list
        for (var i=0; i < items.length; i++) {
            var name = items[i].name;
            var className = "";
            if (selectedItem && selectedItem.name == name) {
                className = "selected"
            }
            var li = document.createElement("li");
            li.className = className;
            li.id = "ditems_id_list_item"+i;
            var p = document.createElement("p");
            p.innerHTML = name;
            li.appendChild(p);
            qParentItemList.append(li);
            $("#"+li.id).click(function() {
                 var pName = $(this).first();
                 var value = pName.text();
                 if (value) {
                    selectedItem = objectFromParamAndValue(items, "name", value);
                    that.refresh();
                 }
            });            
        }   
         
        // edit
        if(selectedItem) {
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            
            var liClass = "conversation_property"; 
            var srcAddBtn = "/gamedesigner/media/img/icon_sphere_green_add.png";             
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            var templateData = { widthAll: 370, leftWidth: 100 }            
            
            var propertyNameItemsEdit = new Property("item_edit_name","text","Name: ");
            propertyNameItemsEdit.setClassName(liClass);
            propertyNameItemsEdit.setTemplate(templateData.widthAll,templateData.leftWidth);
            var propertyThumbnailItemsEdit = new Property("item_edit_thumbnail","select","Thumbnail: 75x75px","");
            propertyThumbnailItemsEdit.setClassName(liClass);
            propertyThumbnailItemsEdit.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyThumbnailItemsEdit.setIconTooltip(imgIconTooltip,"This picture will be presented in user inventory.");                          
            propertyThumbnailItemsEdit.setOptionOfSelect(arrayWithFirstEmptyElement(application.imagesList));
            propertyThumbnailItemsEdit.showButtonDialog = true;
            propertyThumbnailItemsEdit.callbackButtonDialog = function(property) { 
                resourcesUpload[0].setFocusedElement(selectedItem.thumbnail); 
                openResourcesDialog(RESOURCES_TYPE_IMAGES);
                resourcesUpload[0].setButtonAndCallback("Set thumbnail", function() { 
                    that.callbackChangeItem(property, resourcesUpload[0].getFocusedElement().val());
                    $( "#dialog_resources" ).dialog( "close" ); 
                });            
            };                
            var propertyImageItemsEdit = new Property("item_edit_big_size_image","select","Image: 500x500px ","");
            propertyImageItemsEdit.setClassName(liClass);
            propertyImageItemsEdit.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyImageItemsEdit.setIconTooltip(imgIconTooltip,"This imagine will be visible when displaying detailed items information.");                                      
            propertyImageItemsEdit.setOptionOfSelect(arrayWithFirstEmptyElement(application.imagesList));
            propertyImageItemsEdit.showButtonDialog = true;
            propertyImageItemsEdit.callbackButtonDialog = function(property) { 
                resourcesUpload[0].setFocusedElement(selectedItem.bigsize_image); 
                openResourcesDialog(RESOURCES_TYPE_IMAGES);
                resourcesUpload[0].setButtonAndCallback("Set big size image", function() { 
                    that.callbackChangeItem(property, resourcesUpload[0].getFocusedElement().val());
                    $( "#dialog_resources" ).dialog( "close" ); 
                });            
            };                   
            var propertyDescriptionItemsEdit = new Property("item_edit_description",PROPERTY_TYPE_TEXTAREA,"Description: ");
            propertyDescriptionItemsEdit.setClassName(liClass);
            propertyDescriptionItemsEdit.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyDescriptionItemsEdit.styleRight = "width:240px;height:100px;"
            
            var propertyDeleteItemsEdit = new Property("item_edit_delete","image","");          
            propertyDeleteItemsEdit.setClassName(liClass);
            propertyDeleteItemsEdit.srcImg = "/gamedesigner/media/img/ditem_delete.png";
            propertyDeleteItemsEdit.setTemplate(templateData.widthAll,50);            
            
            
            qParentItemEdit[0].appendChild(propertyNameItemsEdit.getElement());
            qParentItemEdit[0].appendChild(propertyThumbnailItemsEdit.getElement());
            qParentItemEdit[0].appendChild(propertyImageItemsEdit.getElement());
            qParentItemEdit[0].appendChild(propertyDescriptionItemsEdit.getElement());
            qParentItemEdit[0].appendChild(propertyDeleteItemsEdit.getElement());
            
            propertyNameItemsEdit.setValue(selectedItem.name);
            propertyThumbnailItemsEdit.setValue(selectedItem.thumbnail);
            propertyImageItemsEdit.setValue(selectedItem.bigsize_image);
            propertyDescriptionItemsEdit.setValue(selectedItem.description);
			
			activeThumbnail = selectedItem.thumbnail;
			activeBigImage = selectedItem.bigsize_image;
            
            propertyNameItemsEdit.callbackChangeValue = this.callbackChangeItem;
            propertyThumbnailItemsEdit.callbackChangeValue = this.callbackChangeItem;
            propertyImageItemsEdit.callbackChangeValue = this.callbackChangeItem;
            propertyDescriptionItemsEdit.callbackChangeValue = this.callbackChangeItem;
            propertyDeleteItemsEdit.addAction(PROPERTY_ACTION_CLICK, this.callbackDeleteItem);            
                      
            propertyNameItemsEdit.refreshActions();        
            propertyThumbnailItemsEdit.refreshActions();        
            propertyImageItemsEdit.refreshActions();        
            propertyDescriptionItemsEdit.refreshActions();      
            propertyDeleteItemsEdit.refreshActions();                  
            
            // preview
            var htmlPreview = '';
            var thumbnailImg = "";
            if (selectedItem.thumbnail) {
                thumbnailImg += '<img src="/gamedesigner/media/upload/'+userId+'/img/'+selectedItem.thumbnail+'" style="width:75px;height:75px;vertical-align:top;">';
            } else {
                thumbnailImg += '<img src="/gamedesigner/media/img/no_image_border_dotted_line.png" style="vertical-align:top;">';
            }
            htmlPreview += ' <div><p class="title">Thumbnail:</p></div> <div style="text-align:center;">'+thumbnailImg+'</div><br />';

            var bigImg = "";
            if (selectedItem.bigsize_image) {
                bigImg += ' <img src="/gamedesigner/media/upload/'+userId+'/img/'+selectedItem.bigsize_image+'" style="width:280px;height:280px;vertical-align:top;">';
            } else {
                bigImg += '<img src="/gamedesigner/media/img/no_image_border_dotted_line.png" style="vertical-align:top;">';
            }
            htmlPreview += ' <div><p class="title">Image:</p></div> <div style="text-align:center;">'+bigImg+'</div><br />';
            qParentItemPreview[0].innerHTML += htmlPreview;
        }
    }
        
    this.showDialog = function() {
        this.refresh();
        $( "#"+this.idDialogItems ).dialog("open");
    }
    
    this.addItem = function(loaded, id, name, thumbnail, bigsize_image, description) {
        var objItem = {
            id: id,
            name: name,
            thumbnail: thumbnail,
            bigsize_image: bigsize_image,
            description: Convert.br2nl(specialCharsToHtml(description)),
        }                
        items.push(objItem);  
        if (!loaded) {
            this.addItemToBase(objItem);
        }           
        return objItem;
    }
    
    this.removeItem = function() {
       that.removeItemFromBase(selectedItem);
       /* if (removeObjectFromObjectsArray(selectedItem, items)) {
            that.refresh();            
            that.unselectItem();            
        }*/    
    }   
    
    this.callbackDeleteItem = function() {
        if (selectedItem) {
            var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
            var message2 = 'Are you sure you want to remove?'
                              
            if (globalChange.isExistsForName(selectedItem.name, DELETED_ELEMENT_ITEM)) {
                message = message1
            } else {
                message = message2;
            }        
            messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/pitems_title_icon.png" style="vertical-align:top;margin-top:6px;" /> Items', message, "Remove", "Cancel", that.removeItem);
        }
    }
	
	this.changeSizeImage = function() {
		if (selectedItem) {
			that.editItemInBase(selectedItem);
		}
	}
	
	this.cancelChangeSizeImage = function() {
		selectedItem.thumbnail = activeThumbnail;
		selectedItem.bigsize_image = activeBigImage;
		that.refresh();
	}

    this.messageWrongSizeOfImage = function(width, height) {
		if (width != correctSize.width || height != correctSize.height) {
			//messageDialog.setOptionsOfModal({height:250});
			messageDialog.showWithTwoButtons("Items - set image",'<span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>Image with '+correctSize.width+'x'+correctSize.width+' resolution is required here. Image you are trying to use is having wrong size. We may rescale the image but it can result with loosing quality.<br /><br /> Do you wish to continue? ',"Continue","Cancel", that.changeSizeImage, that.cancelChangeSizeImage);
			//messageDialog.setDefaultSize();
			//messageDialog.show("Items - set image",'<span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>The image is wrong size. It will be automatically resized to a resolution '+correctSize.width+'x'+correctSize.height+'px.',"OK");
		} else {
			that.editItemInBase(selectedItem);
		}
    }
		
	this.callbackSizeOfImage = function(size) {
		that.messageWrongSizeOfImage(size.width, size.height);
    }
    
    this.checkCorrectSizeOfImageAndShowInfo = function(filename) {        
        if(filename) {
			var fileInfo;
            fileInfo = new FileInfo("/gamedesigner/media/upload/"+appId+"/img/"+filename);
            fileInfo.sizeOfImage(this.callbackSizeOfImage);
		}
	}
    
    this.unselectItem = function() {
        selectedItem = undefined;
        this.refresh();
    }

    this.callbackChangeItem = function(propertyObj,value) {
        if (selectedItem) {
            if (propertyObj.id == "item_edit_name") { 
                if (isExistStringInArray(value, that.itemsListName()) == false) {
                    selectedItem.prevName = selectedItem.name;
                    selectedItem.name = value;
                    that.editItemInBase(selectedItem);
                } else {
                    messageDialog.show("Items","Duplicate name!");
                }            
            } else if (propertyObj.id == "item_edit_thumbnail") {
				correctSize.width = correctSize.height = 75;
				selectedItem.thumbnail = value;
				that.checkCorrectSizeOfImageAndShowInfo(value);				
            } else if (propertyObj.id == "item_edit_big_size_image") {
				correctSize.width = correctSize.height = 500;
				selectedItem.bigsize_image = value;
				that.checkCorrectSizeOfImageAndShowInfo(value);
            } else if (propertyObj.id == "item_edit_description") {
                selectedItem.description = value;
                that.editItemInBase(selectedItem);
            }     
        }  
    }       
    
    this.addItemToBase = function(element) {
        this.manageBase(element,"add_item");
    }
    this.editItemInBase = function(element) {
        this.manageBase(element,"edit_item");        
    }
    this.removeItemFromBase = function(element) {
        this.manageBase(element,"remove_item");        
    }

    this.manageBase = function(element,action) {
        element.action =  action;
        element.app_id = appId;
        element.description = Convert.nl2br(element.description);
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: element,
            dataType: "text",
            success: function(resultData) {
                if (resultData) {
                    if (element.action == "add_item") {
                       element.id = resultData;
                    } else if (element.action == "edit_item") {     
                       globalChange.setCorrectForName(selectedItem.prevName, EDIT_ELEMENT_ITEM, selectedItem.name);                  
                       that.refresh();
                    } else if (element.action == "remove_item") {
                        if (removeObjectFromObjectsArray(element, items)) {
                            globalChange.setCorrectForName(element.name, DELETED_ELEMENT_ITEM);         
                            that.refresh();            
                            that.unselectItem();   
                        }                          
                    }
                }
            }
        });   
        element.description = Convert.br2nl(element.description);    
    }
	
	this.globalIsExistsForName = function(name, typeAction) {
		if (name) {
			for(var i=0; i < items.length; i++) {
				if (typeAction == DELETED_ELEMENT_IMAGE && items[i].thumbnail == name || items[i].bigsize_image == name) {
					return true;
				}
			}
		}
		return false;
	}
	
	this.globalSetCorrectForName = function(name, typeAction, newName) {
		if (name) {
			for(var i=0; i < items.length; i++) {
				var isChange = false;
				if (typeAction == DELETED_ELEMENT_IMAGE && items[i].thumbnail == name) {
					items[i].thumbnail = "";
					isChange = true;
				}
				if (typeAction == DELETED_ELEMENT_IMAGE && items[i].bigsize_image == name) {
					items[i].bigsize_image = "";
					isChange = true;
				}
				if (isChange) {
					this.editItemInBase(items[i]);
				}
			}
		}
		return false;
	}
    
}
////////////////////
// POPUPS
// 

function PopupsContainer() {
    var that = this;    
    var popups = new Array();
    this.idDialog = "dialog_popups";     
    this.idShowDialogOpen = "dialog_popups_open"
         
    this.idPopupsAdd = "popups_add"; 
    this.idPopupsList = "popups_list"; 
    this.idPopupsEdit = "popups_edit"; 
    this.idPopupsPreview = "popups_preview";
    
    var qParentPopupsList= $("#"+this.idPopupsList);
    var qParentPopupsEdit = $("#"+this.idPopupsEdit);
    var selectedPopup;      
	var callbackButtonOK;
	var callbackButtonOKData;
		
    $( "#"+this.idDialog ).dialog({
        autoOpen: false,
        modal: true,
        width: 750,
        height: 650,
        resizable: false,
        title: '<img src="/gamedesigner/media/img/popups_title_icon.png" style="vertical-align:top;margin-top:6px;" /> <span class="title">POPUPS</span>',		
        buttons: {
            Save: function() { 
				if (typeof callbackButtonOK === "function") {
					callbackButtonOK(callbackButtonOKData);
				}
                $( this ).dialog( "close" );
            },
        },
        close: function( event, ui ) {
            selectElement(activeElement.elementSelected);
        },   
        open: function(event, ui) {
            $('.ui-dialog-buttonpane')
            .find('button:contains("Save")')
            .removeClass('ui-button-text-only')
            .css('border',"0px")
            .css('background-color',"transparent")
            .html('<div class="dialog_img_save"></div>');            
        },  		
    }); 
    
    var options = { id_actions: "popups_actions", 
                           id_actions_header: "popups_actions_header",
                           id_actions_tree: "popups_actions_tree",
                           id_actions_tree_option_prefix: "popups_tree_option",
                           id_actions_tree_element_: "popups_actions_tree_element_delete",
                           id_actions_parameters: "popups_actions_parameters",
                           id_actions_available: "popups_actions_available",
                           list_actions_available: new Array(ACTIONS_ONCLICK,
                            ACTIONS_SHOW_ELEMENT,ACTIONS_HIDE_ELEMENT,ACTIONS_RUN_XML, 
                            ACTIONS_SHOW_TPOPUP, ACTIONS_ITEM_SHOW_TPOPUP,
                            ACTIONS_PLAY_MP3,ACTIONS_STOP_MP3,ACTIONS_SHOW_IMAGE,
                            ACTIONS_TAKE_ITEM),                        
                          }
             
    var callbackPopupsChangeActions = function(myActions, json) {   
        if (selectedPopup && !myActions.globalAreAnyParametersEmpty()) {            
            console.log(json);
            selectedPopup.onclick = json;
            that.editPopupInBase(selectedPopup); 
        }
    }                 
                          				  						
    var popupActions = new Actions(options);	
    var onclickRoot = popupActions.getOnclick();
    onclickRoot.stringName = "BUTTONS"
    var onclickRootActions = new Array(ACTIONS_ITEM_SHOW_TPOPUP);
    onclickRoot.displayActions = onclickRootActions;
    onclickRoot.clickableActions = onclickRootActions;
    onclickRoot.enabledActions = onclickRootActions;
    
    popupActions.isAbsoluteParameters = false;
	popupActions.colorTree = "000";
	popupActions.propertyLiClass = "conversation_action_property";
    popupActions.callbackChangeActions = callbackPopupsChangeActions;
    popupActions.showActions(true);
    popupActions.showActionsAvailable(true);
    //popupActions.refresh();
    $("#"+options.id_actions).corner();
    $("#"+options.id_actions_parameters).corner();     
   	
    var tooltipActions = ' <img src="/gamedesigner/media/img/icon_question.png" title="....." style="cursor: help;vertical-align:bottom;margin-left:180px;" >';
    $("#"+options.id_actions_header+" p").append(tooltipActions);
      
    this.popupsListName = function() {
        return arrayFromArrayParam(popups,"name"); 
    }      
	
    this.popupForName = function(name) {
        return objectFromParamAndValue(popups, "name", name);
    }    	
	
    this.popupNameForId = function(id) {
        return paramFromParamAndValue(popups, "name", "id", id);
    }     
    this.popupIdForName = function(name) {
        return paramFromParamAndValue(popups, "id", "name", name);
    }   	
    
    $("#"+this.idPopupsAdd).click(function() {
        var tempName = autonumerateForArrayWithString(that.popupsListName(),"popup").name;
        selectedPopup = that.addPopup(false, undefined, tempName, "", "", "");  
        that.refresh();    
    });
    
    $("#"+this.idShowDialogOpen).click(function() {
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

        that.showDialog(); 
    });
	
	this.setCallbackButtonOK = function(callback, data) {
		if (typeof callback === "function") {
			callbackButtonOK = callback;
		}
		if (data) {
			callbackButtonOKData = data;
		}
	}	
	
	this.setFocusForName = function(name) {
		 if (name) {
			selectedPopup = objectFromParamAndValue(popups, "name", name);
			that.refresh();
		 }
	}
    
	this.getFocus = function() {
		if (selectedPopup) {
			return selectedPopup.name;
		 }
	}		
        
    this.refresh = function() {
        // general
        qParentPopupsList[0].innerHTML = '<p class="dialog_section_title">Popups list</p>';
        qParentPopupsEdit[0].innerHTML = '<p class="dialog_section_title">Edit Popup</p>';

        // list
        for (var i=0; i < popups.length; i++) {
            var name = popups[i].name;
            var className = "";
            if (selectedPopup && selectedPopup.name == name) {
                className = "selected"
            }
            var li = document.createElement("li");
            li.className = className;
            li.id = "popups_id_list_item"+i;
            var p = document.createElement("p");
            p.innerHTML = name;
            li.appendChild(p);
            qParentPopupsList.append(li);
            $("#"+li.id).click(function() {
                 var pName = $(this).first();
                 var value = pName.text();
                 if (value) {
                    selectedPopup = objectFromParamAndValue(popups, "name", value);
                    that.refresh();
                 }
            });            
        }   			      

        if(selectedPopup) {
            // edit
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            
            var liClass = "conversation_property"; 
            var srcAddBtn = "/gamedesigner/media/img/icon_sphere_green_add.png";             
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            var templateData = { widthAll: 370, leftWidth: 100 }            
			            
            var propertyName = new Property("popup_name_edit","text","Name: ","");
            propertyName.setClassName(liClass);			
            propertyName.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyName.setIconTooltip(imgIconTooltip,".....");
            var propertyTitle = new Property("popup_edit_title","text","Title: ","");
            propertyTitle.setClassName(liClass);			
            propertyTitle.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyTitle.setIconTooltip(imgIconTooltip,".....");
            var propertyDescription = new Property("popup_edit_description","textarea","Description: ","");
            propertyDescription.setClassName(liClass);			
            propertyDescription.setTemplate(templateData.widthAll,templateData.leftWidth);
			propertyDescription.styleRight = "width:240px;height:100px;"
            var propertyDelete = new Property("popup_edit_delete","image","");
            propertyDelete.setClassName(liClass);
            propertyDelete.srcImg = "/gamedesigner/media/img/popups_delete.png";
            propertyDelete.setTemplate(templateData.widthAll,50);    
			                                   
            qParentPopupsEdit[0].appendChild(propertyName.getElement());
            //qParentPopupsEdit[0].appendChild(propertyTitle.getElement());
            qParentPopupsEdit[0].appendChild(propertyDescription.getElement());
            qParentPopupsEdit[0].appendChild(propertyDelete.getElement());
            qParentPopupsEdit.append("<p class=\"horiz_line\"></p>"); 
            
            propertyName.setValue(selectedPopup.name);
            propertyTitle.setValue(selectedPopup.title);
            propertyDescription.setValue(selectedPopup.description);

            propertyName.callbackChangeValue = this.callbackChangePopup;
            propertyTitle.callbackChangeValue = this.callbackChangePopup;
            propertyDescription.callbackChangeValue = this.callbackChangePopup;                       
            propertyDelete.addAction(PROPERTY_ACTION_CLICK, this.callbackDeletePopup);

            propertyName.refreshActions();        
            propertyTitle.refreshActions();        
            propertyDescription.refreshActions();                    
            propertyDelete.refreshActions();
                                          
            // actions
            popupActions.setByJSON(selectedPopup.onclick);
            popupActions.showActions(true);
            
            $("#"+this.idParentUl).css("display","block");
            $("#"+this.idAddDialog).css("display","block"); 
            
        } else {
            popupActions.showActions(false);
            $("#"+this.idParentUl).css("display","none");
            $("#"+this.idAddDialog).css("display","none"); 
        }
    }    

    this.showDialog = function() {
        this.refresh();
        $( "#"+this.idDialog ).dialog("open");
    }
	
    this.addPopup = function(loaded, id, name, title, description, onclick) {
        var objPopup = {
            id: id,
            name: name,
            title: title,
            description: Convert.br2nl(specialCharsToHtml(description)),
            onclick: specialCharsToHtml(onclick),
        }     
        popups.push(objPopup);     
        if (!loaded) {
            this.addPopupToBase(objPopup);
        }      
        return objPopup;
    }    
    
    this.unselectPopup = function() {
        selectedPopup = undefined;
        this.refresh();
    }        
     
    this.callbackChangePopup = function(propertyObj,value) {
		if (selectedPopup) {
			if (propertyObj.id == "popup_name_edit") { 
				if (isExistStringInArray(value, that.popupsListName()) == false) {
				    selectedPopup.prevName = selectedPopup.name;
					selectedPopup.name = value;
					that.editPopupInBase(selectedPopup); 
				} else {
					messageDialog.show("Popups","Duplicate name!");
				}
			} else if (propertyObj.id == "popup_edit_title") {
                selectedPopup.title = value;
                that.editPopupInBase(selectedPopup);
            } else if (propertyObj.id == "popup_edit_description") {
                selectedPopup.description = value;
                that.editPopupInBase(selectedPopup);
            }
        }    
    }    
    
    this.removePopup = function() {
        that.removePopupFromBase(selectedPopup); 
    }   
    
    this.callbackDeletePopup = function() {
        var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
        var message2 = 'Are you sure you want to remove?'
                          
        if (globalChange.isExistsForName(selectedPopup.name, DELETED_ELEMENT_POPUP)) {
            message = message1
        } else {
            message = message2;
        }        
        messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/popups_title_icon.png" style="vertical-align:top;margin-top:6px;" /> Popups', message,"Remove","Cancel",that.removePopup);                       
    }
    
    this.addPopupToBase = function(element) {
        this.manageBase(element,"add_tpopup");
    }
    this.editPopupInBase = function(element) {
        this.manageBase(element,"edit_tpopup");        
    }
    this.removePopupFromBase = function(element) {
        this.manageBase(element,"remove_tpopup");        
    }

    this.manageBase = function(element,action) {
        element.action =  action;
        element.app_id =  appId;
		element.description = Convert.nl2br(element.description);
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: element,
            dataType: "text",
            success: function(resultData) {
                if (resultData) {
                    if (element.action == "add_tpopup") {
                       element.id = resultData;
                    } else if (element.action == "edit_tpopup") {     
                       globalChange.setCorrectForName(selectedPopup.prevName, EDIT_ELEMENT_POPUP, selectedPopup.name);                  
                       that.refresh();
                    } else if (element.action == "remove_tpopup") {
                        if (removeObjectFromObjectsArray(element, popups)) {
                            globalChange.setCorrectForName(element.name, DELETED_ELEMENT_POPUP);
                            that.refresh();            
                            that.unselectPopup();                                      
                        }                                              
                    }
                }
            }
        });       
    } 
    
    this.globalIsExistsForName = function(name, typeAction) {
        if (name) {
            for(var i=0; i < popups.length; i++) {
                var tempActions = new Actions();
                tempActions.setByJSON(popups[i].onclick, true);                
                if (tempActions.globalIsExistsForName(name, typeAction)) {
                    return true;
                }
            }
        }
        return false;
    }   
    
    this.globalSetCorrectForName = function(name, typeAction, newName) {
        if (name) {
            for(var i=0; i < popups.length; i++) {
                var isChange = false;
                var tempActions = new Actions();
                tempActions.setByJSON(popups[i].onclick, true);
                var json = tempActions.globalSetCorrectForName(name, typeAction, newName);      
                if (json) {
                    popups[i].onclick = json;
                    isChange = true;
                }                               
                if (isChange) {
                    this.editPopupInBase(popups[i]);
                }
            }
        }
    }    
    
}////////////////////
// SPREADSHEETS
// 

function SpreadsheetsContainer() {
    var that = this;    
    var spreadsheets = new Array();
    this.idDialog = "dialog_spreadsheets";     
    this.idShowDialogOpen = "dialog_spreadsheets_open"
         
    this.idSpreadsheetsAdd = "spreadsheets_add"; 
    this.idSpreadsheetsList = "spreadsheets_list"; 
    this.idSpreadsheetsEdit = "spreadsheets_edit"; 
    this.idSpreadsheetsExel = "spreadsheets_exel";
    
    var qParentSpreadsheetsList= $("#"+this.idSpreadsheetsList);
    var qParentSpreadsheetsEdit = $("#"+this.idSpreadsheetsEdit);
    var $spreadsheetsExel = $("#"+this.idSpreadsheetsExel);
    var selectedSpreadsheet;      
	//var callbackButtonOK;
	//var callbackButtonOKData;
		
    $( "#"+this.idDialog ).dialog({
        autoOpen: false,
        modal: true,
        width: 750,
        height: 650,
        resizable: false,
        title: '<span class="title">SPREADSHEETS</span>',		
        buttons: {
            Save: function() { 
				/*if (typeof callbackButtonOK === "function") {
					callbackButtonOK(callbackButtonOKData);
				}*/
                $( this ).dialog( "close" );
            },
        },
        close: function( event, ui ) {
            //selectElement(activeElement.elementSelected);
        },   
        open: function(event, ui) {
            /*$('.ui-dialog-buttonpane')
            .find('button:contains("Save")')
            .removeClass('ui-button-text-only')
            .css('border',"0px")
            .css('background-color',"transparent")
            .html('<div class="dialog_img_save"></div>');
            */            
        },  		
    }); 
    
    $spreadsheetsExel.handsontable({
        minRows: 12,
        minCols: 6, 
        startRows: 12,
        startCols: 6,
        minSpareRows: 1,
        minSpareCols: 1,  
        colHeaders: function(index) { 
            return index;
        },
        rowHeaders: function(index) { 
            return index;
        },
        //rowHeaders: true,
        contextMenu: true,
        afterChange: function (change, source) {
            if (source === 'loadData') { //
                //var data = $spreadsheetsExel.data('handsontable');                
                return; //don't save this change
            } else {
                if (selectedSpreadsheet) {
                    selectedSpreadsheet.change
                }
            }
        },
    }); 
       
    this.getSpreadsheets = function() {
        return spreadsheets; 
    }          
                   				  						
    this.spreadsheetsListName = function() {
        return arrayFromArrayParam(spreadsheets,"name"); 
    }      
	
    this.spreadsheetsForName = function(name) {
        return objectFromParamAndValue(spreadsheets, "name", name);
    }    	
	
    this.spreadsheetsNameForId = function(id) {
        return paramFromParamAndValue(spreadsheets, "name", "id", id);
    }     
    this.spreadsheetsIdForName = function(name) {
        return paramFromParamAndValue(spreadsheets, "id", "name", name);
    }   	
    
    $("#"+this.idSpreadsheetsAdd).click(function() {
        var tempName = autonumerateForArrayWithString(that.spreadsheetsListName(),"spreadsheet").name;
        selectedSpreadsheet = that.addSpreadsheet(false, undefined, tempName, [[]]);  
        that.refresh();    
    });
    
    $("#"+this.idShowDialogOpen).click(function() {
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
        
        that.showDialog(); 
    });
	
	/*this.setCallbackButtonOK = function(callback, data) {
		if (typeof callback === "function") {
			callbackButtonOK = callback;
		}
		if (data) {
			callbackButtonOKData = data;
		}
	}
	
	this.setFocusForName = function(name) {
		 if (name) {
			selectedPopup = objectFromParamAndValue(popups, "name", name);
			that.refresh();
		 }
	}
    
	this.getFocus = function() {
		if (selectedPopup) {
			return selectedPopup.name;
		 }
	}	*/   	
        
    this.refresh = function() {
        // general
        qParentSpreadsheetsList[0].innerHTML = '<p class="dialog_section_title">Spreadsheets list</p>';
        qParentSpreadsheetsEdit[0].innerHTML = '<p class="dialog_section_title">Edit spreadsheet</p>';

        // list
        for (var i=0; i < spreadsheets.length; i++) {
            var name = spreadsheets[i].name;
            var className = "";
            if (selectedSpreadsheet && selectedSpreadsheet.name == name) {
                className = "selected"
            }
            var li = document.createElement("li");
            li.className = className;
            li.id = "spreadsheets_id_list_item"+i;
            var p = document.createElement("p");
            p.innerHTML = name;
            li.appendChild(p);
            qParentSpreadsheetsList.append(li);
            $("#"+li.id).click(function() {
                 var pName = $(this).first();
                 var value = pName.text();
                 if (value) {
                    selectedSpreadsheet = objectFromParamAndValue(spreadsheets, "name", value);
                    that.refresh();
                 }
            });            
        }   			      

        if(selectedSpreadsheet) {
            // edit
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            
            var liClass = "conversation_property"; 
            var srcAddBtn = "/gamedesigner/media/img/icon_sphere_green_add.png";             
            var imgIconTooltip = "/gamedesigner/media/img/icon_question.png";
            var templateData = { widthAll: 370, leftWidth: 100 }            
			            
            var propertyName = new Property("spreadsheet_name_edit","text","Name: ","");
            propertyName.setClassName(liClass);			
            propertyName.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyName.setIconTooltip(imgIconTooltip,".....");
            /*var propertyTitle = new Property("popup_edit_title","text","Title: ","");
            propertyTitle.setClassName(liClass);			
            propertyTitle.setTemplate(templateData.widthAll,templateData.leftWidth);
            propertyTitle.setIconTooltip(imgIconTooltip,".....");
            var propertyDescription = new Property("popup_edit_description","textarea","Description: ","");
            propertyDescription.setClassName(liClass);			
            propertyDescription.setTemplate(templateData.widthAll,templateData.leftWidth);
			propertyDescription.styleRight = "width:240px;height:100px;"
			*/
            var propertyDelete = new Property("spreadsheet_edit_delete","image","");
            propertyDelete.setClassName(liClass);
            propertyDelete.srcImg = "/gamedesigner/media/img/ditem_delete.png";
            propertyDelete.setTemplate(templateData.widthAll,50);   
            
			                                   
            qParentSpreadsheetsEdit[0].appendChild(propertyName.getElement());
            //qParentPopupsEdit[0].appendChild(propertyTitle.getElement());
            //qParentPopupsEdit[0].appendChild(propertyDescription.getElement());
            qParentSpreadsheetsEdit[0].appendChild(propertyDelete.getElement());
            //qParentPopupsEdit.append("<p class=\"horiz_line\"></p>");
                        
            propertyName.setValue(selectedSpreadsheet.name);
            /*propertyTitle.setValue(selectedPopup.title);
            propertyDescription.setValue(selectedPopup.description);*/
           
            $spreadsheetsExel.handsontable('loadData', selectedSpreadsheet.data);

            propertyName.callbackChangeValue = this.callbackChangeSpreadsheet;
           /* propertyTitle.callbackChangeValue = this.callbackChangePopup;
            propertyDescription.callbackChangeValue = this.callbackChangePopup;    */                   
            propertyDelete.addAction(PROPERTY_ACTION_CLICK, this.callbackDeleteSpreadsheet);

            propertyName.refreshActions();        
           /* propertyTitle.refreshActions();        
            propertyDescription.refreshActions();  */                  
            propertyDelete.refreshActions();
                                          
            // actions
            $("#"+this.idParentUl).css("display","block");
            $("#"+this.idAddDialog).css("display","block");
            $("#"+this.idSpreadsheetsExel).css("display","block"); 
        } else {
            $("#"+this.idParentUl).css("display","none");
            $("#"+this.idAddDialog).css("display","none"); 
            $("#"+this.idSpreadsheetsExel).css("display","none"); 
        }
    }    

    this.showDialog = function() {
        this.refresh();
        $( "#"+this.idDialog ).dialog("open");
    }
	
    this.addSpreadsheet = function(loaded, id, name, data) {
        var objSpreadsheet = {
            id: id,
            name: name,
            data: data,
        }     
        spreadsheets.push(objSpreadsheet);     
        if (!loaded) {
            this.addSpreadsheetToBase(objSpreadsheet);
        }      
        return objSpreadsheet;
    }    
    
    this.unselectSpreadsheet = function() {
        selectedSpreadsheet = undefined;
        this.refresh();
    }        
     
    this.callbackChangeSpreadsheet = function(propertyObj,value) {
		if (selectedSpreadsheet) {
			if (propertyObj.id == "spreadsheet_name_edit") { 
				if (isExistStringInArray(value, that.spreadsheetsListName()) == false) {
				    selectedSpreadsheet.prevName = selectedSpreadsheet.name;
					selectedSpreadsheet.name = value;
					that.editSpreadsheetInBase(selectedSpreadsheet); 
				} else {
					messageDialog.show("Spreadsheets","Duplicate name!");
				}
			} /*else if (propertyObj.id == "popup_edit_title") {
                selectedPopup.title = value;
                that.editPopupInBase(selectedPopup);
            } else if (propertyObj.id == "popup_edit_description") {
                selectedPopup.description = value;
                that.editPopupInBase(selectedPopup);
            }*/
        }    
    }    
    
    this.removeSpreadsheet = function() {
        if (selectedSpreadsheet) {
            that.removeSpreadsheetFromBase(selectedSpreadsheet);
        } 
    }   
    
    this.callbackDeleteSpreadsheet = function() {
        var message1 = ''+globalChange.stringSystemIsAlreadyUsed()+' Are you sure you want to remove?';;
        var message2 = 'Are you sure you want to remove?'
                    
       /// if (globalChange.isExistsForName(selectedPopup.name, DELETED_ELEMENT_SPREADSHEET)) {
        //    message = message1
        //} else {
            message = message2;
        //}        
        messageDialog.showWithTwoButtons('<img src="/gamedesigner/media/img/popups_title_icon.png" style="vertical-align:top;margin-top:6px;" /> Spreadsheets', message,"Remove","Cancel",that.removeSpreadsheet);                    
    }
    
    this.addSpreadsheetToBase = function(element) {
        this.manageBase(element,"add_spreadsheet");
    }
    this.editSpreadsheetInBase = function(element) {
        this.manageBase(element,"edit_spreadsheet");        
    }
    this.removeSpreadsheetFromBase = function(element) {
        this.manageBase(element,"remove_spreadsheet");        
    }

    this.manageBase = function(element,action) {
        element.action =  action;
        element.app_id =  appId;
		//element.description = Convert.nl2br(element.description);
        $.ajax({ 
            type: 'POST',
            url: "/gamedesigner/post/",
            data: element,
            dataType: "text",
            success: function(resultData) {
                if (resultData) {
                    if (element.action == "add_spreadsheet") {
                       element.id = resultData;
                    } else if (element.action == "edit_spreadsheet") {     
                       //globalChange.setCorrectForName(selectedSpreadsheet.prevName, EDIT_ELEMENT_SPREADSHEET, selectedSpreadsheet.name);                  
                       that.refresh();
                    } else if (element.action == "remove_spreadsheet") {
                        if (removeObjectFromObjectsArray(element, popups)) {
                            //globalChange.setCorrectForName(element.name, DELETED_ELEMENT_SPREADSHEET);
                            that.refresh();            
                            that.unselectSpreadsheet();                                      
                        }                                              
                    }
                }
            }
        });       
    } 
    
    /*this.globalIsExistsForName = function(name, typeAction) {
        if (name) {
            for(var i=0; i < popups.length; i++) {
                var tempActions = new Actions();
                tempActions.setByJSON(popups[i].onclick, true);                
                if (tempActions.globalIsExistsForName(name, typeAction)) {
                    return true;
                }
            }
        }
        return false;
    }   
    
    this.globalSetCorrectForName = function(name, typeAction, newName) {
        if (name) {
            for(var i=0; i < popups.length; i++) {
                var isChange = false;
                var tempActions = new Actions();
                tempActions.setByJSON(popups[i].onclick, true);
                var json = tempActions.globalSetCorrectForName(name, typeAction, newName);      
                if (json) {
                    popups[i].onclick = json;
                    isChange = true;
                }                               
                if (isChange) {
                    this.editPopupInBase(popups[i]);
                }
            }
        }
    }  */ 
    
}////////////////////
// HINTS CONTAINER
// 

function HintsContainer() {
    var that = this;
    var hints = new Array();
    this.idDialogHints = "dialog_hints";
    this.idShowDialogOpen = "dialog_hints_open"
    this.idDialogHintCorner = "dialog_hints_corner"
    this.idHintList = "hint_list";
    this.idHintEdit = "hint_edit";
    
    var qParentHintList = $("#"+this.idHintList);
    var qParentHintEdit = $("#"+this.idHintEdit);
    var selectedHint;               
        
    $("#"+this.idDialogHints).dialog({
        autoOpen: false,
        modal: true,
        width: 490,
        height: 360,
        resizable: false,
        buttons: {
            OK: function() { 
                $( this ).dialog( "close" );
            },
        },
        close: function( event, ui ) {
            selectElement(activeElement.elementSelected);
        },                 
    });   
    
    this.hintsListName = function() {
        return arrayFromArrayParam(hints,"name"); 
    }      
    
    this.callbackAddHint = function(){
        var value = $("#hint_items").val();        
        if (value) {
            if (isExistStringInArray(value, that.hintsListName()) == false) {
                selectedHint = that.addHint(value);    
                that.refresh(); 
            } else {
                messageDialog.show("Hints","Duplicate name!");
            }            
        } else {
            messageDialog.show("Hints","Item list is empty. The first created an item.");
        }
    };
    
    $("#"+this.idShowDialogOpen).click(function() {
        that.showDialog(); 
    });
        
    this.refresh = function() {
        
        // general
        qParentHintList[0].innerHTML = '<p class="dialog_section_title">Hints list<br /> <span class="hint_possess_item">If possess item:</span><p/>';
        qParentHintEdit[0].innerHTML = '<p class="dialog_section_title">Edit hint<p/>';               
        
        qParentHintList.parent().corner(""); 
        qParentHintEdit.parent().corner(""); 
        
        // list
        var propertyItems = new Property("hint_items","select","");
        propertyItems.setTemplate(100,5);
        propertyItems.styleRight = "width:110px;"        
        propertyItems.setOptionOfSelect(itemsContainer.itemsListName());                
        
        var propertyHintsList = new Property("hint_list_select","select","");
        propertyHintsList.setTemplate(100,5);
        propertyHintsList.selectSize = 8;
        propertyHintsList.styleRight = "width:110px;"
        propertyHintsList.setOptionOfSelect(that.hintsListName());

        var propertyAddHint= new Property("hint_add","button","");
        propertyAddHint.setTemplate(100,30);
        propertyAddHint.addAction(PROPERTY_ACTION_CLICK, this.callbackAddHint);        
        propertyAddHint.value = "Add hint";
        
        qParentHintList[0].appendChild(propertyItems.getElement());
        qParentHintList[0].appendChild(propertyAddHint.getElement());
        qParentHintList.append("<hr style='width:115px;margin:0px;padding:0px;' />");
        qParentHintList[0].appendChild(propertyHintsList.getElement());

        if(selectedHint) {
            propertyHintsList.setValue(selectedHint.name);
        }      

        propertyAddHint.callbackChangeValue = this.callbackChangeHint;
        propertyHintsList.callbackChangeValue = this.callbackChangeHint;
                        
        propertyItems.refreshActions();
        propertyAddHint.refreshActions();
        propertyHintsList.refreshActions();
                
        if(selectedHint) {
            // edit
            var propertyNameHintsEdit = new Property("hint_edit_name","select","Item: ");
            propertyNameHintsEdit.setTemplate(180, 80)
            propertyNameHintsEdit.styleRight = "width:200px;"
            var propertyDescriptionHintsEdit = new Property("hint_edit_description","textarea","Text: ");
            propertyDescriptionHintsEdit.setTemplate(180, 80)
            propertyDescriptionHintsEdit.styleRight = "width:200px;height:120px;"
            var propertyDeleteHintsEdit = new Property("hint_edit_delete","button","");
            propertyDeleteHintsEdit.value ="Delete hint";
            propertyDeleteHintsEdit.addAction(PROPERTY_ACTION_CLICK, this.callbackDeleteHint);
            
            propertyNameHintsEdit.setOptionOfSelect(itemsContainer.itemsListName()); 
            
            qParentHintEdit[0].appendChild(propertyNameHintsEdit.getElement());
            qParentHintEdit[0].appendChild(propertyDescriptionHintsEdit.getElement());
            qParentHintEdit[0].appendChild(propertyDeleteHintsEdit.getElement());

            propertyNameHintsEdit.setValue(selectedHint.name);
            propertyDescriptionHintsEdit.setValue(selectedHint.text);
                            
            propertyNameHintsEdit.callbackChangeValue = this.callbackChangeHint;
            propertyDescriptionHintsEdit.callbackChangeValue = this.callbackChangeHint;
                      
            propertyNameHintsEdit.refreshActions();        
            propertyDescriptionHintsEdit.refreshActions();      
            propertyDeleteHintsEdit.refreshActions();                  
        }
    }
        
    this.showDialog = function() {
        this.refresh();
        $( "#"+this.idDialogHints ).dialog("open");
    }
    
    this.addHint = function(hintName, text) {        
        var objHint = {
            name: hintName,
            text: text
        }                
        hints.push(objHint);     
        this.addHintToBase(objHint);           
        return objHint;
    }
     
    this.removeHint = function() {
        //that.removeHintFromBase(selectedHint); // TODO potem dac
        if (removeObjectFromObjectsArray(selectedHint, hints)) {
            that.refresh();            
            that.unselectHint();            
        }    
    }   
     
    this.callbackDeleteHint = function() {
        messageDialog.showWithTwoButtons("Hints",'<span class="ui-icon ui-icon-alert" style="float: left; margin: 0 7px 20px 0;"></span>Are you sure you want to remove?',"Remove","Cancel",that.removeHint);
    }
    
    this.unselectHint = function() {
        selectedHint = undefined;
        this.refresh();
    }
    
    this.callbackChangeHint = function(propertyObj,value) {
        if (propertyObj.id == "hint_list_select") {
            selectedHint = objectFromParamAndValue(hints, "name", value);
        } else if (selectedHint && propertyObj.id == "hint_edit_name") { 
            if (isExistStringInArray(value, that.hintsListName()) == false) {
                selectedHint.name = value;
                that.editHintInBase(selectedHint);
            } else {
                messageDialog.show("Hints","Duplicate name!");
            }
        } else  if (selectedHint && propertyObj.id == "hint_edit_description") {
            selectedHint.text = value;
            that.editHintInBase(selectedHint);
        }        
        that.refresh(); // TODO potem usunac po bazie
    }       
    
    this.addHintToBase = function(element) {
        this.manageBase(element,"add_hint");
    }
    this.editHintInBase = function(element) {
        this.manageBase(element,"edit_hint");        
    }
    this.removeHintFromBase = function(element) {
        this.manageBase(element,"remove_hint");        
    }

    this.manageBase = function(element,action) {
        element.action =  action;
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: element,
            dataType: "text",
            success: function(resultData) {
                if (resultData) {
                    if (element.action == "add_hint") {
                       element.id = resultData;
                    } else if (element.action == "edit_hint") {                       
                       that.refresh();
                    } else if (element.action == "remove_hint") {
                       var index = hints.indexOf(element);
                       if (index>=0) {
                           hints.splice(index, 1);
                            that.unselectHint();
                       }                       
                    }
                }
            }
        });       
    }
    
}
////////////////////
// GLOBAL CHANGE

var DELETED_ELEMENT_IMAGE = 1;
var DELETED_ELEMENT_SOUND = 2;
var DELETED_ELEMENT_ITEM = 3;
var DELETED_ELEMENT_CONVERSATION = 4;
var DELETED_ELEMENT_POPUP = 5;
var DELETED_ELEMENT_CLICKABLE_AREA = 6;

var EDIT_ELEMENT_IMAGE = 101;
var EDIT_ELEMENT_SOUND = 102;
var EDIT_ELEMENT_ITEM = 103;
var EDIT_ELEMENT_CONVERSATION = 104;
var EDIT_ELEMENT_POPUP = 105;
var EDIT_ELEMENT_CLICKABLE_AREA = 106;

function GlobalChange() {
  
	this.stringSystemIsAlreadyUsed = function() {
		return "The system is already used this name.<br />";
	}
  
	this.isExistsForName = function(name, typeAction) {
		if (name) {
            var isGlobalBoards = application.globalIsExistsForName(name, typeAction);                   
            var isGlobalClickableArea = canvas.globalIsExistsForName(name, typeAction);                   
			var isGlobalItems = itemsContainer.globalIsExistsForName(name, typeAction);
            var isGlobalConversations = conversationsContainer.globalIsExistsForName(name, typeAction);
            var isGlobalPopups = popupsContainer.globalIsExistsForName(name, typeAction);
					
			var exists = isGlobalBoards || isGlobalClickableArea || isGlobalItems || isGlobalConversations || isGlobalPopups;					
			return exists;
		} else {
			return false;
		}
	}
	
	this.setCorrectForName = function(name, typeAction, newName) {  // name when empty then action parameters to delete
		if (name) {
		    application.globalSetCorrectForName(name, typeAction, newName);
            canvas.globalSetCorrectForName(name, typeAction, newName);
			itemsContainer.globalSetCorrectForName(name, typeAction, newName);
            conversationsContainer.globalSetCorrectForName(name,typeAction, newName);
            popupsContainer.globalSetCorrectForName(name,typeAction, newName);
		} 
	}
	
	this.isExistsSoundForName = function(name) {
		if (name) {
			var isGlobalConversationsSound = conversationsContainer.globalIsExistsSoundForName(name);
					
			var exists = isGlobalConversationsSound;
					
			return exists;
		} else {
			return false;
		}
	}	
	
}////////////////////
// FILE INFO


function FileInfo(path) {
    this.path = path;
    
    this.setFilepath = function(path) {
        this.path = path;
    }
      
    this.getFilename = function() {
        if (this.path) {
            var array = this.path.split("/");
            if (array.length > 1) {
                return array[array.length-1];
            }
        }
        return "";
    }      
      
    this.getExtension = function() {
        if (this.path) {
            var array = this.path.split(".");
            if (array.length > 1) {
                return array[array.length-1];
            }
        }
        return "";
    }
    
    this.sizeOfImage = function(callbackFunction) {
        var size = { width: 0, height: 0 }
        if (isExistStringInArray(this.getExtension(),new Array("jpg","jpeg","png","gif","bmp"))) {
            var image = document.createElement("img");
            image.src = this.path;
            if (image) {
                image.onload = function() {
                    size.width = image.width;
                    size.height = image.height;
                    if (typeof callbackFunction === "function") {
                        callbackFunction(size);
                    }
                }        
            }
        } 
        return size;
    }
    
    // Convert dataURL to Blob object
    this.dataURLtoBlob = function(dataURL, type) {  //'image/png
          
      var extension = this.getExtension();
      if (!type && extension) {
          switch(extension) {
              case "image/png": type = extension; break;
              case "image/jpeg": type = extension; break;
              case "image/gif": type = extension; break;
              case "image/tiff": type = extension; break;
          }
      }
    
      var binary = atob(dataURL.split(',')[1]);
      var array = [];
      for(var i = 0; i < binary.length; i++) {
          array.push(binary.charCodeAt(i));
      }
      return new Blob([new Uint8Array(array)], {type: type});
    }   
    
    this.sendDataURLToServer = function(url, dataURL, options, callback) {
        var file = this.dataURLtoBlob(dataURL);
        //var size= file.size;
        
        var fd = new FormData();        
        fd.append("data", file, this.getFilename());  
        fd.append("response_type", "OK");  
        console.log(this.getFilename());      
                           
        if (options) {
            if (options.type) {
                fd.append("type", options.type);
            }
            if (options.loader_id) {
                fd.append("loader_id", options.loader_id);
            }       
            if (options.user_id) {
                fd.append("user_id", options.user_id);
            }                   
        }    

        // And send it
        $.ajax({
           url: url,
           type: "POST",
           data: fd,
           processData: false,
           contentType: false,
        }).done(function(respond){
            if (typeof callback === "function") {
                callback();
            }
        });        
        
    }  
      
}
////////////////////
// MESSAGE DIALOG
// 

function MessageDialog(idDialog) {
    var that = this;
    var qMessageDialog = $("#"+idDialog);    
    var userInfo = new Object();
    
    qMessageDialog.dialog({
      autoOpen: false,
      resizable: false,
	  width: 350,
      height:250,
      modal: true,
      dialogClass: "message_dialog"
    });
       
    this.setOptionsOfModal = function(options) {
        qMessageDialog.dialog(options);
    }
    
    this.hideClose = function() {
        qMessageDialog.parent().children().children('.ui-dialog-titlebar-close').hide();
    }
    
//    
	
	/*this.setDefaultSize = function() {
		this.setOptionsOfModal({height:180});
	}*/
	
    this.setPositionCenter = function() {
        qMessageDialog.dialog("widget").position({
           my: 'left',
           at: 'right',
           of: window
        });     
    }
    
    this.setPositionRight = function(pos) {
        qMessageDialog.dialog("widget").css(pos);  
    }
    
    this.showCustom = function(title, message, buttonsArray) {
        qMessageDialog.html(message);
        qMessageDialog.dialog({
            title: title,
            position: { my: 'center', at: 'center' }
        });        
        var objButtons = {};
                
        for(var i=0; i < buttonsArray.length; i++) {
            objButtons[buttonsArray[i].name] = buttonsArray[i].callback;
        }
        //console.log(objButtons);
        qMessageDialog.dialog({ buttons: objButtons });        
        qMessageDialog.dialog("open");
        qMessageDialog.css("z-index","999999");
    }
    
    this.show = function(title, message, btnName, callback, userInfo) {
        if (!btnName) {
            btnName = "OK";
        }
        var btn = { name: btnName, callback: function() { 
            if (typeof callback === "function") { callback(userInfo); } that.close(); } 
        };
        var buttonsArray = new Array(btn);
        that.showCustom(title, message, buttonsArray);      
    }    

    this.showWithTwoButtons = function(title, message, btnName1, btnName2, call1, call2, userInfo ) {
        if (!btnName1) {
            btnName1 = "OK";
        }
        if (!btnName2) {
            btnName2 = "Cancel";
        }
        var btn1 = { name: btnName1, callback: function() { 
            if (typeof call1 === "function") { call1(userInfo); }  that.close(); } 
        };
        var btn2 = { name: btnName2, callback: function() { 
            if (typeof call2 === "function") { call2(userInfo); }  that.close(); } 
        };
        var buttonsArray = new Array(btn1,btn2);        
        that.showCustom(title, message, buttonsArray);      
    }
       
    this.close = function() {
        qMessageDialog.dialog("close");
    }
}
////////////////////
// MESSAGES

var Messages = {
    tutorialWrong: function() {
        if (sequencesSystem.isSequenceActive) { 
            messageDialog.show("Tutorial", "Wykonaj dzialania z tutoriala.","OK");
        } 
    }
}
////////////////////
// CROP IMAGE

function CropImage() {
	var that = this;
    var idDialog = "dialog_crop_image";     
    var idOpenDialog = "open_dialog_crop_image"
    var idCroppedImage = "cropped_image"
    var idCroppedPreview = "cropped_preview"
    var idCroppedImagePreview = "cropped_image_preview"
    var idCroppedProperty = "cropped_property";
    var idCroppedDstResolution = "cropped_dst_resolution";
    
    var jIdDialog = $("#"+idDialog);
    var jIdOpenDialog = $("#"+idOpenDialog);    
    var jIdCroppedImage = $("#"+idCroppedImage);    
    var jIdCroppedPreview = $("#"+idCroppedPreview);
    var jIdCroppedImagePreview = $("#"+idCroppedImagePreview);
    var jIdCroppedProperty = $("#"+idCroppedProperty);
    var jIdCroppedDstResolution = $("#"+idCroppedDstResolution);
    
    var propertiesCropped = new Array();
    
    var c_items = new Array();
    var c_item_thumb = { name: "cropped_upload_item_thumb", width: 75, height: 75, free_cropping: false }; c_items.push(c_item_thumb);
    var c_item_image = { name: "cropped_upload_item_image", width: 500, height: 500, free_cropping: false }; c_items.push(c_item_image);
    var c_background = { name: "cropped_upload_background", width: 720, height: 1220, free_cropping: false }; c_items.push(c_background);
    var c_free_cropping = { name: "cropped_upload_free_cropping", width: 1, height: 1, free_cropping: true }; c_items.push(c_free_cropping);
      
    
    var pathToSrc;
    var image;
    var canvas;
    var context;
    
    var openAfterLoad = false;
    var freeCropping = false;
    this.callbackSaveCrop;    
    var callbackSetImg;    

    var ratioWorkToOriginal;
            
    var sizeOriginalImage = { width:undefined, height: undefined }  // original image     
    var sizeWorkImage = { width:undefined, height: undefined }   // image scaled from original image  
    this.sizeMaxPreview = { width: 220, height: 280} // size of preview image 
    this.sizeDstImage = { width:75, height: 75 }   // size of destination image to save
    
    this.setIdDialog = function(id) {
        if (id) {
            idDialog = id;
            jIdDialog = $("#"+idDialog);
        }
    }
    this.setIdOpenDialog = function(id) {
        if (id) {
            idOpenDialog = id;
            jIdOpenDialog = $("#"+idOpenDialog);
        }
    }    
    this.setIdCroppedImage = function(id) {
        if (id) {
            idCroppedImage = id;
            jIdCroppedImage = $("#"+idCroppedImage);
        }
    }  
    this.setIdCroppedPreview = function(id) {
        if (id) {
            idCroppedPreview = id;
            jIdCroppedPreview = $("#"+idCroppedPreview);
        }
    }  
    this.setIdCroppedImagePreview = function(id) {
        if (id) {
            idCroppedImagePreview = id;
            jIdCroppedImagePreview = $("#"+idCroppedImagePreview);
        }
    }  
    this.setIdCroppedProperty = function(id) {
        if (id) {
            idCroppedProperty = id;
            jIdCroppedProperty = $("#"+idCroppedProperty);
        }
    }    
    this.setIdCroppedDstResolution = function(id) {
        if (id) {
            idCroppedDstResolution = id;
            jIdCroppedDstResolution = $("#"+idCroppedDstResolution);
        }
    }        
      
  
    this.createDialog = function(id) {
        if (jIdDialog && jIdCroppedImage) {
            jIdDialog.dialog({
                autoOpen: false,
                resizable: false,
                modal: true,
                title: '<span class="title">CROP THE IMAGE</span>',                
                width: 900,
                height: 650, 
                close: function( event, ui ) {
                    jIdCroppedImage.imgAreaSelect({ remove:true});
                },      
            });   
        }
        
        if (!canvas) {
            canvas = document.createElement("canvas");
            document.getElementById("canvasImg").appendChild(canvas);
            $("#canvasImg").css("display","none");
        }
                  
        
        if (jIdCroppedProperty) {        
            //jIdCroppedProperty[0].appendChild("Upload type:");
        
            var croppedLiClass = "cropped_property";
            var templateData = { widthAll: 300, leftWidth: 150 }

            propertiesCropped[0] = new Property("cropped_upload_item_thumb", PROPERTY_TYPE_RADIO, "Item thumbnail: [75x75]");
            propertiesCropped[0].setClassName(croppedLiClass); 
            propertiesCropped[0].setTemplate(templateData.widthAll,templateData.leftWidth);
            propertiesCropped[0].callbackChangeValue = callbackChangeValueProperty;
            propertiesCropped[1] = new Property("cropped_upload_item_image", PROPERTY_TYPE_RADIO, "Item image: [500x500]");
            propertiesCropped[1].setClassName(croppedLiClass); 
            propertiesCropped[1].setTemplate(templateData.widthAll,templateData.leftWidth);
            propertiesCropped[1].callbackChangeValue = callbackChangeValueProperty;
            propertiesCropped[2] = new Property("cropped_upload_background", PROPERTY_TYPE_RADIO, "Background: [720x1220]");
            propertiesCropped[2].setClassName(croppedLiClass); 
            propertiesCropped[2].setTemplate(templateData.widthAll,templateData.leftWidth);
            propertiesCropped[2].callbackChangeValue = callbackChangeValueProperty;   
            propertiesCropped[3] = new Property("cropped_save","image","");
            propertiesCropped[3].setClassName(croppedLiClass);
            propertiesCropped[3].setTemplate(templateData.widthAll,60);
            propertiesCropped[3].srcImg = "/gamedesigner/media/img/dialog_save_btn.png";            
            propertiesCropped[3].addAction(PROPERTY_ACTION_CLICK, callbackPropertySave);
            
            propertiesCropped[4] = new Property("cropped_upload_free_cropping", PROPERTY_TYPE_RADIO, "Free cropping");
            propertiesCropped[4].setClassName(croppedLiClass); 
            propertiesCropped[4].setTemplate(templateData.widthAll,templateData.leftWidth);
            propertiesCropped[4].callbackChangeValue = callbackChangeValueProperty;
            
            
            jIdCroppedProperty[0].appendChild(propertiesCropped[0].getElement());
            jIdCroppedProperty[0].appendChild(propertiesCropped[1].getElement());
            jIdCroppedProperty[0].appendChild(propertiesCropped[2].getElement());
            jIdCroppedProperty[0].appendChild(propertiesCropped[4].getElement());                       
            jIdCroppedProperty.append("<br />");
            jIdCroppedProperty[0].appendChild(propertiesCropped[3].getElement());                       
            
            for(var i=0; i < propertiesCropped.length; i++) {
                propertiesCropped[i].refreshActions();
            }          
        }
    }    	
    
    var setPropertiesVisible = function() {
        for(var i=0; i < c_items.length; i++ ) {
            console.log(c_items[i].name+"_parent");
            console.log($("#"+c_items[i].name+"_parent"));
            $("#"+c_items[i].name+"_parent").css("display","none");            
        }
        for(var i=0; i < c_items.length; i++ ) {
            if ((sizeOriginalImage.width >= c_items[i].width && sizeOriginalImage.height >= c_items[i].height) || c_items[i].free_cropping) {
                $("#"+c_items[i].name+"_parent").css("display","block");            
            }
        }
    }
    
    var callbackChangeValueProperty = function(propertyObj,value) {
        selectOption(propertyObj.id);
    }
    
    var callbackPropertySave = function() {
        that.saveCroppedToFile();
    }
    
    var selectOption = function(id) {
        var maxSizePreview = 260;
        if (id == "cropped_upload_item_thumb") {
            freeCropping = false;
            that.sizeMaxPreview = { width: maxSizePreview, height: maxSizePreview} 
            that.sizeDstImage = { width:75, height: 75 }  
            propertiesCropped[0].setCheckbox(true); 
        } else if (id == "cropped_upload_item_image") {
            freeCropping = false;
            that.sizeMaxPreview = { width: maxSizePreview, height: maxSizePreview} 
            that.sizeDstImage = { width:500, height: 500 }
            propertiesCropped[1].setCheckbox(true);   
        } else if (id == "cropped_upload_background") {
            freeCropping = false;
            that.sizeMaxPreview = { width: maxSizePreview, height: maxSizePreview} 
            that.sizeDstImage = { width:720, height: 1220 }
            propertiesCropped[2].setCheckbox(true);    
        } else if (id == "cropped_upload_free_cropping") {
            freeCropping = true;
            that.sizeMaxPreview = { width: maxSizePreview, height: maxSizePreview}
            that.sizeDstImage = { width:0, height: 0 }
            propertiesCropped[4].setCheckbox(true);                
        }   
        setPropertiesVisible();
        prepareWorkspace();
    } 
    
    this.openDialog = function() {
        if (jIdDialog) {
            jIdDialog.dialog("open");
            selectOption("cropped_upload_item_thumb");
        } 
    }
    
    this.closeDialog = function() {
        if (jIdDialog) {
            jIdDialog.dialog("close");
        } 
    }    
    
    this.setImageSrc = function(src, callback, _openAfterLoad) {
        if (jIdCroppedImage && src) {
            // get image info
            image = document.createElement("image");
            image.src = src;
            pathToSrc = src;
            callbackSetImg = callback;
            openAfterLoad = _openAfterLoad;
            
            // set image  
            jIdCroppedImage[0].src = src;
            //jIdCroppedImagePreview[0].src = src;

            jIdCroppedImage.load(function(){    
                
                if (jIdOpenDialog && jIdCroppedImage) {
                    jIdOpenDialog.click(function(){            
                        that.openDialog();                   
                    });   
                }                
                                            
                var fileInfo = new FileInfo(src);
                fileInfo.sizeOfImage(callbackSizeOfImage);
                console.log("CropImage: image "+$(this).attr('src') + ' loaded.');
            }).error(function(){ 
                console.log("CropImage: image "+$(this).attr('src') + ' not loaded.');
            });            
        }
    }   
    
    var callbackSizeOfImage = function(size) {
        sizeOriginalImage.width = size.width;
        sizeOriginalImage.height = size.height;    
        if (typeof callbackSetImg === "function") {
            callbackSetImg();
        }        
        if (openAfterLoad) {
            that.openDialog();
        }
    }
    
    var changeParameters = function(selection) {
        jIdCroppedImage.css({ "max-width": "550px", "max-height": "500px"  });     
        jIdCroppedPreview.css({ "max-width": that.sizeMaxPreview.width+"px", "max-height": that.sizeMaxPreview.height+"px" });        

        // clear old canvas
        context = canvas.getContext('2d');
        context.clearRect ( 0 , 0 , canvas.width , canvas.height );
        
        // prepare new canvas
        canvas.width = that.sizeDstImage.width;
        canvas.height = that.sizeDstImage.height;
        context = canvas.getContext('2d'); 
        
        sizeWorkImage = calculateAspectRatioFit(sizeOriginalImage.width, sizeOriginalImage.height, jIdCroppedImage.width(), jIdCroppedImage.height());
        ratioWorkToOriginal = sizeWorkImage.width / sizeOriginalImage.width;

        if (freeCropping && selection) {
            that.sizeDstImage.width =  (selection.width /ratioWorkToOriginal);
            that.sizeDstImage.height =  (selection.height /ratioWorkToOriginal);
        }

        console.log(jIdCroppedImage.width());
        console.log(sizeWorkImage);
        console.log(ratioWorkToOriginal); 
    }
	
    var prepareWorkspace = function() {
                     
        changeParameters(); 
        //jIdCroppedImagePreview.css({ "max-width": ""+that.sizeDstImage.width+"px", "max-height": ""+that.sizeDstImage.height+"px" });                
        
        jIdCroppedImage.parent().css({"text-align": "center"});
        jIdCroppedImage.mouseenter(function(){
            refreshImgAreaSelect();
        }); 
        refreshImgAreaSelect();               
    } 	
	
    var refreshImgAreaSelect = function() {
                
        var sizeWorkAreaSelected = { width: that.sizeDstImage.width * ratioWorkToOriginal, height: that.sizeDstImage.height * ratioWorkToOriginal}
        console.log(sizeWorkAreaSelected);
        console.log(ratioWorkToOriginal);
        
        jIdCroppedImage.imgAreaSelect({ remove:true});
        var handles = false;
        var resizable = false;
        if (freeCropping) {
            handles = true;
            resizable = true;
        }      
        jIdCroppedImage.imgAreaSelect({ 
            aspectRatio: that.sizeDstImage.width+':'+that.sizeDstImage.height,
            resizable: resizable, 
            handles: handles,
            show: true,
            minWidth: sizeWorkAreaSelected.width,
            minHeight: sizeWorkAreaSelected.height,
            maxWidth: sizeWorkAreaSelected.width,
            maxHeight: sizeWorkAreaSelected.height,
            x1: sizeWorkImage.width/2 - sizeWorkAreaSelected.width/2,
            y1: sizeWorkImage.height/2 - sizeWorkAreaSelected.height/2,
            x2: sizeWorkImage.width/2 + sizeWorkAreaSelected.width - (sizeWorkAreaSelected.width)/2,
            y2: sizeWorkImage.height/2 + sizeWorkAreaSelected.height - (sizeWorkAreaSelected.height)/2,
            fadeSpeed: 150, 
            onInit: preview, 
            onSelectChange: preview, 
        }); 
    }		
     	    	  			
    var preview = function(img, selection) {
        if (!selection.width || !selection.height)
            return;
            
        // selection.width /ratioWorkToOriginal <- correct size (from original)    
        changeParameters(selection);
        
        var scaleX = that.sizeDstImage.width / (selection.width/ratioWorkToOriginal);
        var scaleY = that.sizeDstImage.height / (selection.height/ratioWorkToOriginal);
        
        var posX =  -Math.round(scaleX * (selection.x1/ratioWorkToOriginal));
        var posY =  -Math.round(scaleY * (selection.y1/ratioWorkToOriginal));
        var width =  Math.round(scaleX * sizeOriginalImage.width);
        var height =  Math.round(scaleY * sizeOriginalImage.height);
        
        context.clearRect ( 0 , 0 , canvas.width , canvas.height );
        context.drawImage(jIdCroppedImage[0], posX, posY, width, height);
        jIdCroppedImagePreview[0].src = canvas.toDataURL();
        
        var scX = (that.sizeMaxPreview.width / (that.sizeDstImage.width*1.1));
        var scY = (that.sizeMaxPreview.height / (that.sizeDstImage.height*1.1));
        console.log(scX);
        console.log(that.sizeMaxPreview.width);
        console.log(that.sizeDstImage.width);
        jIdCroppedImagePreview.css({ "max-width": ""+scX*that.sizeDstImage.width+"px", "max-height": ""+scY*that.sizeDstImage.height+"px" });
        jIdCroppedDstResolution.text(that.sizeDstImage.width.toFixed(0)+"x"+that.sizeDstImage.height.toFixed(0));
        
        /*$('#preview img').css({
            width: Math.round(scaleX * sizeOriginalImage.width),
            height: Math.round(scaleY * sizeOriginalImage.height),
            marginLeft: -Math.round(scaleX * selection.x1),
            marginTop: -Math.round(scaleY * selection.y1)
        });*/
        
        console.log("scale(x,y):"+scaleX.toFixed(2)+","+scaleY.toFixed(2)+"  sel x1:"+selection.x1+" sel y1:"+selection.y1+" x2:"+selection.x2+" y2:"+selection.y2+" sel width:"+selection.width+" sel heigt:"+selection.height);
        console.log("posX:"+posX+" posY:"+posY+" width:"+width+" height:"+height);    
        //context.drawImage(jIdCroppedImage[0], posX, posY, width, height);
    }    
    
    this.saveCroppedToFile = function() {
        if(canvas) {
            var fileInfo =  new FileInfo(pathToSrc);
            fileInfo.sendDataURLToServer("/gamedesigner/uploadfile/",canvas.toDataURL(),{type:RESOURCES_TYPE_IMAGES, loader_id: resourcesUpload[0].name, user_id: userId }, function(){
                that.closeDialog();
                if (typeof that.callbackSaveCrop === "function") {
                    that.callbackSaveCrop();
                }                            
            });
        }
    }    	
    	
    		
}
////////////////////
// CODE EDITOR Definitions

function CodeEditorDefinitions() {    
    
   this.createDefinitionObj = function() {
        var definitionObj = {
            newObject: false,   // true|false
            objectType: undefined,  // {ELEMENT_TYPE_CLICKABLE_AREA, ELEMENT_TYPE_LABEL , undefined - nie porpawna definicja  etc}
            codeType: undefined, // {STATEMENT_CODE_TYPE_EQUAL, STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA, STATEMENT_CODE_TYPE_NEW_TEXTFIELD etc}
            variable: undefined, // variable name ->  variable.parameter = value
            parameter: undefined, // {"name", "x", "y", "width", "height", "image", "visible", etc. }
            value: undefined, // value of parameter,
            lineNumber: -1
        };
        return definitionObj;
   }       
    
    this.areCorrectOfDefinitions = function(definitions) {
        for(var i=0; i < definitions.length; i++) {
            var definition = definitions[i];
            if (definition.objectType == ELEMENT_TYPE_CLICKABLE_AREA) {
                if (definition.codeType == STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA) {
                    if (!definition.variable.isCorrectVariable()) {
                        return false;
                    }                
                }
            }
            if (definition.objectType == ELEMENT_TYPE_TEXT) {
                if (definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTFIELD) {
                    if (!definition.variable.isCorrectVariable()) {
                        return false;
                    }                
                }
            }    
            if (definition.objectType == ELEMENT_TYPE_TEXTEDIT) {
                if (definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTEDIT) {
                    if (!definition.variable.isCorrectVariable()) {
                        return false;
                    }                
                }
            } 
            if (definition.objectType == ELEMENT_TYPE_BUTTON) {
                if (definition.codeType == STATEMENT_CODE_TYPE_NEW_BUTTON) {
                    if (!definition.variable.isCorrectVariable()) {
                        return false;
                    }                
                }
            }
        }
        return true;
    }
    
    this.deleteObjectOnCanvasWithoutDefinitions = function(definitions) {
        var elementsList = canvas.getElementsList();
        for(var i=0; i < elementsList.length; i++) {
            
            if (elementsList[i].dataset.designScreenId == currentScreenId) {            
                var nameElement = elementsList[i].dataset.designName;
                var idElement = elementsList[i].dataset.designId;
                var typeElement = elementsList[i].dataset.designType;
                var isFind = false;
                
                for(var j=0; j < definitions.length; j++) {
                    var definition = definitions[j];
                    if (definition.codeType == STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA ||
                        definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTFIELD ||
                        definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTEDIT ||
                        definition.codeType == STATEMENT_CODE_TYPE_NEW_BUTTON) {
                            if (nameElement == definition.variable) {
                               isFind = true; 
                               break;
                            } 
                        }                
                }
                
                if (isFind == false && typeElement && idElement) {
                    removeObject(elementsList[i], typeElement);
                } 
            }
        }
    }
            
    this.setObjectOnCanvasByDefinitions = function(definitions) {        
        var result = {
            isCorrect: true,
            errorLineNumber: -1,
            //name: "",
            //typeCode: ""
        }
        
        // array to pick up all founded changed parameters, to change it in one update 
        var objectsNameToUpdateParams = []; 
        function __localAddNewObject(element) {
            if (!isExistStringInArray(element, objectsNameToUpdateParams)) {
                objectsNameToUpdateParams.push(element);
            }             
        }        
        
        var objectsActions = [];  // [{ variable,  action = [{type,action,name}] }, (...)]
        function __localAddNewAction(variable, action) {
            var isWasAdded = false;
            for(var i=0; i < objectsActions.length; i++) {
                if (objectsActions[i].variable == variable) {
                    objectsActions[i].actions.push(action);
                    isWasAdded = true;
                }
            }
            if (!isWasAdded) {
                var objRes = {
                    actions: [],
                };
                objRes.variable = variable;
                objRes.actions.push(action);
                objectsActions.push(objRes);
            }
        }
        
        this.deleteObjectOnCanvasWithoutDefinitions(definitions);

        // update objects on canvas
        for(var i=0; i < definitions.length; i++) {
            var definition = definitions[i],
                elementActive = Editor.objectByName(definition.variable);
            
            var type = definition.objectType; // first search type for new created object
            if (!type) { // if not searched, maybe this object was created a moment ago
                type = (elementActive)?elementActive.type:undefined;
            }
            
            if (type == ELEMENT_TYPE_CLICKABLE_AREA || 
                type == ELEMENT_TYPE_TEXT || 
                type == ELEMENT_TYPE_TEXTEDIT ||
                type == ELEMENT_TYPE_BUTTON) {
                
                if (definition.codeType == STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA ||
                    definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTFIELD ||
                    definition.codeType == STATEMENT_CODE_TYPE_NEW_TEXTEDIT ||
                    definition.codeType == STATEMENT_CODE_TYPE_NEW_BUTTON) {
                        
                    var elementCanvas = canvas.getElementForName(definition.variable);
                    
                    if (!elementCanvas) {    
                         AJAX_ASYNC = false; // execute post performs each            
                         createObjectOnCanvas(type, {
                             x_pos: 0, 
                             y_pos: 0, 
                             width:0, 
                             height: 0, 
                             visible: 1, 
                             name: definition.variable,
                             callbacks: {
                                 updateInBase: function() {
                                     // UPDATED
                                 }
                             }
                             });                             
                         AJAX_ASYNC = true; // execute post performs each       
                    } else {
                        var element = (elementActive)?elementActive.getElement():null;
                        if (element) {
                            setStyleOfElement(element, {
                                //area_image: "",
                                //x_pos: 0,
                                //y_pos: 0,
                                //width: 0,
                                //height: 0,
                            });                            
                            __localAddNewObject(element);
                            // set empty for json actions                            
                            var tempActions = new Actions();                            
                            element.dataset.designActions =  tempActions.getByJSON();
                            // refresh active tree
                            if (activeElement && element == activeElement.elementSelected) {
                                actions.setByJSON(tempActions.getByJSON(), false);
                            } 
                        }                            
                    }                        
                }
                if (definition.codeType == STATEMENT_CODE_TYPE_EQUAL) {
                    var elementCanvas = canvas.getElementForName(definition.variable);
                    if (elementCanvas && elementCanvas.dataset.designScreenId == currentScreenId) {
                        var object = Editor.objectByName(definition.variable);
                        if (object && definition.parameter) {                      
                            var element = object.getElement();
           
                            if (!element || !element.dataset) {
                                continue;
                            }
                            
                            if (definition.parameter == "image" && element.dataset.designAreaImage != definition.value) {
                                setStyleOfElement(element, {area_image: definition.value});
                                __localAddNewObject(element);
                            }
                            if (definition.parameter == "background" && element.dataset.designBackgroundImage != definition.value) {
                                setStyleOfElement(element, {background_image: definition.value});
                                __localAddNewObject(element);
                            }
                            if (definition.parameter == "x" && element.dataset.designXPos != definition.value) {
                                setStyleOfElement(element, {x_pos: definition.value});
                                __localAddNewObject(element);
                            }
                            if (definition.parameter == "y" && element.dataset.designYPos != definition.value) {
                                setStyleOfElement(element, {y_pos: definition.value});
                                __localAddNewObject(element);
                            }         
                            if (definition.parameter == "width" && element.dataset.designWidth != definition.value) {
                                setStyleOfElement(element, {width: definition.value});
                                __localAddNewObject(element);
                            }                              
                            if (definition.parameter == "height" && element.dataset.designHeight != definition.value) {
                                setStyleOfElement(element, {height: definition.value});
                                __localAddNewObject(element);
                            }         
                            if (definition.parameter == "text" && element.dataset.designText != definition.value) {
                                setStyleOfElement(element, {text: definition.value});
                                __localAddNewObject(element);
                            }                                           
                            if (definition.parameter == "fontType" && element.dataset.designFontType != definition.value) {
                                setStyleOfElement(element, {font_type: definition.value});
                                __localAddNewObject(element);
                            }                                           
                            if (definition.parameter == "fontSize" && element.dataset.designFontSize != definition.value) {
                                setStyleOfElement(element, {font_size: definition.value});
                                __localAddNewObject(element);
                            }                                           
                            if (definition.parameter == "textColor" && element.dataset.designTextColor != definition.value) {
                                setStyleOfElement(element, {text_color: definition.value});
                                __localAddNewObject(element);
                            }                                                                                 
                            if (definition.parameter == "visible" && element.dataset.designVisible != definition.value) {
                                setStyleOfElement(element, {visible: definition.value});
                                __localAddNewObject(element);
                            }                              
                        }              
                    }
                }  
                if (definition.codeType == STATEMENT_CODE_TYPE_ACTION) {
                    __localAddNewAction(definition.variable, definition.action);   
                }
            } else {
                result.isCorrect = false;
                if (result.errorLineNumber < 0) {
                    result.errorLineNumber = definitions[i].lineNumber;
                    //result.name
                }
            }
        } // end of definitions loop

        // update objects actions
        for(var i=0; i < objectsActions.length; i++) {
            var objAct = objectsActions[i];
            if (objAct.variable) {
                var tempActions = new Actions();                
                for(var j=0; j < objAct.actions.length; j++) {
                    var _action = objAct.actions[j],
                        tempObjBoard = new BoardObjectAction();
                    tempObjBoard.actions = tempActions;                    
                    tempObjBoard.addAction(_action.type, {action:_action.action, name:_action.name, key:_action.key});
                    //updateActionsByTypeAction(_action.type, {action:_action.action, name:_action.name}, tempActions); 
                }
               
                var elementActive = Editor.objectByName(objAct.variable);
                if (elementActive && elementActive.getElement()) {
                    var element = elementActive.getElement();
                    element.dataset.designActions = tempActions.getByJSON();
                    __localAddNewObject(element); 
                    // refresh active tree
                    if (activeElement && element == activeElement.elementSelected) {
                        actions.setByJSON(tempActions.getByJSON(), false);
                    }                           
                    console.log("upd: "+element.dataset.designActions);
                }                
                
            }
        }
        
        //var objectsActions = [];  // [{ variable,  action = [{type,action,name}] }, (...)]
        
        // update objects in base
        for(var i=0; i < objectsNameToUpdateParams.length; i++) { 
            updateObject(objectsNameToUpdateParams[i], objectsNameToUpdateParams[i].dataset.designType);
        }
      
        return result;
    }
    
    this.getDefinitionsOfNewObject = function(statementCode) {        
        var code = statementCode;        
        /*var regExpCA = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(ClickableArea\\(\\);)");                
        var regExpLabel = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(Label\\(\\);)");                
        var regExpTE = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(TextEdit\\(\\);)");                
        var regExpButton = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(Button\\(\\);)");*/                
        var codeWithoutVar = code.searchAndSubstring("var"),          
            definition = undefined;
        //codeWithoutVar = codeWithoutVar.searchAndSubstring("EMU.");
            
        var isCA = code.match(codeEditor.templates.regExpDeclarationNewClickableArea());// || code.match(codeEditor.templates.regExpEMUNewClickableArea());    
        var isLabel = code.match(codeEditor.templates.regExpDeclarationNewTextField());// || code.match(codeEditor.templates.regExpEMUNewTextField());    
        var isTE = code.match(codeEditor.templates.regExpDeclarationNewTextEdit());// || code.match(codeEditor.templates.regExpEMUNewTextEdit())    
        var isBtn = code.match(codeEditor.templates.regExpDeclarationNewButton());// || code.match(codeEditor.templates.regExpEMUNewButton());    
                                
        if ((isCA || isLabel || isTE || isBtn) && codeWithoutVar != code) {
            code = codeWithoutVar.trim();
            stat = code.split(" ");
            if (stat.length > 0) {
                var variable = stat[0].trim();                
                definition = { newObject:true, variable: variable, parameter: undefined, value: undefined  }
               
                if (isCA) {
                    definition.codeType = STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA;
                    definition.objectType = ELEMENT_TYPE_CLICKABLE_AREA;
                }
                if (isLabel) {
                    definition.codeType = STATEMENT_CODE_TYPE_NEW_TEXTFIELD;
                    definition.objectType = ELEMENT_TYPE_TEXT;
                }
                if (isTE) {
                    definition.codeType = STATEMENT_CODE_TYPE_NEW_TEXTEDIT;
                    definition.objectType = ELEMENT_TYPE_TEXTEDIT;                    
                }
                if (isBtn) {
                    definition.codeType = STATEMENT_CODE_TYPE_NEW_BUTTON;
                    definition.objectType = ELEMENT_TYPE_BUTTON;
                }
            } 
        }
        return definition;
    }
    
    this.definitionsFromCode = function(_code) {    
        var statements = Editor.statements.statementFromCode(_code);    
        var definitions = new Array();  
        // definition form  { type:new|equal  variable  objectType:Clickable Area  parameter  value}
        
        for(var i=0; i < statements.length; i++) {
            var statement = statements[i];
            var code = statement.code;
            var stat;               
            
            var typeStatement =  Editor.statements.getStatementCodeType(code);
            
            var definitionAnyObject = this.getDefinitionsOfNewObject(code);                   
            if (definitionAnyObject) {
                definitionAnyObject.lineNumber = statement.lineNumber;
                definitionAnyObject.code = code;
                definitions.push(definitionAnyObject);
            } else if (typeStatement == STATEMENT_CODE_TYPE_EQUAL) { 
               var variable;
                var pararameter;
                var value; 
                var isEqual = false;
                
                var stat = code.split(".");
                if (stat.length > 1) {
                    variable = stat[0].trim();
                    stat.shift();
                    code = stat.join(".");
                    
                    stat = code.split("=");
                    if (stat.length > 1) {
                       parameter = stat[0].trim(); 
                       stat.shift();
                       code = stat.join("=");
    
                       stat = code.split(";");
                       stat[0] = stat[0].replaceAll("\""," ");
                       value = stat[0].trim();
                       isEqual = true
                    }
                }
               if (isEqual && variable && parameter && value) {
                    //console.log(variable+" "+parameter+" "+value);
                    definitions.push({
                        codeType: STATEMENT_CODE_TYPE_EQUAL,
                        variable: variable,
                        objectType: (Editor.objectByName(variable))?Editor.objectByName(variable).type:undefined,
                        parameter: parameter,
                        value: value,
                        lineNumber: statement.lineNumber,
                        code: code
                    });                
                }
            } else if (typeStatement == STATEMENT_CODE_TYPE_ACTION) {
                var variable;
                var stat = code.split(".");
                if (stat.length > 1) {
                    variable = stat[0].trim();
                }
                
                definitions.push({
                    codeType: STATEMENT_CODE_TYPE_ACTION,
                    variable: variable,
                    objectType: (Editor.objectByName(variable))?Editor.objectByName(variable).type:undefined,
                    lineNumber: statement.lineNumber,
                    code: code,
                    action: statement.action
                });
            } else {
                // undefined statement, probably error
                definitions.push({lineNumber: statement.lineNumber}); 
            }
        }
        return definitions;
    }    
    
}
////////////////////
// CODE EDITOR Statements

var STATEMENT_CODE_TYPE_EQUAL = "qual";
var STATEMENT_CODE_TYPE_INCREMENT = "increment";
var STATEMENT_CODE_TYPE_DECREMENT = "decrement";
var STATEMENT_CODE_TYPE_SUM = "sum+=";
var STATEMENT_CODE_TYPE_MINUS = "sum-=";
var STATEMENT_CODE_TYPE_MULTI = "sum*=";
var STATEMENT_CODE_TYPE_DIV = "sum/=";
var STATEMENT_CODE_TYPE_ACTION = "action";
var STATEMENT_CODE_TYPE_UNDEFINED = "undefined_object";
var STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA = "new_clickable_area";
var STATEMENT_CODE_TYPE_NEW_TEXTFIELD = "new_textfield";
var STATEMENT_CODE_TYPE_NEW_TEXTEDIT = "new_textedit";
var STATEMENT_CODE_TYPE_NEW_BUTTON = "new_button";

function CodeEditorStatements() {
    var that = this;
    
   this.createStatementObj = function() {
        var statementObj = {
            code: "", // code of single statemenlineNumbert or block as statement
            lineNumber: -1, // line of statement 
            type: undefined, // {"class", "function", "function_prototype", "for", "if", "var", "statement", etc} 
            codeType: undefined, // {STATEMENT_CODE_TYPE_EQUAL, STATEMENT_CODE_TYPE_ACTION, STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA, STATEMENT_CODE_TYPE_NEW_TEXTFIELD etc}
            lineNumberEnd: -1, // end of line
            
            // optional =>  varObj:{name, value, objectType:(Array, Object, other)}
            // optional =>  ifObj:{conditional}
        };
        return statementObj;
   }           
    
    this.getStatementCodeType = function(statementCode) { 
        /*var regExpCA = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(ClickableArea\\(\\);)");                
        var regExpLabel = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(Label\\(\\);)");                
        var regExpTE = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(TextEdit\\(\\);)");                
        var regExpBtn = new Array("(var)\\s*[^=]*=\\s*(new)\\s*(Button\\(\\);)");                
        var equal = new RegExp("[^=]=\\s*(\"[^\"]*\"|[\\d]+);");  //[^=]=\s*("[^"]*"|\d*); // RegExp("={1}[^=]*[^{]*");
        var actionRegExp = new RegExp("[\\w]*.addAction\\([^\\)]*\\);");  
        */       
        if (statementCode.match(codeEditor.templates.regExpDeclarationNewClickableArea())) {
            return STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationNewTextField())) {
            return STATEMENT_CODE_TYPE_NEW_TEXTFIELD;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationNewTextEdit())) {
            return STATEMENT_CODE_TYPE_NEW_TEXTEDIT;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationNewButton())) {
            return STATEMENT_CODE_TYPE_NEW_BUTTON;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationSum())) {
            return STATEMENT_CODE_TYPE_SUM;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationMinus())) {
            return STATEMENT_CODE_TYPE_MINUS;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationMulti())) {
            return STATEMENT_CODE_TYPE_MULTI;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationDiv())) {
            return STATEMENT_CODE_TYPE_DIV;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationEqual())) {
            return STATEMENT_CODE_TYPE_EQUAL;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationIncrement())) {
            return STATEMENT_CODE_TYPE_INCREMENT;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationDecrement())) {
            return STATEMENT_CODE_TYPE_DECREMENT;
        } else if (statementCode.match(codeEditor.templates.regExpDeclarationAddAction())) {
            return STATEMENT_CODE_TYPE_ACTION;
        } else {
            return STATEMENT_CODE_TYPE_UNDEFINED;
        }
    }
    
    /*this.codeWithoutSingleComments =function(linesCode) {
        var result = new Array();
        for(var iLine=0; iLine < linesCode.length; iLine++) {
            var lineArray = linesCode[iLine].split("//");
            if (lineArray.length > 0) {
                result.push(lineArray[0]);
            } else {
                result.push(linesCode[iLine]);
            }
        }
        return result;        
    }*/
    
    this.removeComments = function(string) {               
        var matched = string.match(/\/\*(.|\n)*?\*\//g, ""),
            lCount = 0;
        if (matched) {
            for(var i=0; i < matched.length; i++) {
                lCount =  matched[i].split("\n").length;
                var seriesNL = new Array(lCount).join("\n");
                string = string.replace(matched[i], seriesNL);            
            }
        }
        //console.log(m1);
        string = string.replace(/\/\/.*?\n/g, "\n"); 
        return string;
    }
    
    
    this.getFunctionNameFromStatement = function(statement) {
        if (statement.type == "function") {
            var code = statement.code;
            var functionName = code.beetweenStrings(new RegExp("function\\s*",""), "\\(");
            functionName = functionName.replace(new RegExp("function\\s*",""), "");
            var functionArgs = code.beetweenStrings("\\(", "\\)");   
        }
        return functionName+"("+functionArgs+")";
    } 
    
    this.getClassNameFromStatement = function(statement) {
        if (statement.type == "class") {
            var code = statement.code;
             
            var classNameExp = new RegExp("class\\s*","");
            code = code.replace(classNameExp,"");
            var classNameArray = code.split(" ");
            if (classNameArray.length>0) {
                return classNameArray[0];
            }
        }
        return "";
    }
    
    this.getVarObjFromStatement = function(statement) {
        var varObj = {};
        if (statement.type == "var" && statement.code && statement.code.trim()) {
            var code = statement.code;
            
            var varTypeDeclar =  code.beetweenStrings(/var\s*/,";"),
                varTypeEquals =  code.beetweenStrings(/var\s*/,"=");///[=+\-*\\]/);
                
            if (varTypeDeclar) { varTypeDeclar = varTypeDeclar.trim();}
            if (varTypeEquals) { varTypeEquals = varTypeEquals.trim();}            
            varObj.name = varTypeEquals || varTypeDeclar;
            
            
            var objectType = statement.code.beetweenStrings("new","\\(").trim();
            varObj.objectType = objectType;
            if (objectType == "Array") {
                
                var params = ParserJS.betweenCharsWithoutString(statement.code, "(",")"),
                    arrParr = params.split(","); 
                varObj.params = [];
                for(var i=0; i < arrParr.length; i++) {
                    arrParr[i] = arrParr[i].trim();
                    if (arrParr[i]) {
                        varObj.params.push(arrParr[i]);
                    }
                }                
                //var params = statement.code.beetweenStrings("\\(","\\)",-2).trim();
                //varObj.params = params.split(",");
            } else {
                var value = statement.code.beetweenChars("=",";").trim();
                varObj.value = value;                
            }
        } else if (statement.type == "statement") {
            // XX = YY; XX += YY; XX -= YY;   etc
            var sts = /[A-Za-z0-9_-]*\s*[=+\-*\\]{0,2}\s*[^;]*;/,         //  /[A-Za-z0-9_-]*\s*=\s*[^;]*;/,
                code = statement.code,
                name = ParserJS.betweenCharsWithoutString(code, undefined, /^(=)$/ ),
                value = ParserJS.betweenCharsWithoutString(code, /^(=)$/, /^;$/ );
            //var result5 = ParserJS.betweenCharsWithoutString(code, /^[A-Za-z0-9_-]$/, /^[=+\-*\\]$/ );
            
            if (name) {  
                name = name.trim();              
                if (name.isLastChar("+") || name.isLastChar("-") || name.isLastChar("*") || name.isLastChar("/")) {
                    name = name.substring(0, name.length-1).trim();    
                }
                varObj.name = name;
            }
            if (value) {
                value = value.trim();
                varObj.value = value;
            }            
                
            /*if (code.match(sts)) {   //[=+\-*\\]
                var nameArray = code.split(/[=+\-*\/]/);  // "="                                
                if (nameArray.length >= 2) {
                    varObj.name = nameArray[0].trim();
                    varObj.value = code.beetweenChars("=",";").trim();
                }  
            }*/
            // XX++; XX--;  
            var stsInc = code.match(codeEditor.templates.regExpDeclarationIncrement()),
                stsDec = code.match(codeEditor.templates.regExpDeclarationDecrement()),
                code = statement.code;  
            if (stsInc || stsDec) {
                var nameArray = []; 
                if (stsInc) nameArray = code.split("++");   
                if (stsDec) nameArray = code.split("--");                                                
                if (nameArray.length >= 1) {
                    varObj.name = nameArray[0].trim();
                }  
            }
            
        }        
        //pobranie zmiennej  miedzy  var  XX  = XX  ;
        //pobranie zmiennej  miedzy  XX  = XX  ;         
        return varObj;
    }
    
    this.getConditionFromStatement = function(statement) {
        var ifObj = {};
        if (statement.type == "if") {
            var code = statement.code,
                conditionString =  statement.code.contentFromEvenChars("(",")"); //statement.code.beetweenStrings("\\(","\\)",1).trim();
                
            if (conditionString) {
                var rpn = Algorithm.infix_to_rpn(conditionString);//  conditional_to_rpn(conditionalString);
                ifObj.rpn = rpn;
            }
            // add conditional            
        }
        return ifObj;
    }
    
       
    this.getLoopFromStatement = function(statement) {
        //iDeep - index command in for,  -1 = none
        // firstExe of loop
        var loopObj = {params:[], firstExe: true};  
        if (statement.type == "for" || statement.type == "repeat") {
            var code = statement.code,
                forParametersString =  statement.code.contentFromEvenChars("(",")"),
                parametersArray = forParametersString.split(";");             
             
            if (parametersArray && parametersArray.length == 3) {  // for([0];[1];[2])
                var p0 = parametersArray[0].trim(); // for([0];;)
                if (p0) {
                    var data = [];
                    p0 = p0.replace(/var\s*/, "").trim();
                    loopObj.params[0] = {};
                    loopObj.params[0].code = p0;
                    data = p0.split(/\s*=\s*/); // data[0] = variable name, data[1] = variable value                    
                    if (data.length == 2) {
                        loopObj.params[0].name = data[0];
                        loopObj.params[0].value = data[1];
                    }                    
                }
                var p1 = parametersArray[1].trim(); // for(;[1];)
                if (p1) {                    
                    var rpn =  Algorithm.infix_to_rpn(p1);  //Algorithm.conditional_to_rpn(p1);
                    if (rpn) {
                        loopObj.params[1] = {};
                        loopObj.params[1].code = p1;
                        loopObj.params[1].rpn = rpn;
                    }                                                          
                }
                var p2 = parametersArray[2].trim(); // for(;;[2])   // a+=2,  name operator name2
                if (p2) {                    
                    var varName = p2.match(/\w*/);
                    loopObj.params[2] = {};
                    loopObj.params[2].code = p2;
                    if (varName[0]) {
                        loopObj.params[2].name = varName[0];
                    }
                    if (varName[1]) {
                        loopObj.params[2].name2 = varName[1];
                    }
                    var operator = p2.match(/[^\w\s\[\]\(\)]+/);
                    if (operator[0]) {
                        loopObj.params[2].operator = operator[0].trim();
                    }                                                     
                }
            } 
        }
        return loopObj;
    }         
    
    this.parametersOfAction = function(codeLine) {
        var action = {},
            res = codeLine.match(/"[^"]*"/g);
        for(var i=0; i < res.length; i++) {
            res[i] = res[i].replace(/"/g,"");
        }
        action.type = (res.length > 0)?res[0]:"";
        action.action = (res.length > 1)?res[1]:"";
        action.name = (res.length > 2)?res[2]:"";
        action.key = (res.length > 3)?res[3]:"";
        return action;
    }
    
    
    var isStringAtTheBeginningArray = function(string, array) {
        var stringArray = array.join(" ");        
        stringArray = stringArray.trim();
        var index = stringArray.search(string);
        if (index == 0) {
            return true;
        } else {
            return false;
        }
    }
    
    /*var removeStringAtTheBeginningArray = function() {
        var stringArray = array.join(" ");        
        stringArray = stringArray.trim();
        var index = stringArray.search(string);
        if (index == 0) {
            return true;
        } else {
            return false;
        }
    }*/
   

    // algorithm for add curly bracket '}' at the end of block  
    this.detectEndOfStatementWithAddCurlyBracket = function(iChar, iL, linesObj, isAddBracket) {
        var qnHelper = new QuotationHelper();
        for(; iL < linesObj.length; iL++) {                    
            for(; iChar < linesObj[iL].code.length; iChar++) { 
                var line = linesObj[iL].code,
                    ch = line[iChar];
                qnHelper.sendChar(ch);
                                
                var isAnyQuotations  = qnHelper.isAnyQuotations();                                               
                if (ch == ";" && !isAnyQuotations) {
                    if (isAddBracket) {
                        linesObj[iL].code = linesObj[iL].code.splice(iChar+1, 0, "}");
                        iChar++;    
                    }                    
                    iChar++;
                    return {line: iL, ch: iChar};
                }
            }
            iChar = 0;
        } 
        return null;
    }
        
      
    this.checkBeginOfStatement = function(iChar, _iL, linesObj, _initStatement) {
        var uniqueStm = null,
            hasNested = false,  // from if  (thats mean, that 'else' not exist)
            areBrackets = false, //  already exists block (brackets {...})
            wasAddedBracket = false,
            interrupt = false,
            maximumCallStack = 250,
            iL = _iL;
            
        function isNextElse(_iL, _iChar) {
            var copyArray = ObjectHelper.copyParamOfArrayObject("code", linesObj),
                substrArray = copyArray.substring({line: _iL, ch: _iChar});              
            //console.log(substrArray);
            // string after bracket
            var copyString = substrArray.join(" ").trim();
            if (copyString.search(/else/) == 0 && copyString.search(/else[\w]/) != 0) {
                return true;
            } else {
                return false;
            }
        }
        
        function checkStatement() {
     
          maximumCallStack--;
          if (maximumCallStack <= 0) {
              interrupt = true;
              return;
          }  
            
          try {
            
            // get code remain after cut  (if () _REMAIN_)
            var lineRemain = linesObj[iL].code.substring(iChar, linesObj[iL].code.length),
                lineRemainTrim = lineRemain.trim();  

            // we check this line only if current line code is not empty
            if (lineRemainTrim) {    
                var foundAny = false;

                // ELSE
                if (!foundAny && _initStatement.type == "if") {     
                                                       
                    var copyArray = ObjectHelper.copyParamOfArrayObject("code", linesObj),
                        substrArray = copyArray.substring({line: iL, ch: iChar});              
                    //console.log(substrArray);
                    // string after bracket
                    var copyString = substrArray.join(" ").trim();
                    if (copyString.search(/else/) == 0 && copyString.search(/else[\w]/) != 0) {
                        console.log("has else");                    
                        var posArr = copyArray.search(/else/);
                        //isElse = true;
                        foundAny = true;
                        //wasAddedElse = true;
                        iL = posArr.line;
                        iChar = posArr.ch+4;  // 4 = length of 'else' word
                        
                        // check what is next,  (} ?)
                        /*substrArray = copyArray.substring({line: iL, ch: iChar}).trim();
                        copyString = substrArray.join(" ").trim();
                        if (copyString) {
                            if (copyString)
                        }*/
                        
                        //checkStatement(); // recurse for 'else block'  <<
                        //interrupt = true;
                        
                        //if (!hasNested) {                             
                        //    wasMainElse = true;
                        //}                        

                    } /*else {  // not found else                        
                        if (!hasNested) {
                            linesObj[iL].code = linesObj[iL].code.splice(iChar, 0, "}");
                            wasAddedBracket = true;
                            iChar++;   
                                                     
                            interrupt = true;
                            return;
                            //foundAny = true;
                        }                                                                       
                    }*/
                }

                if (!foundAny) {
                    areBrackets = false;
                    if (lineRemainTrim[0] == "{") {
                        areBrackets = true;
                    }
                    
                    // not found brackets (blocks) and  not be add bracket 
                    if (!areBrackets && !wasAddedBracket) {
                        linesObj[iL].code = linesObj[iL].code.splice(iChar, 0, "{");
                        wasAddedBracket = true;
                        iChar++;
                    }
                }
       
                // miss lines with blocks 
                if (!foundAny && areBrackets) {     // exits block here  { ... }
                    foundAny = true;
                    // drop lines with even brackets '{ ... }'                                
                    var copyArray = ObjectHelper.copyParamOfArrayObject("code", linesObj);
                    //copyArray = copyArray.substring({line: iL, ch: iChar});
                    var rangeArr = copyArray.rangeFromEvenChars("{","}", {includeChars: true, startPos:{line: iL, ch: iChar} });                                                
                    if (rangeArr) {
                        iL = rangeArr.to.line;
                        iChar = rangeArr.to.ch;
                        
                            if (hasNested && !isNextElse(iL, iChar)) {                         
                                linesObj[iL].code = linesObj[iL].code.splice(iChar+1, 0, "}");                       
                                interrupt = true;
                                return;
                            }                        
                        
                        if (iChar < linesObj[iL].code.length) {
                            iChar ++;
                        }
                        if (iChar >= linesObj[iL].code.length) {
                            iChar = 0;
                            iL++;
                        }
                        
                            // for main if..else..
                            if (!hasNested && !isNextElse(iL, iChar)) {
                                interrupt = true;
                                return;
                            }
                        
                    }            
                }                
                
           
                // 
                if (!foundAny) {      
                    lineRemain = linesObj[iL].code.substring(iChar, linesObj[iL].code.length);
                    // IF
                    var uniqueIfStm = that.getFirstWordWithEvenChars(lineRemain, "if", "(", ")");
                    var uniqueForStm = that.getFirstWordWithEvenChars(lineRemain, "for", "(", ")");                    
                    var uniqueRepeatStm = that.getFirstWordWithEvenChars(lineRemain, "repeat", "(", ")");                    
                    uniqueStm = uniqueIfStm || uniqueForStm || uniqueRepeatStm;                    
                    if (uniqueStm) {  
                        foundAny = true;
                        hasNested = true;  
                        iChar += uniqueStm.range.to;
                        if (iChar > linesObj[iL].code.length) {
                            iChar = 0;
                            iL++; 
                        }
                    }

                }
          
                // found any statement (besides command key) and add end bracket
                if (!foundAny) {
                    if (!hasNested) {                        
                        var endPos = that.detectEndOfStatementWithAddCurlyBracket(iChar, iL, linesObj, true);
                        if (endPos) {
                            // put close bracket
                            foundAny = true;
                            wasAddedBracket = false;
                            iL = endPos.line;
                            iChar = endPos.ch;
                                
                            //!hasNested &&    
                            
                            if (!isNextElse(iL, iChar)) {
                                interrupt = true;
                                return;
                            }                            
                        }
                    } 
                    //if (wasAddedElse) {
                    //    interrupt = true;
                    //}
                }
                
                
                // found any statement (besides command key) without add bracket (skip command)
                if (!foundAny) {
                     
                    var endPos = that.detectEndOfStatementWithAddCurlyBracket(iChar, iL, linesObj, false);
                    if (endPos) {
                        // put close bracket
                        foundAny = true;
                        iL = endPos.line;
                        iChar = endPos.ch;
                        
                            if (hasNested && !isNextElse(iL, iChar)) {                         
                                linesObj[iL].code = linesObj[iL].code.splice(iChar+1, 0, "}");                       
                                interrupt = true;
                                return;
                            } 
                         
                        // wykrywam czy jest statement
                    }                    
                }
                
                // execute to end of line, if line empty then change to new line
                if (foundAny) {
                    checkStatement();
                }
                                
            }
          } catch(e) {
              interrupt = true;
              return;
          }  
        }
                

        for(;iL < linesObj.length; ) {
            checkStatement(); // first for 'basic block' 
            
            if (interrupt) {
               break;
            }
            
            iL++;
            iChar=0;
            /*if (iChar >= linesObj[iL].code.length) {
                iChar = 0;
                iL++;
            }*/   
        }
    }

   
    this.getFirstWordWithEvenChars = function(_code, word, charLeft, charRight) {
        var firstWordRegExp =  /\w*/, 
            code = _code, // not used this  trim, because, we cannot change 'code' (we calculate range later)
            result = {
                type: "",  // word
                codeToSave: "", // code between chars (left & right),
                range: null
            }            
            
        var checkFirstWord = code.trim();            
        if (checkFirstWord.search(firstWordRegExp) == 0) {                
            var wordRegex = checkFirstWord.match(firstWordRegExp)[0];
            if (wordRegex == word) {
                result.type = word;
                var range = code.rangeFromEvenChars(charLeft, charRight);                
                if (range && range.to > 0) {
                    result.range = {from: 0, to: range.to + 2}
                    result.codeToSave = code.substring(0, result.range.to);
                    return result;
                }
            }
        } 
        return null;
    }

    
    this.statementFromCode = function(_code, startLineNumber) {        
        _code = that.removeComments(_code);        
        var statements = [],
            linesCode = _code.split("\n"),
            linesObj = [],
            copyLinesCodes = [],
            codeToSave = "",
            codeOfBlock = "",
            codeOfBlockRangeFrom = {line:0, ch:0},
            codeOfBlockRangeTo = {line:0, ch:0},
            iL = 0,
            iChar = 0,
            //offsetChar = 0,
            classExp = new RegExp("class\\s*[^\\{]*",""), // RegExp("[^;]*;{1}","");
            functionExp = new RegExp("function\\s*.*\\([^\\)]*\\)\\s*",""), // RegExp("[^;]*;{1}","");
            functionPrototypeRegExp = new RegExp("[^\\.]*.[^\\.]*.\\s*=\\s*function\\s*.*\\(.*\\)",""),  
            forRegExp = new RegExp("for\\s*\\((.*;){2}.*\\)\\s*",""),  
            repeatRegExp = /repeat\s*\([^\)]*\)\s*/,        //  /repeat\s*\(.*\)\s*[^{]*/,         //     /repeat\s*\(\s*/
               
            //ifRegExp = /if\s*\(\s*[\(]*[^{]*[\)]*\s*\)\s*(\w|{|\s*)/,      //   /\w*/,  //  /if\s*\(\s*[\(]*[^{]*[\)]*\s*\)\s*/,     // new RegExp("if\\s*\\(",""),   
            varExp = new RegExp("var\\s+[^;]*[^;]",""), // RegExp("[^;]*;{1}","");
            statementExp = new RegExp("[^;]*[^;]",""), // [^;]*[^;]  // RegExp("[^;]*;{1}","");
            actionExp =  codeEditor.templates.regExpDeclarationAddActionWithoutEndSemicolon(),
            firstWordRegExp =  /\w*/,
            regExp = undefined;
            
                        
        if (!startLineNumber) {
            startLineNumber = 0;
        }
        
        //linesCode = that.codeWithoutSingleComments(linesCode);        
       
        for(iL=0; iL < linesCode.length; iL++) {
            var lineObj = { 
                code: linesCode[iL],
                numberLine: (iL+1)+startLineNumber, 
            }
            linesObj.push(lineObj);
        }
        copyLinesCodes = ObjectHelper.copyParamOfArrayObject("code", linesObj);                
        
        iL = 0;
        
        while(iL < linesObj.length) {
            
            var isFindAnyStatement = false,
                code = linesObj[iL].code,  //<<  linesObj[iL].code.trim()
                codeTrim = "",
                indexCommand = -1,
                statement = { 
                    lineNumber: (iL+1)+startLineNumber,
                };
                                
            iChar=0; //<<<<
            
            //offsetChar = indexFirstChar(linesObj[iL].code); //<<
             
            // remove sign for begin string
            for(;;) {
                if (code.length > 0) {                    
                    if (code[0] == ";") {                
                        code = code.searchAndSubstring(";");
                    } else {
                        break;
                    }   
                } else {
                    break;
                }
            }
            
            function changeConsoleCode(stm) {
                stm.code = stm.code.replace(/console\.read/g, "Console.read");
                stm.code = stm.code.replace(/console\.write/g, "Console.write");                
            }
                
            var areBrackets = false,
                typeFirstBracket = "",  //  ""|"open"|"close"
                countOpenBrackets = 0,
                countCloseBrackets = 0,
                qnHelper = new QuotationHelper(),
                isUndefinedStatement = false;

            regExp = undefined;
            
            // pre configure statement (etc. add brackets for 'if' statement)
            /*->*//*var findUniqueStatement = false,
                ifConditition = "";
            if (code.search(firstWordRegExp) == 0) {                
                var word = code.match(firstWordRegExp)[0];
                if (word == "if") {
                    statement.type = "if";
                    var range = code.rangeFromEvenChars("(",")");
                    if (range && range.to > 0) {
                        ifConditition = code.substring(0, range.to+2);
                        findUniqueStatement = true;
                    }
                }
            }*/
           
            indexCommand = code.indexFirstNotEmptyChar();            
            codeTrim = code.trim();
            
            var uniqueStm = that.getFirstWordWithEvenChars(codeTrim, "if", "(", ")");
            if (uniqueStm) {
                statement.type = uniqueStm.type;
            }
            
            if (statement.type == "if") {
            } else if (codeTrim.search(classExp) == 0) {
                regExp = classExp;
                statement.type = "class";
            } else if (codeTrim.search(functionExp) == 0) {
                regExp = functionExp;
                statement.type = "function";                
            } else if (codeTrim.search(functionPrototypeRegExp) == 0) {
                regExp = functionPrototypeRegExp;
                statement.type = "function_prototype";
            } else if (codeTrim.search(forRegExp) == 0) {
                regExp = forRegExp;
                statement.type = "for";
            } else if (codeTrim.search(repeatRegExp) == 0) {
                regExp = repeatRegExp;
                statement.type = "repeat";
            } else /* if (codeTrim.search(ifRegExp) == 0) {
                regExp = ifRegExp;
                statement.type = "if";
            } else */ if (codeTrim.search(varExp) == 0) {
                regExp = varExp;
                statement.type = "var";
            } else if (codeTrim.search(actionExp) == 0) {
                regExp = actionExp;
                statement.type = undefined;
            } else if (codeTrim.search(statementExp) == 0) { // || code == "") {                           
                regExp = statementExp;
                isUndefinedStatement = true;
            } else {
             //  isUndefinedStatement = true;
            }

            if (regExp || uniqueStm) { 
               isFindAnyStatement = true;
               codeOfBlock = "";  
               codeToSave = "";               
               codeOfBlockRangeFrom = null;
               codeOfBlockRangeTo = null;
               
               if (uniqueStm) {
                   if (code) {
                      codeToSave = uniqueStm.codeToSave;
                      //code =  code.replace(uniqueStm.codeToSave, "");//.trim() <<
                      iChar += indexCommand + codeToSave.length;
                   }                   
               } else if (regExp && !isUndefinedStatement) {               
                   if (code) {
                      codeToSave = code.match(regExp)[0]; // get first fragment of statement
                      //code = code.replace(regExp,""); //<<<<
                      iChar += indexCommand + codeToSave.length;
                   }                   
               }

               //offsetChar += codeToSave.length; //<<
               //codeOfBlockRangeFrom = {line: iL, ch: iChar }

               // add bracket for single statement (for, if, repeat)
               if (statement.type == "if" || statement.type == "for" || statement.type == "repeat") {
                   // algorithm begin after cut section if(xxx) |->
                   linesObj[iL].code = code;
                   //iChar = 0; //<<<<
                   // remember! in below function we work on reference linesObj (reference will be modified)
                   that.checkBeginOfStatement(iChar, iL, linesObj, statement);
                   // we update for 'code' new value from array
                   code = linesObj[iL].code;
               }
            
               for(; ; iChar++) {  //<<<< iChar=0 
                                      
                   if (iChar < code.length) { //<<<< code.length > 0 
                                
                       if (!codeOfBlockRangeFrom && code[iChar].trim()) {
                           codeOfBlockRangeFrom = { line: iL, ch: iChar } //<< iChar + offsetChar
                       }
                       //if (codeOfBlockRangeFrom && !codeOfBlockRangeTo) {
                       //    codeOfBlockRangeTo = { line: iL, ch: iChar + offsetChar }
                       //}
                                              
                       codeToSave += code[iChar];
                       codeOfBlock += code[iChar];

                       qnHelper.sendChar(code[iChar]);
                       var isAnyQuotations = qnHelper.isAnyQuotations();
                       //isAnyQuotations = false;                        
                       
                       if (!isAnyQuotations && code[iChar] == ";" && !statement.type) {
                           statement.type = "statement";
                           //console.log("first collon");
                       }
                       if (!isAnyQuotations && code[iChar] == "{") {
                           countOpenBrackets++;
                           if (!typeFirstBracket) {
                             typeFirstBracket = "open";
                             areBrackets = true;
                           }
                       }
                       if (!isAnyQuotations && code[iChar] == "}") {
                           countCloseBrackets++;
                           if (!typeFirstBracket) {
                            typeFirstBracket = "close";
                           }
                       } 

                       if ((areBrackets && countOpenBrackets == countCloseBrackets) ||
                           (statement.type == "statement" || statement.type == "var") ) {
                            
                           var isInterrupt = false;
                           
                           // get from active char to end of line
                           linesObj[iL].code = code.substring(iChar+1,code.length);                           
                           statement.code = codeToSave;                                                   
                           
                           // sprawdzenie czy dalej nie ma else
                           if (statement.type == "if") {
                               var tempArray = [];
                               for(var i = iL; i < linesObj.length; i++) {
                                   tempArray.push(linesObj[i].code);     
                               }
                               
                               if (!statement.ifObj) {
                                   statement.ifObj = that.getConditionFromStatement(statement);
                                   statement.ifObj.exeElse = false; // if true then exe 'else' block, if false then exe 'true' block
                                   //statement.lineNumberElse = (iL+1)+startLineNumber;  
                               }
                               
                               // first enter check exist else statement 
                               var isElse = isStringAtTheBeginningArray("else", tempArray);
                               if (isElse) {
                                   
                                   //if (!codeOfBlockRangeTo) {
                                   //    codeOfBlockRangeTo
                                   //}
                                                                                                                                              
                                   statement.ifObj.isElse = true;                                                                  
                                   //statement.lineNumberElse = (iL+1+startLineNumber);   
                                  // console.log("IS ELSE!!");
                                   // wiec wychodze z zapisania statementu bede dalej liczyl
                                   typeFirstBracket = "";
                                   areBrackets = false;
                                   isInterrupt = true;
                               }

                               // must be code of block to run correctly <<

                               if (codeOfBlock) {                                                                 
                                   statement.iDeep = -1;
                                   // block else
                                   if (!isElse && statement.ifObj && statement.ifObj.isElse) {
                                       // block "else"
                                       
                                       codeOfBlockRangeFrom.ch = codeOfBlockRangeFrom.ch + 4; // 4 - length of 'else' string 
                                       for(var iLr = codeOfBlockRangeFrom.line; iLr < linesObj.length; iLr++ ) {
                                           var arrayCodes =  $.extend(true,[], copyLinesCodes);   //ObjectHelper.copyParamOfArrayObject("code", linesObj);
                                           arrayCodes[codeOfBlockRangeFrom.line] = arrayCodes[codeOfBlockRangeFrom.line].substring(codeOfBlockRangeFrom.ch);
                                           if (arrayCodes[iLr].trim()) {
                                               var ind = arrayCodes[iLr].indexFirstNotEmptyChar();
                                               if (codeOfBlockRangeFrom.line == iLr) {
                                                   codeOfBlockRangeFrom.ch += ind;
                                               } else {
                                                   codeOfBlockRangeFrom.ch = ind;
                                               }                                               
                                               codeOfBlockRangeFrom.line = iLr;
                                               break;
                                           }
                                       }                                       
                                       
                                       /*var indexElse = codeOfBlock.search(/else/,""),
                                           indexElseAfter = 0;
                                           countNLToElse = codeOfBlock.countFirstEmptyLines();                                           
                                           
                                       if (indexElse > -1) {                                       
                                           indexElseAfter += indexElse + 4; // 4 - length of 'else' string 
                                           */
                                           
                                           codeOfBlock = codeOfBlock.replace(/else/,""); //   \s*else      \s*    
                                       //}                                    
                                       //var ch = indexFirstChar(codeOfBlock)+4;
                                       
                                       var currentLine = iL+startLineNumber,
                                           countNL = codeOfBlock.countFirstEmptyLines(),
                                           countBlock = codeOfBlock.split("\n").length-1,
                                           //ch = indexFirstChar(codeOfBlock)+4,
                                           ch = codeOfBlockRangeFrom.ch; 
                                           
                                     //  if (countBlock)

                                       codeOfBlockRangeFrom = null;     
                                       codeOfBlock = codeOfBlock.trim();
                                       codeOfBlock = codeOfBlock.substring(1, codeOfBlock.length-1);
                                       //console.log("ELSE  "+codeOfBlock);                                       
                                       var recurSts = that.statementFromCode(codeOfBlock, statement.rangeTo.line+countNL);                                    
                                       statement.deepElse = recurSts;
                                       statement.rangeElseFrom = { line: statement.rangeTo.line+countNL, ch: ch}     // statement.range.to+countNL                                                                     
                                       statement.rangeElseTo = { line: currentLine, ch: iChar + 1 }                                                                          
                                   } else {
                                       // block "not else"
                                       //console.log("NOT ELSE  "+codeOfBlock);
                                       var countNL = codeOfBlock.countFirstEmptyLines(),
                                           countBlock = codeOfBlock.split("\n").length-1,
                                           ch = codeOfBlockRangeFrom.ch;
                                                                       
                                       codeOfBlockRangeFrom = null;                                                                                                                                                                                                             
                                       codeOfBlock = codeOfBlock.trim();                                       
                                       codeOfBlock = codeOfBlock.substring(1, codeOfBlock.length-1);                                        
                                       var recurSts = that.statementFromCode(codeOfBlock, statement.lineNumber+countNL-1); 
                                       statement.deep = recurSts;         
                                       statement.rangeFrom = { line: statement.lineNumber+countNL-1, ch: ch } // offsetChar
                                       statement.rangeTo = { line: statement.lineNumber+countBlock-1, ch: iChar+1 }
                                       //TODO
                                       codeOfBlock = "";
                                   }
                                   
                                   //codeOfBlock = codeOfBlock.trim();
                                   //console.log(isElse+" "+codeOfBlock);
                                   //codeOfBlock = codeOfBlock.substring(1, codeOfBlock.length-1);
                                   //console.log(isElse+" "+codeOfBlock);
                               }
                           }
                           

                           if (!isInterrupt) {                               
                               statement.lineNumberEnd = (iL+1)+startLineNumber; 
                               
                               if (statement.type == "statement" || statement.type == "var") {
                                  //statement.varObj = new Object();
                                  statement.varObj = that.getVarObjFromStatement(statement);                                   
                                  statement.codeType = that.getStatementCodeType(statement.code);
                                  
                                  if (statement.codeType == STATEMENT_CODE_TYPE_ACTION) {
                                      statement.action = that.parametersOfAction(statement.code);
                                  }
                                  //console.log("e "+codeToSave+" type: "+statement.type+" codeType:"+statement.codeType);                              
                               }

                               // for and repeat -> for
                               if (statement.type == "for" || statement.type == "repeat") {
                                   if (statement.type == "repeat") {
                                       var countRepeat = statement.code.contentFromEvenChars("(",")");                                       
                                       var varLoop = "i_"+Generate.randomCharacters(8),
                                           contentLoop = "var "+varLoop+" = 0; "+varLoop+" < "+countRepeat+"; "+varLoop+"++",
                                           newCode = "";
                                       
                                       var range = statement.code.rangeFromEvenChars("(",")");
                                       if (range && range.from<=range.to) {                                           
                                           newCode += "for("+contentLoop+")";
                                           newCode += statement.code.substring(range.to+2, statement.code.length);                                           
                                           statement.code = newCode;
                                       }  
                                   }
                                                                   
                                   statement.forObj = that.getLoopFromStatement(statement);  
                                   statement.iDeep = -1; 
                                   
                                   var countNL = codeOfBlock.countFirstEmptyLines(), 
                                       countBlock = codeOfBlock.split("\n").length-1,
                                       ch = codeOfBlockRangeFrom.ch;
                                                                
                                   codeOfBlock = codeOfBlock.trim();
                                   codeOfBlock = codeOfBlock.substring(1, codeOfBlock.length-1);
                                   var deepStatements = that.statementFromCode(codeOfBlock, statement.lineNumber-1+countNL);                                   
                                   // extra statement of end of loop block 
                                   var endOfLoopStatement = {
                                       type: "statement",
                                       lineNumber: statement.lineNumber+countBlock,
                                       code: 'backEditorFor();',
                                       codeType: STATEMENT_CODE_TYPE_UNDEFINED
                                   }
                                   deepStatements.push(endOfLoopStatement);
                                   statement.deep = deepStatements;
                                                                   
                                   statement.rangeFrom = { line: statement.lineNumber+countNL-1, ch: ch } 
                                   statement.rangeTo = { line: statement.lineNumber+countBlock-1, ch: iChar+1 }
                               } 
                               
                               if (statement.type == "class") {
                                 statement.classObj = {};
                                 statement.classObj.name = that.getClassNameFromStatement(statement);
                                 statement.code = that.simpleClassToJavascriptClass(statement.code);
                               }
                               
                               if (statement.type == "function") {
                                 statement.functionObj = {};
                                 statement.functionObj.name = that.getFunctionNameFromStatement(statement);             
                               }
                                     
                               changeConsoleCode(statement);
                               statement.code = statement.code.trim();                         
                               statements.push(statement);                                         
                               break;
                           }
                       }
                   }
                   // last char
                   if ( iChar >= code.length) { //  code.length == 0 || iChar == code.length-1
                       // drop empty line
                       codeToSave += "\n";  // i try \n  was " "  // << do space to statement code not join, example  elseConsole.write
                       codeOfBlock += "\n";
                       iL++; // jump to next line
                       iChar = -1;
                       //offsetChar = 0;
                       
                       if (iL < linesObj.length) {
                          code = linesObj[iL].code; //<<< linesObj[iL].code.trim();
                       }
                   }      
                          
                   if (iL == linesObj.length) {
                       statement.code = codeToSave;
                       statement.lineNumberEnd = (iL+1)+startLineNumber;
                       changeConsoleCode(statement);
                       statement.code = statement.code.trim();
                       statements.push(statement);                   
                       break;
                   }
               }
            } else {
                iL++;
            }          
            
            // execute when not found statement
            if (!isFindAnyStatement) {
                if (code.trim() != "") {  //<<<< bez .trim
                    codeToSave = code;
                    statement.code = codeToSave;
                    statement.lineNumberEnd = (iL+1);      
                    changeConsoleCode(statement);
                    statement.code = statement.code.trim();
                    statements.push(statement);
                    break;
                }
            }      
        } 
        
        //console.log(statements);
        
        return statements;        
    }        
    
    
    this.getHeaderClass = function(header) {
        var result = { isClass: false, isExtended: false, success: false }
        var arrayHeader = header.split(" ");
        var words = new Array();
        for(var i=0; i < arrayHeader.length; i++) {
            if (arrayHeader[i] != "") {
                words.push(arrayHeader[i]);
            }
        }
        if (words.length >= 2) {
            if (words[0] == "class" && words[1] != "") {
                result.isClass = true;
                result.name = words[1];
                result.success = true;
            }
        }
        if (result.success && words.length == 4) {
            if (words[2] == "extended" && words[3] != "") {
                result.isExtended = true;
                result.nameExtended = words[3];
                result.success = true;
            } else {
                result.success = false;
            }
        }        
        
        return result;
    }

    this.simpleClassToJavascriptClass = function(code) {
        var result = "";
        var classHeader = "";
        
        var classExp = new RegExp("class[^{]*","");
        if (code.search(classExp) == 0) { 
            classHeader = code.match(classExp)[0];
            code = code.replace(classExp,"");
            var header = this.getHeaderClass(classHeader);
            if (header.success) {
                result = "function "+header.name+"() ";                
                if (header.isExtended) {
                    code = code.substring(1,code.length);
                    code = "{"+header.nameExtended+".call(this);"+code;
                }                
                result += code;
            }
        }
        return result;
       // alert("header:"+classHeader+" code:"+code);
    }

}
////////////////////
// CODE EDITOR - String

function CodeEditorStrings() {

    // @param contitional - value from  Algorithm.rpnInfo
    /*this.stringsForRpnInfo = function(info) {
        var result = "";
        if (info) {
           for(var j=0; j < info.length; j++) {
               if (!info[j].leftIsNumber) {
                   result += "value of "+info[j].leftOperand+" variable="+info[j].leftValue+". ";
               }
           }
           // value of old variable=3. We check if 3<=18. Yes it is TRUE so we will execute this part of code (wskazujemy jakos ktory kod)   
        }
        return result;
    }*/
    this.rmEMU = function(code) {
        return code.toString().replace("EMU.","");
    },
    // @param options.shortString
    this.stringsForRpnConditional = function(rpn, statement, options) {
        var result = "",
            rpnInfo = Algorithm.rpn_to_info(rpn); 
            //leftValue = "", 
            //rightValue = "", 
            error = "", 
            that = this,
            shortString = (options && options.shortString)?true:false;
            
        if (rpnInfo && rpnInfo.success) {            
            if (rpnInfo.error) {
                return rpn.error;
            }            
            
            if (!shortString) {
                for(var i=0; i < rpnInfo.info.length; i++) {
                   var info = rpnInfo.info[i];                
                       
                   if (!info.leftIsNumber) {
                       result += "Value of "+that.rmEMU(info.leftOperand)+" variable is equals "+info.leftValue+". ";
                   }    
                   if (!info.rightIsNumber) {
                       result += "Value of "+that.rmEMU(info.rightOperand)+" variable is equals "+info.rightValue+". ";
                   }    
                   if (info.token == "&&") { 
                        //info.value = eval("!!("+info.value+")");                                              
                        result += "We check AND for "+that.rmEMU(info.leftOperand)+" and "+that.rmEMU(info.rightOperand)+". ";
                   } else if (info.token == "||") {
                        //info[i].value = eval("!!("+info[i].value+")");                                             
                        result += "We check OR for "+that.rmEMU(info.leftOperand)+" and "+that.rmEMU(info.rightOperand)+". ";
                   } else  {
                        result += "We calculate statement: "+that.rmEMU(info.leftOperand)+" "+info.token+" "+that.rmEMU(info.rightOperand)+", result is "+info.value+". ";
                   }          
               }  
           }
           
           var isCorrect = new Boolean(rpnInfo.value);   // eval(rpnInfo.value);
           isCorrect = isCorrect.valueOf();
           //result += "We check if "+eval(leftValue)+" "+this.stringOperator(conditional.token)+" "+eval(rightValue)+". ";
             
           if (statement && statement.ifObj) { 
               
               //isCorrect
               
               if (isCorrect || (!isCorrect && statement && statement.deepElse)) {  
                   if (!shortString) {                   
                       result += "Condition is "+isCorrect+". We will execute this part of code highlighted in green. ";
                   } else {
                       result += "Condition is "+isCorrect+". We'll execute green part.";
                   }
               } else {
                   if (!shortString) {
                       result += "Condition is false so we go next.";
                   } else {
                       result += "Condition is false so we go next.";
                   }
               }
           } else if (statement && statement.forObj) { 
                if (isCorrect) {
                    if (!shortString) {
                        result += "Condition is true so we still continue whole code below. ";
                    } else {
                        result += "Condition is true so we still continue whole code below. ";
                    }
                } else {
                    if (!shortString) {
                        result += "Condition is false so now we will not continue loop code and go next. ";
                    } else {
                        result += "Condition is false so now we will not continue loop code and go next. ";
                    }
                }
           }  

            // Yes it is TRUE so we will execute this part of code                            
            //result += "Yes it is TRUE so we will execute this part of code. ";       
        }
        return result;
    };
    
    // @param options.shortString
    // @param options.maxLength
    this.stringForCode = function(statement, options) {
        var result = "";
        if (statement.type == "var") {
            if (statement.varObj.objectType == "Array") {
                result += 'Variable '+this.rmEMU(statement.varObj.name)+' representing Array';
                if (statement.varObj.params.length == 0) {
                    result += ' was created.'
                } else if (statement.varObj.params.length == 1) {
                    result += ' was created with first element set to '+statement.varObj.params[0]+'. ';
                } else if (statement.varObj.params.length > 1) {
                    result += ' with array values set to ';
                    result += statement.varObj.params.join(",");
                    //for(var i=0; i < statement.varObj.params.length; i++) {
                    //    result += statement.varObj.params+",";
                    //}
                } else {
                    
                }
                                
            }  else if (statement.varObj.objectType) {
                result += 'Instance '+this.rmEMU(statement.varObj.name)+' of Object '+statement.varObj.objectType+' was created.';
            } else {
                result += 'Variable '+this.rmEMU(statement.varObj.name)+' was created. ';                
                if (statement.varObj.value) {
                    result += 'Value was set to '+statement.varObj.value+'.';     
                }
            } 
        } else if (statement.type == "statement" && statement.codeType == STATEMENT_CODE_TYPE_EQUAL && statement.varObj.name && statement.varObj.value) {
            result += 'Variable '+this.rmEMU(statement.varObj.name)+' was set to '+this.rmEMU(statement.varObj.value)+'.';
        } else if (statement.type == "statement" && statement.codeType == STATEMENT_CODE_TYPE_INCREMENT && statement.varObj.name) {
            result += 'Variable '+this.rmEMU(statement.varObj.name)+' was increased.';
        } else if (statement.type == "statement" && statement.codeType == STATEMENT_CODE_TYPE_DECREMENT && statement.varObj.name) {
            result += 'Variable '+this.rmEMU(statement.varObj.name)+' was decreased.';
        } else if (statement.type == "statement" && statement.varObj && statement.varObj.name && 
                   (statement.codeType == STATEMENT_CODE_TYPE_SUM || statement.codeType == STATEMENT_CODE_TYPE_MINUS ||
                    statement.codeType == STATEMENT_CODE_TYPE_MULTI || statement.codeType == STATEMENT_CODE_TYPE_DIV) ) {
            var oldValue = eval(statement.varObj.name),
                addedValue = eval(statement.varObj.value),
                newValue = null;
            if (!isNaN(oldValue)) { oldValue = parseInt(oldValue); }
            if (!isNaN(addedValue)) { addedValue = parseInt(addedValue); }
            //if (!isNaN(oldValue) && !isNaN(addedValue)) {
            //    newValue = eval(oldValue+addedValue); // 
            //} else {
            var operationString = "";
            if (statement.codeType == STATEMENT_CODE_TYPE_SUM) { newValue = oldValue+addedValue; operationString = "addition";  }
            if (statement.codeType == STATEMENT_CODE_TYPE_MINUS) { newValue = oldValue-addedValue; operationString = "subtraction"; }
            if (statement.codeType == STATEMENT_CODE_TYPE_MULTI) { newValue = oldValue*addedValue; operationString = "multiplication";}
            if (statement.codeType == STATEMENT_CODE_TYPE_DIV) { newValue = oldValue/addedValue; operationString = "division"; }
                //
            //}
            result += 'Variable '+this.rmEMU(statement.varObj.name)+' is updated ('+operationString+'). ';
            if (oldValue != undefined && newValue != undefined) {
                result += 'Old value:'+oldValue+' New Value:'+newValue+'.';
            }
        }  else if (statement.type == "if") {
            if (statement.ifObj && statement.ifObj.rpn) {
                result += this.stringsForRpnConditional(statement.ifObj.rpn, statement, options);
            }
        } else if (statement.type == "for"){
            //alert(JSON.stringify(statement.forObj));
            if (statement.forObj && statement.forObj.params) {
                var p0 = statement.forObj.params[0];
                if (p0 && statement.iDeep < 0) {                    
                    result += 'We set '+this.rmEMU(p0.name)+' to '+this.rmEMU(p0.value)+'. ';
                    // after repeat
                    // We incread i by one. It is now = 1.  
                }
                var p2 = statement.forObj.params[2];
                if (p2 && statement.iDeep >= 0) {                    
                    
                    //We incread i by one. It is now =1. <<<
                    
                    result += 'Variable '+this.rmEMU(p2.name)+' is '+this.stringLoopParam3(p2.operator, p2.name2)+'. ';
                    result += 'It is now '+eval(p2.name)+'. ';
                    
                    //stringLoopParam3
                    
                    // after repeat
                    // We incread i by one. It is now = 1.  
                }                
                var p1 = statement.forObj.params[1];
                if (p1 && p1.rpn) {
                    
                    result += 'Next we check condition in the loop. '; 
                    result += this.stringsForRpnConditional(p1.rpn, statement, options);                                                      
                }
            }                 
        } else if (statement.type == "repeat"){
            if (statement.forObj && statement.forObj.params) {
                
               var p0 = statement.forObj.params[0],
                   p1 = statement.forObj.params[1],
                   rpnInfo = null;                                   
                if (p0 && p1 && p1.rpn) {                    
                    rpnInfo = Algorithm.rpn_to_info(p1.rpn);                    
                                           
                    if (rpnInfo && rpnInfo.success && rpnInfo.value) {
                        result += 'Repeat, step '+eval(p0.name)+'.';                                   
                    } else {
                        result += 'Repeat is finished.';
                    }
                }
            }
        } else// if(statement.codeType == STATEMENT_CODE_TYPE_UNDEFINED) {
            if (statement.code.search("Console.write") == 0) { // > -1
                var code = statement.code.replace("Console.write", ""),
                    string = eval(code);                
                result += 'Piszemy na konsoli: "'+string+'".'; 
            } else if (statement.code.search("Console.read") > -1) {
                result += 'App expects you to put value and press enter: '; 
            } else if (statement.code.search("appFinished") == 0) {
                result += 'Application finished'; 
            } else if (statement.code.search("backEditorFor") == 0) {
                result += 'Application will go back to the top of the loop'; 
            } 
            
        //}
        
        if (options && options.maxLength != undefined && result.length > options.maxLength) {
            var maxLength = parseInt(options.maxLength);
            if (maxLength > 3) {
                result = result.substring(0, maxLength-3);
                result += "..."
            }
        }
        
        return result; 
    }
    
    this.stringOperator = function(operator) {
        switch(operator) {
            case "<": return "smaller than"; break;
            case ">": return "larger than"; break;
            case "<=": return "smaller or equals than"; break;
            case ">=": return "larger or equals than"; break;
            case "==": return "equals"; break;
            case "!=": return "not equals"; break;
        }
    }
    
    
    this.stringLoopParam3 = function(operator, value) {
        switch(operator) {
            case "++": return "increased by one"; break;
            case "++": return "increased by one"; break;
            case "--": return "descreased by one"; break;
            case "+=": return "increased by "+value; break;
            case "-=": return "descreased by "+value; break;
            case "*=": return "multiplied by "+value; break;
            case "/=": return "devided by "+value; break;
        }
    }    
    
}

////////////////////
// CODE EDITOR

var EDITOR_ONCLICK = "onclick";
var EDITOR_ONDROP = "ondrop";
var EDITOR_KEYDOWN = "keydown";
var EDITOR_SHOW_OBJECT = "show_object";
var EDITOR_HIDE_OBJECT = "hide_object";
var EDITOR_GO_TO_BOARD = "go_to_board";
var EDITOR_PLAY_MP3 = "play_mp3";
var EDITOR_STOP_MP3 = "stop_mp3";
var EDITOR_SHOW_IMAGE = "show_image";
var EDITOR_SHOW_POPUP = "show_popup";
var EDITOR_INITIATE_CONVERSATION = "initiate_conversation";
var EDITOR_TAKE_ITEM = "take_item";
var EDITOR_DROP_ITEM = "drop_item";

function CodeEditor() {
    var TYPE_ERROR = 1, TYPE_SELECT = 2;
    var CODE_MAIN_NAME = "main";
    var CODE_MAIN_EXT = "Code";
	var that = this;
    this.idDialog = "dialog_code_editor";     
    this.idOpenDialog = "dialog_code_editor_open";
    this.idCodeEditorRun = "dialog_code_editor_run";
    this.idCodeEditorProperty = "code_editor_property";
        
    this.idCodeEditorSplitter = "code_editor_splitter";
    this.idCodeEditorPanelEditor = "code_editor_panel_editor";
    this.idCodeEditorTabs = "code_editor_tabs";
    this.idCodeEditorCode = "code_editor_code";
    this.idCodeEditorProgramCode = "code_editor_program_code";
    
    this.idCodeEditorConsoleSection = "code_editor_console_section";
    this.idCodeEditorPanelConsole = "code_editor_panel_console";
    this.idCodeEditorPanelNoConsole = "code_editor_panel_noconsole";
    this.idCodeEditorOpenConsole = "code_editor_open_console";
    this.idCodeEditorCloseConsole = "code_editor_close_console";
    
    this.idCodeEditorPanelOutline = "code_editor_panel_outline";
    this.idCodeEditorOpenOutline = "code_editor_open_outline";
    this.idCodeEditorCloseOutline = "code_editor_close_outline";    
    
    var progressBar = $( "#compile_progress" ),
        progressLabel = $( "#compile_progress_label" ),
        firstOpenDialog = true; 
     
    this.manager = new CodeEditorManager(this);
    this.help = new CodeEditorHelp();
    this.explorer = new CodeEditorExplorer();
    this.templates = new CodeEditorTemplates();
    this.strings = new CodeEditorStrings(this);
    var aWriteCM = null,
        codeMirrorOptions = {minHeight: 310, maxHeight: 390},
        lastCMViewport = undefined,
        lastCursorPos,
        currentCursorPosition = {};
    
    // tabs
    var tabs = $("#"+this.idCodeEditorTabs),
        tabsData = [], // tab = {id, tab (instance jquery of li of tab),  name (of tab == board name), idCodeMirror (string), codeMirror (object), codeMirrorDebug (object), typeCode (boardExtension), isSaved (boolean content is update or not)), cursorPos:{line, ch}, endLineToRecord: INT  }
        snapshotLatestCode = [], 
        tabUniqueId = 1,
        tabTemplate = "<li><a href='#{href}' style='outline-color: transparent;'>#{label}</a> <span class='ui-icon ui-icon-close' role='presentation' style='cursor:pointer;' >Remove Tab</span></li>",
        readOnlyBoardsList = [],  // [boardName.Extension,..]
        blockedClosedBoardsList = [], // [boardName.Extension,..]
        debugCodes = [], // [{name: string, typeCode: string, code: string},(...)]
        textMarkerConsoleRead = null,
        debugLineDetails = [],  // [{ name: string, typeCode: string, line: int, statementType="if"|"for|...",  detailsCode: "...", }]
        isOpenDebugLineDetails = false;
        
    this.boardExtension = {code: "Code", definitions: "Definitions"};
    
    var timerAutosave,
        autosaveSec = 15,
        timerAutogenerateOutline = null,
        autogenerateOutlineSec = 5,
        lineEditorEnd = -1,        
        stoper = null,
        isShowConsole = false;
    
    //$("#"+this.idCodeEditorSplitter).splitter();   
    this.help.create();
    this.explorer.create();
   
    var compileDialog = function() {
        if (isContinueTutorial == "True") {
            that.canCompile({
                callbacks: {
                    run_success: function() {
                        //var isFind = false;
                        //EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: "dialog_code_editor_compile"}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
                        //that.startCompile();
                        callbackRunSuccess();                                                             
                    },
                    run_failed: function() {
                        callbackRunFailed();                               
                    },
                    logs: function(log) {
                        callbackLog(log);
                    }
                }
            });   
        } else {
            that.startCompile();
        } 
    }   
           
    $("#"+this.idDialog).dialog({
        autoOpen: false,
        resizable: false,
        //modal: true,
        title: '<span class="title">CODE EDITOR</span>',
        //position: [-50,0],                
        width: 1180,  //600, //
        height: 560, 
        closeOnEscape: false,
        buttons: {
            RUN: {
                text: "RUN",
                id: "dialog_code_editor_compile",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        

                    browserEmulator.isDebugger = false;
                    browserEmulator.debugInterrupt = false;
                    compileDialog();
                }                
            },
            NEXT_STEP: {
                text: "NEXT_STEP",
                id: "dialog_code_editor_next_step",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                    

                    that.nextStepDebugger();
                }           
            },             
            DEBUG: {
                //dialog_code_editor_debug
                text: "START DEBUG",
                id: "dialog_code_editor_debug",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                    

                    if (!browserEmulator.isDebugger) {
                        that.startDebugger(); 
                        compileDialog();
                        
                    } else {
                        // button has 'stop' text
                        that.stopDebugger();
                        that.clearConsole();
                    }
                    
                }             
            },
            /*CLOSE_DEBUGGER_VIEW: {
                text: "Close debuger view",
                id: "dialog_code_editor_close_debugger_view",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}

                    that.stopDebugger();                    
                }   
            },*/
            
            /*"STOP_DEBUG": {
                text: "STOP_DEBUG",
                id: "dialog_code_editor_stop_debug",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
                       
                    that.stopDebugger(); 
                }           
            },*/            
            CLOSE: {
                text: "CLOSE",
                id: "dialog_code_editor_close",
                click: function(ev) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: ev.currentTarget.id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
                       
                    $(this).dialog("close");
                }     
            } 
        },
        close: function( event, ui ) {            
            that.updateCodeOfManager();
            // set after update codes
            that.manager.setObjectOnCanvasByDefinitions();  
            window.clearInterval(timerAutosave);  
            window.clearInterval(timerAutogenerateOutline);  
            timerAutosave = undefined;         
            timerAutogenerateOutline = undefined;            
            
            // set current cursor
            var tabData = that.getTabDataByTabIndex(that.getActiveTab());       
            if (tabData && tabData.codeMirror) {           
                currentCursorPosition = tabData.codeMirror.getCursor();
            }                       
        },
        open: function(event, ui) {                                         
            
            $('.ui-dialog-buttonpane')
            .find('button:contains("COMPILE")')
            .removeClass('ui-button-text-only')
            .css('border',"0px")
            .css('background-color',"transparent")
            .html('<div id="dialog_code_editor_compile" class="dialog_img_compile"></div>');
            
            //that.setDisabledButton("DEBUG", false);
            //that.setDisabledButton("NEXT_STEP", true);
            //that.setDisabledButton("STOP_DEBUG", true);    
                        
            if (!browserEmulator.isDebugger) {            
                $("#dialog_code_editor_next_step").hide();
            }
                        
            var isHiddenDebuggerOption = false;            
            if (!application.isAlwaysDebugger) {         
                if (!isContinueTutorial) {
                    isHiddenDebuggerOption = true;
                } else if (isContinueTutorial == "True") {
                    isHiddenDebuggerOption = true;
                    for(var i=0; i < application.settings.debugger_lessons.length; i++) {
                        var _debugLes = application.settings.debugger_lessons[i];
                        if (_debugLes.module != undefined && _debugLes.lesson != undefined && moduleOrder != undefined && lessonOrder != undefined) {
                            if (parseInt(_debugLes.module) == parseInt(moduleOrder) && parseInt(_debugLes.lesson) == parseInt(lessonOrder)) {
                                isHiddenDebuggerOption = false;
                            }
                        }
                    }
                }           
            }
            if (isHiddenDebuggerOption) {
                $("#dialog_code_editor_next_step").hide();   
                $("#dialog_code_editor_debug").hide();   
            }
            
            // interrupt enter for "nextStep" and "Start/end debug" button
            $("#dialog_code_editor_next_step, #dialog_code_editor_debug").keypress(function (evt) {
                $(this).blur();
                var charCode = evt.charCode || evt.keyCode;
                if (charCode  == 13) { 
                    return false; 
                }
            });            
        },                     
    });   
    
    this.setDisabledButton = function(name, disabled) {
        var btn = $("#"+that.idDialog).parent().find('button:contains('+name+')');
        if (disabled) {
            btn.attr("disabled", "disabled");
        } else {
            btn.removeAttr("disabled");
        }
    } 
    
    //$("#"+this.idDialog+" .ui-dialog-titlebar").hide();
    $("#"+this.idDialog).parent().find(".ui-dialog-titlebar").hide();
    
    
    $("#"+this.idOpenDialog).click(function(){        
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
        
        that.openEditor();
    });
 
    $("#"+this.idCodeEditorRun).click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
        
        browserEmulator.sourceOpen = browserEmulator.SOURCE_OPEN_EDITOR;
        browserEmulator.debugInterrupt = false;
          
        var result = that.canCompile({
            callbacks: {
                run_success: function() {
                    //var isFind = false;
                    //EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: "dialog_code_editor_compile"}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
                    //that.startCompile();
                    callbackRunSuccess();                                                             
                },
                run_failed: function() {
                    callbackRunFailed();                    
                },
                logs: function(log) {
                    callbackLog(log);
                }
            }
        });
        if (!result) {
            browserEmulator.backToPrevScreen();
            messageDialog.showWithTwoButtons("Compilation", "Code is incorrect. ", "Open code editor", "Cancel", function() {
                that.openEditor();
                showErrorInLine();
            });
        }
        
    });    
    
    var findParamOfTabsData = function(paramReturn, paramSearched, valueSearched) {
        for(var i=0; i<tabsData.length; i++) {
            var tabObj = tabsData[i];
            if (tabObj.hasOwnProperty(paramSearched) && tabObj.hasOwnProperty(paramReturn) && tabObj[paramSearched] == valueSearched) {
                return tabObj[paramReturn];
            }
        }
        return undefined;
    }
    
    this.setDialogOptions = function(options) {
        $("#"+this.idDialog).dialog(options);        
    }
    
    this.setDialogPosition = function(options) {
        $("#"+this.idDialog).dialog("widget").css({ top: 30, left: 120 });
    }    
    
    // find object by object in array {search, value}
    this.findObjectOfTabsData = function(arraySearched) {
        for(var i=0; i<tabsData.length; i++) {
            var tabObj = tabsData[i];
            var isFind = true;
            
            for(var iProp=0; iProp < arraySearched.length; iProp++) {   
                var property = arraySearched[iProp];
                if (!(tabObj.hasOwnProperty(property.search) && tabObj[property.search] == property.value)) {
                    isFind = false;    
                } 
            }
            if (isFind) {
                return tabObj;
            }
        }
        return undefined;
    }    
    
    // TABS
    tabs.tabs({
        activate: function( event, ui ) {  			
			that.exeEventActiveTab();			
			that.updateOutline();
        },
        //collapsible: true,
    });
    
    
    this.exeEventActiveTab = function(options) {
        var indexActiveTab = that.getActiveTab(),
            tabData = that.getTabDataByTabIndex(indexActiveTab);
        if (tabData && tabData.codeMirror) {
            tabData.codeMirror.refresh();
            tabData.codeMirror.focus();
            tabData.codeMirror.setCursor(tabData.cursorPos);
            var tabDataExtension =  $.extend({}, tabData, options);
            EventsNotification.exe("cmActiveTab", tabDataExtension);
        }    
    }
    
    /*tabs.find( ".ui-tabs-nav" ).sortable({
      axis: "x",
      stop: function() {
        tabs.tabs( "refresh" );
      }
    });*/            
    
    //TODO
   // actual addTab function: adds new tab 
    this.addTab = function(tabTitle, tabExtension, isNotSwitchTab) {
      if (!that.findObjectOfTabsData([{search:"name", value:tabTitle},{search:"typeCode", value:tabExtension}]))  {
          var label = tabTitle+"."+tabExtension,
            id = "tabs-editor-" + tabUniqueId,
            idEditor = "tabs-editor-editor-" + tabUniqueId,
            idDebugger = "tabs-editor-debugger-" + tabUniqueId,
            idDetails = "tabs-editor-details-" + tabUniqueId,
            idCM = "code-mirror-" + tabUniqueId,
            idCMDebug = "code-mirror-debug-" + tabUniqueId,
            li = $( tabTemplate.replace( /#\{href\}/g, "#" + id ).replace( /#\{label\}/g, label ) ),
            textAreaElement = document.createElement("textarea"),
            textAreaElement2 = document.createElement("textarea"),
            code = getCodeFromBoardName(tabTitle, tabExtension),
            debugCode = "";
     
          tabs.find( ".ui-tabs-nav" ).append( li );
          tabs.append( '<div id="' + id + '"><div id="'+idEditor+'" style="float:left;width:50%"></div><div id="'+idDebugger+'" style="float:right;width:50%;"></div><div id="'+idDetails+'" style="float:right;display:none;"></div></div>');
          $(li).attr("board-name",label);
          
          for(var i=0; i < debugCodes.length; i++){
             if (tabTitle == debugCodes[i].name && tabExtension == debugCodes[i].typeCode) {
                 debugCode = debugCodes[i].code;
             }
          }

          textAreaElement.id = idCM;
          textAreaElement.value = code;
          $("#"+idEditor).append(textAreaElement);

          textAreaElement2.id = idCMDebug;
          textAreaElement2.value = debugCode;
          $("#"+idDebugger).append(textAreaElement2); 

          var codeMirrorObj = createdCodeMirrorObject(idCM),
              codeMirrorDebug = createdCodeMirrorDebug(idCMDebug),
              endLineToRecord = -1,
              filename = tabTitle+"."+tabExtension,
              isReadOnly =  isExistStringInArray(filename, readOnlyBoardsList);

          codeMirrorObj.setOption("readOnly", isReadOnly);
          
          /*var wrapElement = codeMirrorObj.getWrapperElement();   
          $(wrapElement).click(function(){
              alert('You click the editor');
          });*/
        /*codeMirrorObj.on('click', function() {
           if (tabData && tabData.codeMirror) {
               $("#"+tabData.codeMirror.idEditor).click(function() {
                   alert('You click the editor');
               });
           }
           //alert('You click the editor');
        });*/              
          
          var tabData = {
              id: id, 
              idEditor: idEditor,
              idDebugger: idDebugger,
              idDetails: idDetails,
              tab: li,
              name: tabTitle, 
              idCodeMirror: idCM, 
              idCodeMirrorDebug: idCMDebug, 
              codeMirror: codeMirrorObj, 
              codeMirrorDebug: codeMirrorDebug, 
              typeCode:tabExtension,
              isSaved: true,
              cursorPos: {line: 0, ch: 0},
              endLineToRecord: endLineToRecord
          } 
          tabsData.push(tabData);

          // if is instance adminEditor so is mode: editor
          //if (adminEditor && adminEditor.isRecording()) { 
          //  that.setEndLineForRecordingForTab(tabData); 
          //}          

          tabs.tabs( "refresh" );
          codeMirrorObj.refresh();
          tabUniqueId++;
        }
        
        // 
        
        if (!isNotSwitchTab) {       
            // switch to exist or created tab
            var indexTab = that.indexTabOfBoardName(tabTitle+"."+tabExtension);
            if (indexTab > -1) {
                that.activateTab(indexTab);
            }
        }
        that.refreshDebugger();
    }    
        
    
    // close icon: removing the tab on click
    tabs.delegate( "span.ui-icon-close", "click", function(ev) {
      
      //var panelId = $( this ).closest( "li" ).remove().attr( "aria-controls" );
      var panelId = $( this ).closest( "li" ).attr( "aria-controls" ),
          tabObj = that.findObjectOfTabsData([{search:"id",value: panelId}]);
          
        if (tabObj) {
            var filename = tabObj.name+"."+tabObj.typeCode;
            if (filename && !isExistStringInArray(filename, blockedClosedBoardsList) && !browserEmulator.isDebugger) {
       
                $( this ).closest( "li" ).remove(); // remove tab
                                     
                var index = tabsData.indexOf(tabObj);
                if (index > -1) {
                    that.updateCodes();      
                    console.log("tabs name:"+tabsData[index].name+" deleted! Now count:"+tabsData.length-1);
                    tabsData.splice(index,1);          
                }      
                $( "#" + panelId ).remove();      
                tabs.tabs( "refresh" );
            }
        }
    });

    this.indexTabOfBoardName = function(boardName) {    
        // every li of tab has added attr 'board-name'   
        var index = -1;  
        tabs.find(".ui-tabs-nav li").each(function(indexTab, element){
            var attrBoardName = $( this ).attr("board-name");
            if (attrBoardName && attrBoardName == boardName) {
                index = indexTab;
                return false;
            }
        });        
        return index;        
    }  
    
    this.getTabDataByTabIndex = function(index) {
        var tabData = undefined;
        tabs.find(".ui-tabs-nav li").each(function(indexTab, element){
            
            if (index == indexTab) {
                for(var i=0; i < tabsData.length; i++) {
                    if (tabsData[i].tab[0] == element) {
                        tabData = tabsData[i];
                        return false
                    }
                }
            }           
        });  
        return tabData;
    }        
    
    this.getActiveTab = function() {
        return tabs.tabs( "option", "active" );
    }    
    
    this.activateTab = function(indexTab) {
        tabs.tabs( "option", "active", indexTab );
    }
    
    this.openBoardCode = function(boardName, extension) {
        console.log("Open "+boardName);        
        that.addTab(boardName, extension);
    }  
    
    
    this.openBoardCodeWithCurrentError = function() {
        //that.addTab(that.manager.boardNameError, that.manager.boardExtensionError);
        that.jumpToLine(that.manager.boardNameError, that.manager.boardExtensionError, that.manager.numberLineError, TYPE_ERROR);
    }      
    
    // PROGRESS BAR
    
    progressBar.progressbar({
      value: false,
      change: function() {
        var progress = ((that.manager.compileProgress / that.manager.compileProgressMax)*100).toFixed(0);
        progressLabel.text( progress + "%" );
      },
      complete: function() {
        progressLabel.text( "Done!" );
      }
    });    
    
    this.setProgress = function() {
      var progress = that.manager.compileProgress;
      var progressMax = that.manager.compileProgressMax;
      
      progressBar.progressbar( "option", "max", progressMax );      
      var val = progressBar.progressbar( "value" ) || 0; 
      progressBar.progressbar( "value", progress );
      if ( progress < (progressMax - 1) ) {
        setTimeout(that.setProgress, 100 );
      }
      //console.log(progress+" "+progressMax);
    }    
    
    // CODE MIRRORS    
    var createdCodeMirrorObject = function(idTextArea) {        
        var codeMirrorObj = CodeMirror.fromTextArea(document.getElementById(idTextArea), {
            lineNumbers: true,
            styleActiveLine: false,
            mode:  "javascript",
            //matchBrackets: true,
            //continueComments: "Enter",
            //extraKeys: {"Ctrl-Q": "toggleComment"},
            smartIndent: (isEditTutorial == "True")?false:true,
            indentUnit: (isEditTutorial == "True")?0:2,
            indentWithTabs: (isEditTutorial == "True")?false:true,
            tabSize: (isEditTutorial == "True")?0:4,
            //viewportMargin: 25,
            //cursorScrollMargin: 5,
            viewportMargin: Infinity
        });

        
        codeMirrorObj.setSize("100%", (isShowConsole)?codeMirrorOptions.minHeight:codeMirrorOptions.maxHeight);          
        codeMirrorObj.on('cursorActivity', function(cm) {
            clearErrorInLine();
            codeMirrorObj.setOption("styleActiveLine", false);                       
            var tabData = that.findObjectOfTabsData([{search:"codeMirror", value:codeMirrorObj}]);
            if (tabData) {         
                tabData.isSaved = false;
                //console.log("tabData "+tabData.id+" was modified.")
                tabData.cursorPos = cm.getCursor();                
                that.generateByActiveLine();
                
                //that.removeEndLineForRecordingForTab(tabData);
                
                var params = $.extend(true, {}, {pos: cm.getCursor()});
                params = $.extend(true, params, {tabData: {name: tabData.name, typeCode: tabData.typeCode}});
                EventsNotification.exe("cursorActivity", params); 
                
                if (tabData.codeMirror) { 
                    var isFind = false;
                    var editorContent = tabData.codeMirror.getValue("");
                    EventsNotification.exe(SequencesSystemEvents.EVENT_WRITE_CODE, {textarea: editorContent}, function(r){ if (r) isFind = true;}); //if (!isFind) {Messages.tutorialWrong();return;}
                }              
            }
            
        });
        
        codeMirrorObj.on("scroll", function(cm) {
            var top = cm.getScrollInfo().top,
                left = cm.getScrollInfo().left,
                tabData = that.findObjectOfTabsData([{search:"codeMirror", value:cm}]);
            if (left != undefined && top != undefined && tabData) {
                setCodeMirrorScroll(tabData.name, tabData.typeCode, left, top);
            }
        });
        
        codeMirrorObj.on("change", function(cm, changeObj) {
            //var params = $.extend(true, {}, {change: changeObj});
            EventsNotification.exe("changeEditor", changeObj); 
        });
        
        codeMirrorObj.on("beforeSelectionChange", function(cm, selection) {
            EventsNotification.exe("selectionEditor", selection); 
        });    
        
        codeMirrorObj.on("keypress", function(cm) {
            
            if (browserEmulator.isDebugger) {
                messageDialog.show("Debug","Cannot edit code during debugging.","OK");
            }            
            
            var tabData = that.findObjectOfTabsData([{search:"codeMirror", value:cm}])
            if (tabData) {     
                var filename = tabData.name+"."+tabData.typeCode;
                if (isExistStringInArray(filename, readOnlyBoardsList)) {                
                    $(".opentip .tip_highlight").effect( "highlight", { color: "#ff0000" }, 400, function () {} );
                }
            }
            if (stoper) {
                stoper.reset();
                stoper.start();
            }            
        });               
          
        return codeMirrorObj;
    }
   
    var createdCodeMirrorDebug = function(idTextArea) {        
        var codeMirrorDebug = CodeMirror.fromTextArea(document.getElementById(idTextArea), {
            lineNumbers: false,
            styleActiveLine: false,
            mode:  "",
            smartIndent: false,
            indentUnit: 0,
            indentWithTabs: false,
            tabSize: 0
        });       
        codeMirrorDebug.setSize("100%", (isShowConsole)?codeMirrorOptions.minHeight:codeMirrorOptions.maxHeight);          
        
        codeMirrorDebug.on("scroll", function(cm) {
            if (!browserEmulator.isDebugger) {
                return;
            }
            var top = cm.getScrollInfo().top,
                left = cm.getScrollInfo().left,
                tabData = that.findObjectOfTabsData([{search:"codeMirrorDebug", value:cm}]);
            if (left != undefined && top != undefined && tabData) {
                setCodeMirrorScroll(tabData.name, tabData.typeCode, left, top);
            }
        });
                
        
        codeMirrorDebug.on("beforeChange", function(cm, changeObj) {       
            //var line = cm.getLine(that.manager.numberLineError);
            //browserEmulator.consoleCurrentCommandUser = line;
            if (changeObj.text.length == 2 && changeObj.text.join("") == "") {                 
                if (!browserEmulator.debugCanCreateNewLine) {
                    changeObj.cancel(); 
                }                
                browserEmulator.consoleCurrentCommandUserConfirmed = browserEmulator.consoleCurrentCommandUser;
            }
            /*
            var stringLastLine = cm.getLine(cm.lastLine());                         
            if (changeObj.from.line < cm.lastLine()) {
                changeObj.cancel();
            } else {
                if (changeObj.text.length == 2 && changeObj.text.join("") == "") {
                    browserEmulator.consoleLastCommandUser = stringLastLine;
                }
            }
            var countLetters = stringLastLine.length;
            cm.setCursor({line: cm.lastLine(), ch: countLetters });*/
            
        });                   
        
        codeMirrorDebug.on("keypress", function(cm, ev) {
            //if (ev.which == 13 ) { // enter             
            //    browserEmulator.isNextStep = true;
            //}
        });           
               
        
        return codeMirrorDebug;
    }    
    
    var setCodeMirrorScroll = function(boardName, boardExt, x, y) {
        var tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:boardExt}]);
        if (tabData) {
            if (tabData.codeMirror) {
                tabData.codeMirror.scrollTo(x, y);
            }
            if (tabData.codeMirrorDebug) {
                tabData.codeMirrorDebug.scrollTo(x, y);
            }
        }
    }    
    
    // PANELS     
    $("#code_editor_console_clear").click(function(){
        that.clearConsole();
    });     
    
    this.clearConsole = function() {
        $("#code_editor_console_text").text(""); 
    }
    
    this.showConsoleSection = function(isVisible) {
        if (isVisible) {
            $("#"+that.idCodeEditorConsoleSection).show();
        } else {
            $("#"+that.idCodeEditorConsoleSection).hide();
        }
    }
    
    this.showConsole = function(show) {
       isShowConsole = show;
       if (show) {
           for(var i=0; i < tabsData.length; i++) {
             tabsData[i].codeMirror.setSize("100%", codeMirrorOptions.minHeight);
             tabsData[i].codeMirrorDebug.setSize("100%", codeMirrorOptions.minHeight);
           } 
           tabs.css("min-height", (codeMirrorOptions.minHeight+50)+"px");
           $("#"+that.idCodeEditorPanelConsole).show();
           $("#"+that.idCodeEditorPanelNoConsole).hide();
           //$("#"+that.idCodeEditorOpenConsole)[0].disabled = true;
       } else {
           $("#"+that.idCodeEditorPanelConsole).hide();
           $("#"+that.idCodeEditorPanelNoConsole).show();
           for(var i=0; i < tabsData.length; i++) {
             tabsData[i].codeMirror.setSize("100%", codeMirrorOptions.maxHeight);
             tabsData[i].codeMirrorDebug.setSize("100%", codeMirrorOptions.maxHeight);
           } 
           tabs.css("min-height", (codeMirrorOptions.maxHeight+50)+"px");
           //$("#"+that.idCodeEditorOpenConsole)[0].disabled = false;   
       }
    }
    
    this.showOutline = function(show) {
        if (show) {
            $("#"+that.idCodeEditorPanelEditor).css({"width":"910px"}); 
            $("#"+that.idCodeEditorPanelOutline).show();
            $("#"+that.idCodeEditorOpenOutline).hide();
        } else {
            $("#"+that.idCodeEditorPanelEditor).css({"width":"100%"}); 
            $("#"+that.idCodeEditorPanelOutline).hide();
            $("#"+that.idCodeEditorOpenOutline).show();
        }
        if (browserEmulator.isDebugger) {
            $("#"+that.idCodeEditorOpenOutline).hide();
        }                                   
    }
    
    $("#"+this.idCodeEditorOpenConsole).click(function(){
       that.showConsole(true);
    });  
    
    $("#"+this.idCodeEditorCloseConsole).click(function(){
       that.showConsole(false);
    });    
    
    $("#"+this.idCodeEditorOpenOutline).click(function(){
        that.showOutline(true);          
    });     
    
    $("#"+this.idCodeEditorCloseOutline).click(function(){
        that.showOutline(false);                        
    });    
    
    // set default panels open 
    //this.showConsole(isShowConsole);
    //this.showOutline(false);
    
    
    // ENGINE

    // options.callbacks.run_success
    // options.callbacks.run_failed
    // options.callbacks.logs
    this.canCompile = function(options) {
        var result = false;
        
        browserEmulator.debugInterrupt = false;
        
        that.updateCodeOfManager(); // update code to compile
        
        var successCompile = that.manager.compile();
        if (successCompile) {
            that.manager.run(function(){
                result = true;
                if (options && options.callbacks && options.callbacks.run_success && typeof options.callbacks.run_success === "function") {
                    options.callbacks.run_success();
                }
            }, function() {
                if (options && options.callbacks && options.callbacks.run_failed && typeof options.callbacks.run_failed === "function") {
                    options.callbacks.run_failed();
                }                
            }, function(log) {
                if (options && options.callbacks && options.callbacks.logs && typeof options.callbacks.logs === "function") {
                    options.callbacks.logs(log);
                }   
            });               
        }           
        return result;
    }

    this.startCompile = function() {
        clearErrorInLine();
        that.updateCodeOfManager(); // update code to compile        
        //that.closeDialog();
        
        that.clearConsole(); 
        callbackLog("Start compile");
        
        // compile -> to ustawienie statement'sow do kompilacji
        var successCompile = that.manager.compile();
        if (successCompile) {
            
            
            setTimeout(function() {
                that.manager.run(callbackRunSuccess, callbackRunFailed, callbackLog);    
            }, 100);            
        }            
    }   
    
    var callbackRunSuccess = function() {
        //for(var i=0; i < Editor.editorObjects.length; i++) {
        //    Editor.editorObjects[i].refresh();
        //}
        
        activeElement.setNotActive();
        callbackLog("Compilation Done.");
        callbackLog("Run.");
        
        //canvas.setRenderBoardElements(true);
        //$("#"+that.idEditor).css("display","none");
        
        that.closeEditor();
        $("#editor").css({"display": "none"});
        browserEmulator.displayEmulator(true);
    }
    
    var callbackRunFailed = function() { 
        //canvas.setRenderBoardElements(false);
        
        browserEmulator.backToPrevScreen();
        showErrorInLine();
        
        /*var isOpenEditorDialog = $("#"+that.idDialog).dialog( "isOpen" );
        if (isOpenEditorDialog) {
            callbackLog("Compilation Failed.");
            showErrorInLine();
        } else {         
            $("#editor").css({"display": "b"});
            
            
            browserEmulator.displayEmulator(false);
            messageDialog.show("Compilation", "Compilation failed", "OK");
        }   */
    }
    

    /*this.getCursorPosition = function (lineNumber) {
        if (lineNumber > -1) {
            var lineCountGenerated = codeMirror[1].lineCount();
            if (lineNumber > lineCountGenerated) {
                 var lineResult = lineNumber - lineCountGenerated - 1;
                 return {line: lineResult, editorIndex: 0} ;
            } else {
                return {line: lineNumber, editorIndex: 1} ;
            }
        }
        return undefined;
    }*/
    
    var callbackLog = function(log) {
        qlog = $("#code_editor_console_text");
        qlog.text(qlog.text()+"\n"+log);
        qlog.scrollTop(qlog[0].scrollHeight);
    }            
              
    this.isOpen = function() {        
        return $("#"+that.idDialog).dialog( "isOpen" );
    }
    
    this.getCodeMirrorLineCount = function(codeMirrorObj) {
        codeMirrorObj.lineCount();         
    }        
    
    // end of init section            
    
    this.jumpToLine = function(boardName, boardExtension, lineNumber, type) {

        that.addTab(boardName, boardExtension); // before created tab or switch to this tab

        var tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:boardExtension}]),
            editor = tabData.codeMirror,
            indexTab = that.indexTabOfBoardName(tabData.name+"."+tabData.typeCode);
                  
        if (editor && indexTab > -1) {
            console.log("jump to: "+lineNumber+" tabIndex:"+indexTab);
            that.activateTab(indexTab);
            editor.refresh();
            //editor.focus();
            var delta = 6;
            
            // center
            editor.setCursor( {line: lineNumber-1+delta, ch:0}); //i, 0);
            editor.setCursor( {line: lineNumber-1-delta, ch:0}); //i, 0);
            // go to correct position
            editor.setCursor( {line: lineNumber-1, ch:0});
            
            if (type == TYPE_SELECT) {
                editor.setOption("styleActiveLine", true);
            }
            editor.refresh();
            //editor.focus();
			
            var viewport = editor.getViewport();
            console.log(editor.getViewport());
            
            /*if (!lastCursorPos) {
                lastCursorPos = objPos.line;
            }
            
            var addSY = 0;
            if (lastCursorPos < objPos.line) {
                addSY += 120; 
            } else {
                addSY -= 120;
            }
            
            lastCursorPos = objPos.line;
            var sY = $('.CodeMirror-scroll').scrollTop();
            $('.CodeMirror-scroll').scrollTop(sY+addSY);
            */
            
            /*
            var addSY = 0;
            if (lastCMViewport && lastCMViewport.from > viewport.from) {
                addSY -= 120;
            } else {
                addSY += 120;
            }                
            
            lastCMViewport = editor.getViewport();
            
            //console.log($('.CodeMirror-scroll').scrollTop());
            console.log($('.CodeMirror-scroll').scrollTop());
            var sY = $('.CodeMirror-scroll').scrollTop();
            $('.CodeMirror-scroll').scrollTop(sY+addSY);*/
            
            //console.log($('.CodeMirror-scroll').scrollTop(0).scrollTop());
            //$('.CodeMirror-scroll').scrollTop(0).scrollTop(valSY+50);
      
            /*if (false) {
                window.setTimeout(function() {
                   editor.addLineClass(objPos.line, null, "center-me");
                   var line = $('.CodeMirror-lines .center-me');                       
                   var h = line.parent();      
                   //console.log(h);          
                   $('.CodeMirror-scroll').scrollTop(0).scrollTop(line.offset().top - $('.CodeMirror-scroll').offset().top - Math.round($('.CodeMirror-scroll').height()/2));
               }, 10);         
           }  */     
        }
    }
    
    
    var clearErrorInLine = function() {
        if (that.manager.boardNameError && that.manager.boardExtensionError) {
            var tabData = that.findObjectOfTabsData([{search:"name", value:that.manager.boardNameError},{search:"typeCode", value:that.manager.boardExtensionError}]);
            if (tabData) {
                var editor = tabData.codeMirror;    
                if (editor) {
                    for(var i=0; i < editor.lineCount(); i++) {    
                        editor.removeLineClass(i, "wrap", "code_mirror_line_error");
                    }
                    editor.refresh();
                }
            } 
            //that.manager.boardNameError = "";
            //that.manager.boardExtensionError = "";
        }
    }    
    
    /*var getLastFillLine = function(tabData) {
        var lastFillLine = 0;       
        if (tabData && tabData.codeMirror) {
            for(var i=tabData.codeMirror.lineCount()-1; i >= 0 ; i--) {
                var lengthLine = tabData.codeMirror.getLine(i).length;
                if (lengthLine > 0) {
                    lastFillLine = i;
                    break;
                }
            }           
        }    
                
        return lastFillLine;    
    }
    
    

    this.setEndLineForRecordingForTab = function(tabData) {    
        //var tabData = that.getTabDataByTabIndex(that.getActiveTab());        
        if (tabData && tabData.codeMirror) {
            var line = getLastFillLine(tabData);
            if (line + 3 < tabData.codeMirror.lineCount()) {
                tabData.endLineToRecord = line + 2;
                tabData.codeMirror.addLineClass(tabData.endLineToRecord , "wrap", "code_mirror_line_writing_end");
            }
        }
    }
    
    this.setEndLineForRecordingAllOpenedTabs = function() { 
        for(var i=0; i < tabsData.length; i++) {
            that.setEndLineForRecordingForTab(tabsData[i]);
        }
    }    
    
    this.removeEndLineForRecordingForTab = function(tabData) {      
        if (tabData && tabData.codeMirror && tabData.endLineToRecord > -1) {
            tabData.codeMirror.removeLineClass(tabData.endLineToRecord, "wrap", "code_mirror_line_writing_end");
        }                
    }
    
    this.removeEndLineForRecordingAllOpenedTabs = function() { 
        for(var i=0; i < tabsData.length; i++) {
            that.removeEndLineForRecordingForTab(tabsData[i]);
        }
    }*/
   
    this.clearLinesType = function(classCss) {       
        for(var i=0; i < tabsData.length; i++) {            
            var tabData = tabsData[i];  
            if (tabData && tabData.codeMirror && tabData.codeMirrorDebug) {            
                for(var iL=0;iL < tabData.codeMirror.lineCount(); iL++) {
                    tabData.codeMirror.removeLineClass(iL , "wrap", classCss);
                    tabData.codeMirrorDebug.removeLineClass(iL , "wrap", classCss);
                    var marks = tabData.codeMirror.getAllMarks();   
                    for(var j=0; j < marks.length; j++) { marks[j].clear(); }
                    var marks = tabData.codeMirrorDebug.getAllMarks();   
                    for(var j=0; j < marks.length; j++) { marks[j].clear(); }
                }
            }
        }
    }   
   

    this.setLineType = function(boardName, boardExt, line, classCss, options) {
        for(var i=0; i < tabsData.length; i++) {            
            var tabData = tabsData[i];  
            if (tabData && tabData.codeMirror && tabData.codeMirrorDebug) {            
                if (tabData.name == boardName && tabData.typeCode == boardExt) { 
                    var showInCM = true,
                        showInCMDebug = true;                    
                    if (options) {
                        if (options.showInCM != undefined) { showInCM = options.showInCM; }
                        if (options.showInCMDebug != undefined) { showInCMDebug = options.showInCMDebug; }
                    }
                    if (showInCM) {
                        tabData.codeMirror.addLineClass(line, "wrap", classCss);
                    }   
                    if (showInCMDebug) { 
                        tabData.codeMirrorDebug.addLineClass(line, "wrap", classCss);
                    }                  
                }
            }
        }        
    }

    // range.from (line, ch), range.to (line, ch)
    this.setMarkType = function(boardName, boardExt, rangeFrom, rangeTo, classCss, options) {
        for(var i=0; i < tabsData.length; i++) {            
            var tabData = tabsData[i];  
            if (tabData && tabData.codeMirror && tabData.codeMirrorDebug) {            
                if (tabData.name == boardName && tabData.typeCode == boardExt) {                    
                    var showInCM = true,
                        showInCMDebug = false;                     
                    if (options) {
                        if (options.showInCM != undefined) { showInCM = options.showInCM; }
                        if (options.showInCMDebug != undefined) { showInCMDebug = options.showInCMDebug; }
                    }
                    if (showInCM) {
                        if (rangeFrom && rangeTo) {
                            tabData.codeMirror.markText(rangeFrom, rangeTo, { className:classCss });
                        }
                    }   
                    if (showInCMDebug) {
                        if (rangeFrom && rangeTo) {
                            tabData.codeMirrorDebug.markText(rangeFrom, rangeTo, { className:classCss });
                        }
                    }
                    
                }
            }
        }        
    }    
   
    this.setDebugLine = function(boardName, boardExt, line, options) {
        that.clearLinesType("code_mirror_line_debug");
        that.setLineType(boardName, boardExt, line, "code_mirror_line_debug", options);
        
    }    
    
    // rangeFrom:(line, ch),  rangeTo:(line, ch),  options.lineClass - name of Class of line for code mirror 
    this.setCodeSelectionRange = function(boardName, boardExt, rangeFrom, rangeTo, options) {
        if (options && options.lineClass) {            
            that.setMarkType(boardName, boardExt, rangeFrom, rangeTo, options.lineClass);
        }
    }    
    
    var showErrorInLine = function() {  
        if (that.manager.boardNameError && that.manager.boardExtensionError) {
            
            that.addTab(that.manager.boardNameError, that.manager.boardExtensionError); // before created tab or switch to this tab              
            var tabData = that.findObjectOfTabsData([{search:"name", value:that.manager.boardNameError},{search:"typeCode", value:that.manager.boardExtensionError}]),
                editor = tabData.codeMirror;
                
            that.jumpToLine(that.manager.boardNameError, that.manager.boardExtensionError, that.manager.numberLineError, TYPE_ERROR);
            that.showConsoleSection(true);
            that.showConsole(true);
            editor.addLineClass(that.manager.numberLineError-1, "wrap", "code_mirror_line_error");
            editor.refresh();
        }      
    }        
    
    
    this.addOrUpdateDebugLineDetails = function (options) {
        var indexUpdate = -1, op = options;
        for(var i=0; i < debugLineDetails.length; i++) {
            var line = debugLineDetails[i];
            if (line.name == op.name && line.typeCode == op.typeCode && line.lineNumber == op.lineNumber) {
                indexUpdate = i;
                break;
            }
        }       
        //TODO
        
        if (indexUpdate > -1) {
            debugLineDetails.splice(indexUpdate, 1, op);
        } else {
            debugLineDetails.push(op);
        }        
        this.refreshUpdateDebugLineDetails();
        
        /*name: that.boardNameError,
        typeCode: that.boardExtensionError,
        lineNumber: statement.lineNumber,
        statementType: statement.type,
        detailsCode: detailsString
        */
    }

    this.clearDebugLineDetailsForRange = function(boardName, typeCode, range) {
        for(var i=debugLineDetails.length-1; i >= 0; i--) {
            var line = debugLineDetails[i],
                tabData = that.findObjectOfTabsData([{search:"name", value:line.name},{search:"typeCode", value:line.typeCode}]),
                detailsBtn = null;
            if(tabData && tabData.codeMirrorDebug && line.name == boardName && line.typeCode == typeCode && line.lineNumber > range.from && line.lineNumber <= range.to ) {
                debugLineDetails.splice(i,1);
            }
        }
        this.refreshUpdateDebugLineDetails();
    }

    this.clearDebugLineDetails = function() {
        debugLineDetails = [];
        this.refreshUpdateDebugLineDetails();
    };
    
    this.refreshUpdateDebugLineDetails = function() {
        // remove DOM details buttons objects by className
        $(".debug_details_btn").remove();        
        // and add DOM details buttons once again
        for(var i=0; i < debugLineDetails.length; i++) {
            var line = debugLineDetails[i],
                tabData = that.findObjectOfTabsData([{search:"name", value:line.name},{search:"typeCode", value:line.typeCode}]),
                detailsBtn = null;
            if(tabData && tabData.codeMirrorDebug) {
                //tabData.codeMirrorDebug
                detailsBtn = document.createElement("div");
                $(detailsBtn).attr({
                    id: "debug_see_details"+i,
                    nr: i
                });
                //$("#dialog_code_editor").append(detailsBtn);             
                tabData.codeMirrorDebug.addWidget({ch:0 , line: line.lineNumber-1}, detailsBtn, true);
                detailsBtn.innerHTML = "See details"
                $(detailsBtn).addClass("debug_details_btn");
                $(detailsBtn).css({"left": "440px", "top": "+=-13px", "font-size": "11px", "z-index": 5, "width": "60px;", "height": "6px;", "background-color": "#ddd", "border": "1px solid #999", "cursor": "pointer"});
                //, 
                
                $(detailsBtn).click(function(){
                    var nr = parseInt($(this).attr("nr")),
                        debugDetails = debugLineDetails[nr];                    
                    isOpenDebugLineDetails = true;
                    that.refreshDebugger();
                    var html = '<div class="debug_details_section"><p class="code_explanation">Detail code explanation:</p>'+debugDetails.detailsCode+'<br/><canvas id=""></canvas><br /><input id="debug_back_from_details_section" type="button" value="Back"></div>';
                    $("#"+tabData.idDetails).html(html);
                    $("#debug_back_from_details_section").click(function(){
                        isOpenDebugLineDetails = false;
                        that.refreshDebugger();
                    });
                });
                
                // dane do generacji drzewka
                
                
                //Detail code explanation
            }
        }
    }    

    this.getStringActiveLine = function() {
        var tabData = that.getTabDataByTabIndex(that.getActiveTab());       
        if (tabData && tabData.codeMirror) {              
            var cursor = tabData.codeMirror.getCursor(),
                line =  tabData.codeMirror.getLine(cursor.line);
            return line;
        } 
    }
    
    var getCodeFromBoardName = function(boardName, boardExt) {
        var code = "";
        if (boardName == CODE_MAIN_NAME && boardExt == CODE_MAIN_EXT) {        
            code = application.mainCode;
        } else {
            var localBoardId = application.getScreenParamByParam("id", "name", boardName),
                codeObj = objectFromParamAndValue(application.codes, "screen_id", localBoardId);
            
            if (boardExt == that.boardExtension.code) {
                code = codeObj.user_code;
            }        
            if (boardExt == that.boardExtension.definitions) {
                code = codeObj.generated_code;
            } 
        }
        return application.codeSeparate2nl(code);
    }    
    
    // update all codes from code Mirror (to memory & base)
    this.updateCodes = function() {        
        for(var i=0; i < tabsData.length; i++) {            
            var tabObj = tabsData[i];  
            
            if (!tabObj.isSaved) {
                
                if (tabObj.name == CODE_MAIN_NAME && tabObj.typeCode == CODE_MAIN_EXT) {
                    var code = tabObj.codeMirror.getValue("\n");
                    application.mainCode = code;
                    // prepare to send ajax
                    var newCode = application.codeNl2separate(code);
                    newCode = specialCharsToHtml(newCode);
                    updateMainCode(newCode); // send AJAX
                    tabObj.isSaved = true;                    
                } else {                               
                    var localBoardId = application.getScreenParamByParam("id", "name", tabObj.name);
                    var codeObj = objectFromParamAndValue(application.codes, "screen_id", localBoardId);
                    
                    var userCode = codeObj.user_code;
                    var generatedCode = codeObj.generated_code;
                    
                    if (tabObj.typeCode == that.boardExtension.code) {
                        userCode = tabObj.codeMirror.getValue("\n");
                        codeObj.user_code = userCode;                
                    }
                    if (tabObj.typeCode == that.boardExtension.definitions) {
                        var generatedCode = tabObj.codeMirror.getValue("\n");
                        codeObj.generated_code = generatedCode;
                    }
                                
                    if (localBoardId && userCode != undefined && generatedCode!= undefined) {
                        var newUserCode = application.codeNl2separate(userCode);
                        var newGenCode = application.codeNl2separate(generatedCode);
                        newUserCode = specialCharsToHtml(newUserCode);
                        newGenCode = specialCharsToHtml(newGenCode);
                        updateCodes(localBoardId, newUserCode, newGenCode, 0); // send AJAX
                        tabObj.isSaved = true;
                    }
                }
            }
        }
    }
    
    
    this.updateCodeOfManager = function() {   
        var resultCodes = that.getLatestCodes();        
        that.manager.setCodes(resultCodes);
        
        // kopia kodu
    }
    
    this.getLatestCodes = function() {
        this.updateCodes(); // update codes from code mirror (to memory & base)
        var resultCodes = [],
        codeCompileObj = {board: null, boardName: CODE_MAIN_NAME, code: application.mainCode, definitions: "" };  
        resultCodes.push(codeCompileObj);
        
        // all boards
        var listScreensId = application.getScreenListByParam("id");
        for(var i=0; i < listScreensId.length; i++) {            
            var id = listScreensId[i],                
                codeObj = objectFromParamAndValue(application.codes, "screen_id", id),
                boardObj = objectFromParamAndValue(application.boardsList, "screen_id", id),
                boardName = application.getScreenParamByParam("name","id",id);
                codeCompileObj = {board: boardObj, boardName: boardName, code: codeObj.user_code, definitions: codeObj.generated_code };  
            resultCodes.push(codeCompileObj);
        }
        return resultCodes;
    }
    
    this.updateOutline = function() {      
        
        that.updateCodeOfManager();        
        that.manager.compile(); 
        
		var tabData = that.getTabDataByTabIndex(that.getActiveTab());		
		if (!tabData || !tabData.name) {
			return;
		}
		
        var boardName = tabData.name,
			statementsDef = that.manager.getStatementsDefByBoardName(boardName),
			statementsCode = that.manager.getStatementsCodeByBoardName(boardName),
			treeObjs = [],
			statements = [],
            statementsFunctions = [],           
            statementsClass = [],           
            statementsVars = [],           
			ext = "";
        	
		for(var iTypeCode=2; iTypeCode--;) {
			statements = (iTypeCode==1)?statementsDef:statementsCode;
			ext = (iTypeCode==1)?that.boardExtension.definitions:that.boardExtension.code;
						
			for(var i=0; i < statements.length; i++) {
				var statement = statements[i],
					object = {};
				
				if (statement.type == "var" || statement.type == "function" || statement.type == "class") {  
					object.data = {};
					object.attr = {};
					that.help.uniqueId++;                
					object.attr.id = that.help.idObjectTreePrefix+that.help.uniqueId;
					object.attr.lineNumber = statement.lineNumber;
					
					//"attr" : { "id" : "node_identificator"
					
					object.attr.boardName = boardName;            
					object.attr.boardExtension = ext;            			
					
					if (statement.type == "var" && statement.varObj) {                   
					   object.data.icon = "/gamedesigner/media/img/icon_statement.jpg";
					   object.data.title = statement.varObj.name; 
					   statementsVars.push(object);                    
					}                     
					if (statement.type == "function" && statement.functionObj) {
					   object.data.icon = "/gamedesigner/media/img/icon_function.jpg";
					   object.data.title = statement.functionObj.name;
					   statementsFunctions.push(object);
					}
					if (statement.type == "class" && statement.classObj) {
					   object.data.icon = "/gamedesigner/media/img/icon_class.jpg";
					   object.data.title = statement.classObj.name;
                       statementsClass.push(object);
					}                                                  
				}
			}
		}
		// treeObjs is array (list of elements)
        treeObjs = treeObjs.concat(statementsClass);
        treeObjs = treeObjs.concat(statementsFunctions);
        treeObjs = treeObjs.concat(statementsVars);
        that.help.refreshJSTree(treeObjs);

    }
    
    var createExplorerElement = function(boardName, ext) {
        that.explorer.uniqueId++;
        var object = {
            data: {
                title: boardName+"."+ext,
                icon: "/gamedesigner/media/img/icon_file.png"
            },
            attr: {
                id: that.explorer.idObjectTreePrefix+that.explorer.uniqueId,
                boardName: boardName,
                boardExtension: ext
            }
        };
        /*object.data = {};
        object.attr = {};                        
        object.attr.id = that.explorer.idObjectTreePrefix+that.explorer.uniqueId;
        object.attr.boardName = boardName;            
        object.attr.boardExtension = ext;            
        object.data.icon = "/gamedesigner/media/img/icon_file.png";
        object.data.title = boardName+"."+ext;*/        
        return object;
    }
    
    
    this.getListOfFiles = function() {
        var result = [],
            listScreensName = application.getScreenListByParam("name");
        result.push(CODE_MAIN_NAME+"."+CODE_MAIN_EXT);
                
        for(var i=0; i < listScreensName.length; i++) {
            for(var j=0; j < 2; j++) {                
                var boardName = listScreensName[i];
                var ext = (j==0)?that.boardExtension.code:that.boardExtension.definitions;           
                result.push(boardName+"."+ext);
            }
        }        
        return result;
    }
    
    this.updateExplorer = function() {
        var treeJSON = new Array();
        var listScreensName = application.getScreenListByParam("name");
        
        treeJSON.push(createExplorerElement(CODE_MAIN_NAME, CODE_MAIN_EXT));
        
        for(var i=0; i < listScreensName.length; i++) {
            for(var j=0; j < 2; j++) {                
                var boardName = listScreensName[i],
                    ext = (j==0)?that.boardExtension.code:that.boardExtension.definitions
                    object = createExplorerElement(boardName, ext);
                treeJSON.push(object);
            }
        }
        //console.log(treeJSON);
        that.explorer.refreshJSTree(treeJSON);        
    }
    
    // [{name},{...}]
    this.generateByNewObject = function(params) {
        if (params.length > 0) {            
            var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
            var boardName = application.getScreenParamByParam("name","id",boardId);
            for(var iP=0; iP < params.length; iP++) {
                var param = params[iP];
                if (param.name) {   
                    
                    var codeDeclarationVariable = that.templates.stringDeclatationNewObject(param.name, param.type);
                    codeObj.generated_code += "\n\n"+codeDeclarationVariable;
                }
            }
            // update code
            var newUserCode = application.codeNl2separate(codeObj.user_code),
                newGenCode = application.codeNl2separate(codeObj.generated_code),
                tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.definitions}]);
            newUserCode = specialCharsToHtml(newUserCode);
            newGenCode = specialCharsToHtml(newGenCode);
            updateCodes(boardId, newUserCode, newGenCode, codeObj.start); // send AJAX
            /*if (tabData) {
                var editor = tabData.codeMirror;
                if (editor) {
                    editor.setValue(codeObj.generated_code);
                }
            } */           
        } 
    }
    
    // [{name},{...}]
    this.generateByRemoveObject = function(params) {
        if (params.length > 0) {            
            var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
            var boardName = application.getScreenParamByParam("name","id",boardId);
            for(var iP=0; iP < params.length; iP++) {
                var param = params[iP];
                if (param.name) {
                    var codeArray = codeObj.generated_code.split("\n"),
                        wasChanged = false;
                    
                    // try change exist definitions
                    for(var i=0; i < codeArray.length; i++) {
                        var code = codeArray[i],
                            definition = Editor.definitions.definitionsFromCode(code);
               
                        if (definition.length > 0 && definition[0].variable == param.name) {
                            codeArray.splice(i,1);
                            i--;                                                 
                        }
                    }
                    codeObj.generated_code = codeArray.join("\n");  
                }
            }
            // update code
            var newUserCode = application.codeNl2separate(codeObj.user_code),
                newGenCode = application.codeNl2separate(codeObj.generated_code),
                tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.definitions}]);
            newUserCode = specialCharsToHtml(newUserCode);
            newGenCode = specialCharsToHtml(newGenCode);
            updateCodes(boardId, newUserCode, newGenCode, codeObj.start); // send AJAX
            if (tabData) {
                var editor = tabData.codeMirror;
                if (editor) {
                    editor.setValue(codeObj.generated_code);
                }
            }
        } 
    }
    
    // [{name, parameter, value },{...}]    // change parameters and variable name instance
    this.generateByChangeParam = function(params) {  // change on canvas
                
        if (params.length > 0) {
            var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
            var boardName = application.getScreenParamByParam("name","id",boardId);
     
            for(var iP=0; iP < params.length; iP++) {
                var param = params[iP];
                if (param.name) {       
                    var codeArray = codeObj.generated_code.split("\n");
                    var wasChanged = false;
                    
                    // try change exist definitions
                    for(var i=0; i < codeArray.length; i++) {
                        var code = codeArray[i],
                            codeObjectParameter = code,
                            definition = Editor.definitions.definitionsFromCode(code);
               
                        if (definition.length > 0 && definition[0].variable == param.name) {
                            var def = definition[0];
                            
                            // change name of equal
                            if (def.codeType == STATEMENT_CODE_TYPE_EQUAL) {
                                if (param.parameter == "name") {
                                    codeObjectParameter = that.templates.stringObjectParameter(param.value, def.parameter, def.value);
                                    wasChanged = true;
                                } else if (def.parameter == param.parameter) {
                                    codeObjectParameter = that.templates.stringObjectParameter(param.name, param.parameter, param.value);
                                    wasChanged = true;
                                }
                            }
                            // change name of actions
                            if (def.codeType == STATEMENT_CODE_TYPE_ACTION && param.parameter == "name") {
                                codeObjectParameter = code.replace(param.name, param.value); // change first founded
                                wasChanged = true;
                            }
                            // change name of instance new object   
                            if (def.newObject && param.parameter == "name") {
                                var index = Editor.objectIndexByName(param.name);
                                if (index > -1) {
                                    Editor.editorObjects[index].name = param.value;
                                }
                                codeObjectParameter = code.replace(param.name, param.value);
                                wasChanged = true;
                            }                            
                            codeArray[i] = codeObjectParameter;                            
                        }
                    }
                     // add definition when not found
                    if (!wasChanged) {                       
                        for(var i=0; i < codeArray.length; i++) {
                            var code = codeArray[i]; 
                            var definition = Editor.definitions.definitionsFromCode(code);
                            if (definition.length > 0 && definition[0].variable == param.name && definition[0].newObject) {
                                var def = definition[0];
                                var codeObjectParameter = that.templates.stringObjectParameter(param.name, param.parameter, param.value);
                                i++;
                                codeArray.splice(i, 0, codeObjectParameter);                                                
                            }
                        }
                    }
                    codeObj.generated_code = codeArray.join("\n");  
                }                             
            }            
            // update code
            var newUserCode = application.codeNl2separate(codeObj.user_code),
                newGenCode = application.codeNl2separate(codeObj.generated_code),
                tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.definitions}]);
            newUserCode = specialCharsToHtml(newUserCode);
            newGenCode = specialCharsToHtml(newGenCode);
            updateCodes(boardId, newUserCode, newGenCode, codeObj.start); // send AJAX
            if (tabData) {
                var editor = tabData.codeMirror;
                if (editor) {                    
                    editor.setValue(codeObj.generated_code);
                }
            }
        }
    }    
    
     // [{name: string},{...}]
    this.generateByChangeActions = function(params) {  // change on canvas in actions tree 
        if (params.length > 0) {            
            var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
            var boardName = application.getScreenParamByParam("name","id",boardId);
     
            for(var iP=0; iP < params.length; iP++) {
                var param = params[iP];
                if (param.name) {            
                    var codeArray = codeObj.generated_code.split("\n");
                    //var wasChanged = false;
                    
                    // remove all actions from code
                    for(var i=0; i < codeArray.length; i++) {
                        var code = codeArray[i];
                        var definition = Editor.definitions.definitionsFromCode(code);
                        if (definition.length > 0 && definition[0].variable == param.name && definition[0].codeType == STATEMENT_CODE_TYPE_ACTION) {
                            codeArray.splice(i,1);
                            i--;
                        }
                    }
                    //if (!wasChanged) {
                        // add definition when not found
                    for(var i=0; i < codeArray.length; i++) {
                        var code = codeArray[i]; 
                        var definition = Editor.definitions.definitionsFromCode(code);
                        if (definition.length > 0 && definition[0].variable == param.name && definition[0].newObject) {
                            var def = definition[0];
                            
                            // actions
                            var element = canvas.elementForBoardIdAndName(boardId, param.name);
                            if (element && element.dataset && element.dataset.designActions) {                            
                                var codeToAdd = that.manager.generateActions(param.name, element.dataset.designActions);
                          
                                if (codeToAdd != "") {
                                    i++;
                                    codeArray.splice(i, 0, codeToAdd);
                                }                                 
                            }                            
                                                                           
                        }
                    }
                    //}
                    codeObj.generated_code = codeArray.join("\n");  
                }
                
              
            }            
            var newUserCode = application.codeNl2separate(codeObj.user_code),
                newGenCode = application.codeNl2separate(codeObj.generated_code),
                tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.definitions}]);
            newUserCode = specialCharsToHtml(newUserCode);
            newGenCode = specialCharsToHtml(newGenCode);
            updateCodes(boardId, newUserCode, newGenCode, codeObj.start); // send AJAX
            if (tabData) {
                var editor = tabData.codeMirror;
                if (editor) {                    
                    editor.setValue(codeObj.generated_code);
                }
            }
        }
    }    
         
    this.generateMainCode = function(boardName) {
        
        /*var mainCode = application.mainCode.trim();
        if (mainCode == "") {
            if (application.boardsList.length > 0) {
                var tmpScreen = objectFromParamAndValue(application.screenObjectList, "id", application.boardsList[0].screen_id);
                if (tmpScreen && tmpScreen.name) {
                    mainCode = ""+tmpScreen.name+".run();";
                    application.mainCode = mainCode;
                    // prepare to send ajax
                    mainCode = specialCharsToHtml(mainCode);
                    updateMainCode(mainCode); // send AJAX                
                }
            }
        }   */     	                
    }
    
    this.generateByActiveLine = function() {
        var boardName = application.getScreenParamByParam("name","id",boardId);
        var tabData = that.getTabDataByTabIndex(that.getActiveTab());       
        if (tabData && tabData.codeMirror && tabData.typeCode == that.boardExtension.definitions && tabData.name == boardName) {                
            var //lineString = that.getStringActiveLine(),
                linesDefinitions = tabData.codeMirror.getValue("\n"),
                definitions = Editor.definitions.definitionsFromCode(linesDefinitions);
                
            // set object on canvas by definitions
            var result = that.checkDefinitionsCorrect(linesDefinitions);
            
            // find any error in definitions
            if (!result.isCorrect) {                
                that.manager.boardNameError = tabData.name;
                that.manager.boardExtensionError = tabData.typeCode;
                that.manager.numberLineError = result.errorLineNumber;                
                tabData.codeMirror.addLineClass(result.errorLineNumber-1, "wrap", "code_mirror_line_error");
                tabData.codeMirror.refresh();
                
                canvas.setRenderBoardElements(false);
            } else {
                canvas.setRenderBoardElements(true);
            }
        }
    }
    
    this.checkDefinitionsCorrect = function(definitionsCode) {
        var definitions = Editor.definitions.definitionsFromCode(definitionsCode);
        // set object on canvas by definitions
        var result = Editor.definitions.setObjectOnCanvasByDefinitions(definitions);
        return result;
    }
    
    this.jumpToLineForObjectName = function(elementName) {
        var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId),
            definitions = Editor.definitions.definitionsFromCode(codeObj.generated_code),
            boardName = application.getScreenParamByParam("name","id",boardId);
        
        for(var i=0; i < definitions.length; i++) {
            var def = definitions[i];
            if (def && def.newObject && def.variable == elementName) {
                that.openEditor();
                that.jumpToLine(boardName, that.boardExtension.definitions, def.lineNumber, TYPE_SELECT);
                return;
            }
        }
        
        console.log(definitions);
    }
    
    
    this.setFocusOnEditor = function() {
        var tabData = that.getTabDataByTabIndex(that.getActiveTab());       
        if (tabData && tabData.codeMirror) {  
            tabData.codeMirror.refresh();          
            tabData.codeMirror.focus();
        }
    } 
       
    this.clearSnapshot = function() {        
        snapshotLatestCode = []
    }          
       
    this.doSnapshotCode = function() {        
        snapshotLatestCode = that.getLatestCodes();
    }        
    
    this.receiveFromSnapshotCode = function() {
       if (snapshotLatestCode && snapshotLatestCode.length > 0) {

           for(var i=0; i < snapshotLatestCode.length; i++) {
               var snapCode = snapshotLatestCode[i], // >>   boardName, code, definitions
                   code = "",
                   boardName = snapCode.boardName;
                                      
                var tabDataDef = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.definitions}]);
                var tabDataCode = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:that.boardExtension.code}]);
              
                if (boardName == CODE_MAIN_NAME) {        
                    application.mainCode = snapCode.code;
                    
                    if (tabDataCode && tabDataCode.codeMirror) {
                        tabDataCode.codeMirror.setValue(application.mainCode);
                    }                    
                    // refresh codeMirror
                } else {
                    var localBoardId = application.getScreenParamByParam("id", "name", boardName),
                        codeObj = objectFromParamAndValue(application.codes, "screen_id", localBoardId);
                    
                    codeObj.generated_code = snapCode.definitions;
                    codeObj.user_code = snapCode.code;
                    
                    if (tabDataDef && tabDataDef.codeMirror) {
                        tabDataDef.codeMirror.setValue(codeObj.generated_code);
                    }
                    if (tabDataCode && tabDataCode.codeMirror) {
                        tabDataCode.codeMirror.setValue(codeObj.user_code);
                    }
                }
           }
       }
    }    
       
    this.writeInActiveCodeMirror = function(dataKeys, callbackRun, callbackPause, callbackStop, options) {
        
        window.clearInterval(timerAutosave); // interrupt timer during autowriring
        timerAutosave = null;            
        that.doSnapshotCode();
          
        if (dataKeys.length > 0) {
            aWriteCM = new AutowritingCodeMirror({
                typeWriting: "keys",
                //codeMirror: tabData.codeMirror,
                codeEditor: that,  
                text: 'var text = "hello world";\ntext = "autowriting"; // komentarz\nshowAlert("Show text: "+text);\n\n\n',
                dataKeys: dataKeys,
                events: {
                    run: function() {
                        if (callbackRun && typeof callbackRun == "function") {
                            callbackRun();
                        }
                    },                        
                    pause: function() {
                        if (callbackPause && typeof callbackPause == "function") {
                            callbackPause();
                        }
                    },
                    stop: function() {                        
                        if (!timerAutosave) {
                            timerAutosave = window.setInterval(this.updateCodes, autosaveSec*1000);
                        }
                        function stopEvent() {
                            if (callbackStop && typeof callbackStop == "function") {
                                callbackStop();
                            }
                        }                                        
                        // const animation add to lesson X, to click button Run
                        
                        /*if (isLessonHelloWorldRun()) {
                            var animClick = new AnimClick();
                            animClick.start("dialog_code_editor_compile", stopEvent);
                        } else {
                            stopEvent();
                        }*/
                        stopEvent();
                    }
                }
            });
            if (options && typeof options["isSound"] !== "undefined") {
                if (!options.isSound) {
                    aWriteCM.setEqualInterval();
                }
            }
            aWriteCM.run();
        }
    }   
    
    this.stopWriteInActiveCodeMirror = function() {
        if (aWriteCM) {
            aWriteCM.stop();
        }
    }
    
    this.setReadOnlyDebugForAll = function(isReadOnly) {
        for(var i=0; i < tabsData.length; i++) {
            var tabData = tabsData[i];
            if (tabData && tabData.codeMirrorDebug) {
                if (isReadOnly) {
                  //  tabData.codeMirrorDebug.markText({line: 0, ch: 0}, {line: tabData.codeMirrorDebug.lastLine(), ch: Number.MAX_VALUE}, {readOnly: isReadOnly});
                } else {
                    tabData.codeMirrorDebug.markClean();
                }
            } 
        }
    }        
    
    this.setReadOnlyDebugForLine = function(boardName, boardExt, line, isReadOnly) {
        var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]);
        if (tabData && tabData.codeMirrorDebug) {
            tabData.codeMirrorDebug.markText({line: line-1, ch: 0}, {line: line+1, ch: Number.MAX_VALUE}, {readOnly: isReadOnly});
        }
    }
        
    /*this.clearReadOnlyDebugForRange = function(boardName, boardExt, line, range) {
        var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]);
        if (tabData && tabData.codeMirrorDebug && range) {
            var markText = tabData.codeMirrorDebug.markText({line: line-1, ch: range.from}, {line: line-1, ch: range.to}, {readOnly: true});
        }
    } */      
    
    this.setDebugConsoleRead = function(boardName, boardExt, line, range) {
        //if (!textMarkerConsoleRead) {
            var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]);
            if (tabData && tabData.codeMirrorDebug && range) {
                textMarkerConsoleRead = tabData.codeMirrorDebug.markText({line: line-1, ch: range.from}, {line: line-1, ch: range.to}, {readOnly: true});
                //tabData.codeMirrorDebug.setCursor({line: line-1, ch: range.to });
                
                            
                //var markText = tabData.codeMirrorDebug.markText({line: line-1, ch: range.from}, {line: line-1, ch: range.to}, {readOnly: true});
                //return {cmDebug: tabData.codeMirrorDebug, markText: markText}
            }
        //}
    }
    
    this.removeDebugConsoleRead = function() {
        if (textMarkerConsoleRead) {
            textMarkerConsoleRead.clear();
            textMarkerConsoleRead = null;
        }
    }   
    
    /*this.setReadOnlyDebugForRange = function(boardName, boardExt, line, range) {
        var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]);
        if (tabData && tabData.codeMirrorDebug && range) {
            var markText = tabData.codeMirrorDebug.markText({line: line-1, ch: range.from}, {line: line-1, ch: range.to}, {readOnly: true});
        }
    } */    
    
    

    this.setReadOnlyForAllFile = function(isReadOnly) {
        if (!isReadOnly) {
            readOnlyBoardsList = [];
        } else {
            readOnlyBoardsList = that.getListOfFiles();
        }
        for(var i=0; i < tabsData.length; i++) {
            var tabData = tabsData[i];
            if (tabData && tabData.codeMirror) {
                tabData.codeMirror.setOption("readOnly", isReadOnly);
            } 
        }
    }    

    this.setReadOnlyForFile = function(filename, isReadOnly) {
        if (isReadOnly) {
            if (!isExistStringInArray(filename, readOnlyBoardsList)) {
               readOnlyBoardsList.push(filename); 
            }            
        } else {
            removeObjectFromObjectsArray(filename, readOnlyBoardsList);
        }
        var nameAndExt = filename.split(".");
        if (nameAndExt.length == 2) { 
            var boardName = nameAndExt[0],
                boardExtension = nameAndExt[1],
                tabData = that.findObjectOfTabsData([{search:"name", value:boardName},{search:"typeCode", value:boardExtension}]);
            if (tabData && tabData.codeMirror) {
                tabData.codeMirror.setOption("readOnly", isReadOnly);
            }
        }
    }    
    
    this.setBlockedClosedForAllFile = function(isBlocked) {
        if (!isBlocked) {
            blockedClosedBoardsList = [];
        } else {
            blockedClosedBoardsList = that.getListOfFiles();
        }
    }    
    
    this.setBlockedClosedForFile = function(filename, isBlocked) {
        if (isBlocked) {
            if (!isExistStringInArray(filename, blockedClosedBoardsList)) {
               blockedClosedBoardsList.push(filename); 
            }            
        } else {
            removeObjectFromObjectsArray(filename, blockedClosedBoardsList);
        }
    }  
    
    
    // boardName: string, boardExt: string, range: {from, to}
    this.indexOfDebugCodeForBoard = function(boardName, boardExt) {
        for(var i=0; i < debugCodes.length; i++){
            if (boardName == debugCodes[i].name && boardExt == debugCodes[i].typeCode) {
                return i;
            }
        }
        return -1;
    }
    
    this.resetEditorDebug = function() {
        debugCodes = [];
        for (var i=0; i < tabsData.length; i++){
            var tabData = tabsData[i];
            if(tabData && tabData.codeMirrorDebug) {
                var posStart = {line: 0, ch: 0},
                    posEnd = {line: tabData.codeMirrorDebug.lastLine(), ch: Number.MAX_VALUE};                                            
                tabData.codeMirrorDebug.replaceRange("", posStart, posEnd);                        
            }
        }    
    }
    
    this.setEditorDebugForCode = function(boardName, boardExt, code) {          
        var isFind = false,
            index = this.indexOfDebugCodeForBoard(boardName, boardExt);        
        if (index > -1) {
            debugCodes[index].code = code;
            isFind = true;
        }        
        /*for(var i=0; i < debugCodes.length; i++){
            if (boardName == debugCodes[i].name && boardExt == debugCodes[i].typeCode) {
                debugCodes[i].code = code;
                isFind = true;
            }
        }*/
        if (!isFind) {
            debugCodes.push({
                name: boardName,
                typeCode: boardExt,
                code: code
            });
        }
        
        var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]);        
        if(tabData && tabData.codeMirrorDebug) {
            
            //var posStart = {line: 0, ch: 0},
             //   posEnd = {line: tabData.codeMirrorDebug.lastLine(), ch: Number.MAX_VALUE};                                            
            //tabData.codeMirrorDebug.replaceRange("", posStart, posEnd);                        
            tabData.codeMirrorDebug.setValue(code+"\n");
            tabData.codeMirrorDebug.refresh();
        }        
    }
        
    // boardName: string, boardExt: string, range: {from, to}
    this.clearEditorDebugForRange = function(boardName, boardExt, range) {
        var tabData = that.findObjectOfTabsData([{search:"name", value: boardName},{search:"typeCode", value: boardExt}]),        
            index = this.indexOfDebugCodeForBoard(boardName, boardExt);        
        if(tabData && tabData.codeMirrorDebug && range) {  
                      
            for(var i=range.from; i < range.to; i++) {
                tabData.codeMirrorDebug.replaceRange("", {line: i, ch: 0}, {line: i, ch: Number.MAX_VALUE});
                if (index > -1) {
                    var debugCodesArray = debugCodes[index].code.split("\n");
                    debugCodesArray[index] = "";
                    debugCodes[index].code = debugCodesArray.join("\n");
                }
            }                        
        }        
    }
    
    // boardName: string, boardExt: string, code: string, line: int
    this.setEditorDebugForCodeLine = function(boardName, boardExt, code, line) {        
        var index = this.indexOfDebugCodeForBoard(boardName, boardExt);
        if (index > -1) {
            var debugCodesArray = debugCodes[index].code.split("\n");
            debugCodesArray[line] = code;
            debugCodes[index].code = debugCodesArray.join("\n");
        }
        /*
        for(var i=0; i < debugCodes.length; i++){
            if (boardName == debugCodes[i].name && boardExt == debugCodes[i].typeCode) {
                var debugCodesArray = debugCodes[i].code.split("\n");
                debugCodesArray[line] = code;
                debugCodes[i].code = debugCodesArray.join("\n");
                return;
            }
        }*/
    } 
    
    
    this.startDebugger = function() {
        browserEmulator.isDebugger = true;
        browserEmulator.isNextStep = true;
        browserEmulator.debugInterrupt = false;
        isOpenDebugLineDetails = false;
        //that.setDisabledButton("DEBUG", true);
        //that.setDisabledButton("NEXT_STEP", false);
        //that.setDisabledButton("STOP_DEBUG", false);
        that.setReadOnlyForAllFile(true);
        that.showOutline(false);
        that.showConsole(false);
        that.showConsoleSection(false);
        
        $('#dialog_code_editor_debug').button('option', 'label', 'STOP DEBUG');
        $("#dialog_code_editor_next_step").show();
        $("#dialog_code_editor_compile").hide();
        
        that.refreshDebugger();
    }
    
    this.stopDebugger = function() {
        browserEmulator.isDebugger = false;
        browserEmulator.isNextStep = false;
        browserEmulator.debugInterrupt = true;
        browserEmulator.isRunning = false;
        isOpenDebugLineDetails = false;
        
        //that.setDisabledButton("DEBUG", false);
        //that.setDisabledButton("NEXT_STEP", true);
        //that.setDisabledButton("STOP_DEBUG", true);
        that.clearLinesType("code_mirror_line_debug");
        that.clearLinesType("code_mirror_line_conditional");
        that.setReadOnlyForAllFile(false);
        that.clearDebugLineDetails();
        that.showOutline(false);
        that.showConsole(false);
        that.showConsoleSection(true);
        
        $('#dialog_code_editor_debug').button('option', 'label', 'START DEBUG')
        $("#dialog_code_editor_next_step").hide()
        $("#dialog_code_editor_compile").show();
        
        that.refreshDebugger();
    }
    
    this.nextStepDebugger = function() {
       if (browserEmulator.isDebugger ) {
            browserEmulator.isNextStep = true;
            isOpenDebugLineDetails = false;
            that.refreshDebugger();                        
        }        
    }
    
    this.refreshDebugger = function() {        
        for(var i=0; i < tabsData.length; i++) {
            var tabData = tabsData[i];
            if (tabData) {
                if (browserEmulator.isDebugger) { 
                    $("#"+tabData.idEditor).css("width","50%");
                    if (!isOpenDebugLineDetails) {
                        $("#"+tabData.idDebugger).css("width","50%");
                        $("#"+tabData.idDebugger).css("display","block");
                        $("#"+tabData.idDetails).css("width","0%");
                        $("#"+tabData.idDetails).css("display","none");
                    } else {
                        $("#"+tabData.idDebugger).css("width","0%");
                        $("#"+tabData.idDebugger).css("display","none");
                        $("#"+tabData.idDetails).css("width","50%");                        
                        $("#"+tabData.idDetails).css("display","block");
                    }
                } else {
                    $("#"+tabData.idEditor).css("width","100%");
                    $("#"+tabData.idDebugger).css("width","0%");
                    $("#"+tabData.idDetails).css("width","0%");
                    $("#"+tabData.idDebugger).css("display","none");
                    $("#"+tabData.idDetails).css("display","none");
                }
            } 
        } 
    }    

    this.openEditor = function() {
        $("#"+this.idDialog).dialog("open");
        browserEmulator.sourceOpen = browserEmulator.SOURCE_OPEN_CODE_EDITOR;
        
        //$("#"+that.idEditor).css("display","block");        
        //$("#editor").css("display","none");
        //browserEmulator.displayEmulator(false);
        
        if (!timerAutosave) {
            timerAutosave = window.setInterval(this.updateCodes, autosaveSec*1000);
        }
        if (!timerAutogenerateOutline) {
            timerAutogenerateOutline = window.setInterval(this.updateOutline, autogenerateOutlineSec*1000);
        }
        
        if (!stoper) {
            stoper = new Stoper();
            stoper.addLoopEvents("STOPER: update outline",1500, function(name) {
                stoper.stop();
                console.log(name);                
                that.updateOutline();                
            });
        }        
        
        this.generateMainCode();
        //var boardName = application.getScreenParamByParam("name","id",boardId);
        //if (firstOpenDialog && boardName) {
        //    that.addTab(boardName, that.boardExtension.code);
        //    that.addTab(boardName, that.boardExtension.definitions);
        //}
        if (firstOpenDialog) {
            that.addTab(CODE_MAIN_NAME, CODE_MAIN_EXT);
            that.showOutline(false);
            that.showConsole(isShowConsole);
        }
        
        //tabs.tabs( "option", "active", 0 );
        var tabData = that.getTabDataByTabIndex(that.getActiveTab());       
        if (tabData && tabData.codeMirror) {  
            tabData.codeMirror.refresh();
            tabData.codeMirrorDebug.refresh();          
            //tabData.codeMirror.focus();            
            if(currentCursorPosition && currentCursorPosition.line && currentCursorPosition.ch) {
                tabData.codeMirror.setCursor(currentCursorPosition);
            }           
        }
                
        that.updateOutline();     
        that.updateExplorer();
        firstOpenDialog = false;  
    }  
       		
    this.closeEditor = function() { 
        $("#"+this.idDialog).dialog("close");
    }      
    
      	
    		
}
var BoardsManager = new BoardsManager();

var Editor = {
    definitions: new CodeEditorDefinitions(),    
    statements: new CodeEditorStatements(),
    indexActiveBoard: -1,  // active board during compilation 
    timeIntervalList: [], 
    timeOutList: [], 
    filenameList: [],
    alertQueue: [],
    canOpenAlert: true,
    mappingActions: new Array([ACTIONS_ONCLICK,EDITOR_ONCLICK],
                              [ACTIONS_ONDROP,EDITOR_ONDROP],
                              [ACTIONS_SHOW_ELEMENT,EDITOR_SHOW_OBJECT],
                              [ACTIONS_HIDE_ELEMENT,EDITOR_HIDE_OBJECT],
                              [ACTIONS_RUN_XML,EDITOR_GO_TO_BOARD],
                              [ACTIONS_PLAY_MP3,EDITOR_PLAY_MP3],
                              [ACTIONS_STOP_MP3,EDITOR_STOP_MP3],
                              [ACTIONS_SHOW_IMAGE,EDITOR_SHOW_IMAGE],
                              [ACTIONS_SHOW_TPOPUP,EDITOR_SHOW_POPUP],
                              [ACTIONS_INITIATE_CONVERSATION,EDITOR_INITIATE_CONVERSATION],
                              [ACTIONS_TAKE_ITEM,EDITOR_TAKE_ITEM],
                              [ACTIONS_DROP_ITEM,EDITOR_DROP_ITEM] ),
    uniqueId: 0,
    editorObjects: new Array(),
    removeObjectsNotRelatedWithCanvas: function() {
        if (this.editorObjects.length > 0) {
            for(var i=this.editorObjects.length-1; i >= 0; i--) {
                if (this.editorObjects[i].type != ELEMENT_TYPE_BOARD && !this.editorObjects[i].getElement()) {
                    this.editorObjects.splice(i, 1);
                } else if (this.editorObjects[i].type == ELEMENT_TYPE_BOARD) {
                    this.editorObjects.splice(i, 1);
                }                            
            }
        }
        //this.editorObjects.splice(0,this.editorObjects.length);
    },
    removeObjectWithName: function(name) {
        if (this.editorObjects.length > 0) {
            for(var i=this.editorObjects.length-1; i >= 0; i--) {
                if (this.editorObjects[i].name == name) {
                    this.editorObjects.splice(i, 1);
                }                            
            }
        }
        //this.editorObjects.splice(0,this.editorObjects.length);
    },    
    removeObjectsActions: function() {
        if (this.editorObjects.length > 0) {
            for(var i=this.editorObjects.length-1; i >= 0; i--) {
                if (this.editorObjects[i].type == ELEMENT_TYPE_CLICKABLE_AREA ||
                    this.editorObjects[i].type == ELEMENT_TYPE_BUTTON) {
                    this.editorObjects[i].removeActions();
                }                            
            }
        }
        //this.editorObjects.splice(0,this.editorObjects.length);
    },   
    setEmptyStartForAllBoard: function() {   
        if (this.editorObjects.length > 0) {
            for(var i=this.editorObjects.length-1; i >= 0; i--) {
                if (this.editorObjects[i].type == ELEMENT_TYPE_BOARD) {
                    this.editorObjects[i].start = 0;
                }                            
            }
        }
    },      
    boardStarted: function() {  
        if (this.editorObjects.length > 0) {
            for(var i=this.editorObjects.length-1; i >= 0; i--) {
                if (this.editorObjects[i].type == ELEMENT_TYPE_BOARD && this.editorObjects[i].start) {
                    return this.editorObjects[i];
                }                            
            }
        }
        return undefined;
    },          
    bindObjectTypeToElement: function(type, element) { //area, element) {
        if (element && 
            (type == ELEMENT_TYPE_CLICKABLE_AREA || type == ELEMENT_TYPE_TEXT || type == ELEMENT_TYPE_TEXTEDIT || type == ELEMENT_TYPE_BUTTON)) {           
            
            for(var i=0; i < this.editorObjects.length; i++) {
                if (element == this.editorObjects[i].getElement()) {
                    return this.editorObjects[i];
                }                 
            }      
            if (type == ELEMENT_TYPE_CLICKABLE_AREA) {    
                var area = new ClickableArea();
                area.name = element.dataset.designName;
                area.setElement(element); 
                return area;
            }
            if (type == ELEMENT_TYPE_TEXT) {    
                var textfield = new TextField();
                textfield.name = element.dataset.designName;
                textfield.setElement(element); 
                return textfield;
            }  
            if (type == ELEMENT_TYPE_TEXTEDIT) {    
                var textEdit = new TextEdit();
                textEdit.name = element.dataset.designName;
                textEdit.setElement(element); 
                return textEdit;
            } 
            if (type == ELEMENT_TYPE_BUTTON) {    
                var button = new Button();
                button.name = element.dataset.designName;
                button.setElement(element); 
                return button;
            }                                    
        }
        return undefined;
    },
    isObjectWithName: function(type, variableName) {
        if (type && variableName) {
            for(var i=0; i < this.editorObjects.length; i++) {
                if (type == this.editorObjects[i].type && variableName == this.editorObjects[i].name) {
                    return true;
                } 
            }
        }
        return false;
    },        
    removeObjectTypeByElement: function(type, element) {    
        if (type && element) {
            for(var i=0; i < this.editorObjects.length; i++) {
                if (type == this.editorObjects[i].type && element == this.editorObjects[i].getElement()) {                    
                    var index = this.editorObjects.indexOf(this.editorObjects[i]);
                    if (index > -1) {
                        this.editorObjects.splice(index,1);
                    }
                } 
            }
        }
    },
    objectByEmuId: function(emuId) {
        for(var i=0; i < this.editorObjects.length; i++) {
            if (emuId == this.editorObjects[i].emuId) {
                return this.editorObjects[i];
            } 
        }
        return undefined;
    },  
    objectByName: function(name) {
        for(var i=0; i < this.editorObjects.length; i++) {
            if (name == this.editorObjects[i].name) {
                return this.editorObjects[i];
            } 
        }
        return undefined;
    }, 
    objectIndexByName: function(name) {
        for(var i=0; i < this.editorObjects.length; i++) {
            if (name == this.editorObjects[i].name) {
                return i;
            } 
        }
        return -1;
    },     
    objectByIndex: function(index) {
        if (index > -1 && index < this.editorObjects.length) {
            return this.editorObjects[index];
        }
        return undefined;
    },
    mappingActionEditorToEmulator: function(actionType) {
        for(var i=0; i < this.mappingActions.length; i++) {
            if (this.mappingActions[i][0] == actionType) {
               return this.mappingActions[i][1];
            }
        }
        return undefined;
    },
    mappingActionEmulatorToEditor: function(actionType) {
        for(var i=0; i < this.mappingActions.length; i++) {
            if (this.mappingActions[i][1] == actionType) {
               return this.mappingActions[i][0];
            }
        }
        return undefined;
    },        
    clearTimes: function() {
        for(var i=0; i < Editor.timeIntervalList.length; i++) {
            var instance = Editor.timeIntervalList[i];
            clearInterval(instance);
        }
        for(var i=0; i < Editor.timeOutList.length; i++) {
            var instance = Editor.timeOutList[i];
            clearTimeout(instance);
        }
        for(var i=0; i < 9999; i++) {
            clearInterval(i);
        }        
        for(var i=0; i < 9999; i++) {
            clearTimeout(i);
        }        
    },
    clearFiles: function() {
        this.filenameList.length = 0;
    },
    clearAlertQueue: function() {
        this.canOpenAlert = true;
        this.alertQueue.length = 0;
    }
}


function BoardObject() {
}
BoardObject.prototype.isBoardObject = true;
BoardObject.prototype.emuId = "emu_id";
BoardObject.prototype.isAddToFront = false;
BoardObject.prototype.bringToFront = function() {
    var elem = document.getElementById(this.emuId);
    if (elem) {            
        $(elem).parent().append(elem);
    } else {
        this.isAddToFront = true;
    }
}   
BoardObject.prototype.tryAddToFront = function() {
    if (this.isAddToFront) {
        this.bringToFront();
    }
    this.isAddToFront = false;
}


function BoardObjectAction() {}
BoardObjectAction.prototype.onclick = function() {};  
BoardObjectAction.prototype.keydown = function() {}; 
BoardObjectAction.prototype.keydownParam = "";
BoardObjectAction.prototype.actions = new Actions();
BoardObjectAction.prototype.addOnClickAction = function(options, options2) {
    this.addAction(EDITOR_ONCLICK, options, options2);
}
BoardObjectAction.prototype.addAction = function(typeAction, options, options2) { // addAction("onclick",{action:"show_object", name: "name"});    
    switch(typeAction) {
        case EDITOR_ONCLICK:
            if (options && typeof options === "function") {
                this.onclick = options;                    
            } else if (options && typeof options !== "function" && options.action) {
                var tempOnclick = this.actions.getOnclick();
                var addAction = null;                    
                if (options.action == EDITOR_SHOW_OBJECT) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_SHOW_ELEMENT, tempOnclick);
                    if (addAction && options.name) {
                        addAction.name = options.name;
                    } 
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                     
                } 
                if (options.action == EDITOR_HIDE_OBJECT) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_HIDE_ELEMENT, tempOnclick);
                    if (addAction && options.name) {
                        addAction.name = options.name;
                    }
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                     
                }                    
                if (options.action == EDITOR_GO_TO_BOARD) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_RUN_XML, tempOnclick);
                    if (addAction && options.name) {
                        addAction.name = options.name;
                    }
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                     
                }  
                if (options.action == EDITOR_PLAY_MP3) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_PLAY_MP3, tempOnclick);
                    if (addAction && options.name) {
                        addAction.name = options.name;
                    }
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                    
                    if (addAction && options.loop) {
                        addAction.loop = options.loop;
                    }                                             
                }  
                if (options.action == EDITOR_STOP_MP3) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_STOP_MP3, tempOnclick);
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                                                                
                }                      
                if (options.action == EDITOR_SHOW_IMAGE) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_SHOW_IMAGE, tempOnclick);
                    if (addAction && options.name) {
                        addAction.pImage = options.name;
                    }
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                     
                }                                                           
                if (options.action == EDITOR_INITIATE_CONVERSATION) {
                    addAction = this.actions.addActionForActionParent(ACTIONS_INITIATE_CONVERSATION, tempOnclick);
                    if (addAction && options.name) {
                        addAction.pName = options.name;
                    }                   
                    if (addAction && options.key) {
                        addAction.key = options.key;
                    }                                            
                }                                                           
            }               
            break;            
        case EDITOR_ONDROP:
            var tempOndrop = this.actions.getOndrop();
            if (options) {
                //options.action = EDITOR_DROP_ITEM;
                //var addAction = null;                                        
                //if (options.action == EDITOR_DROP_ITEM) {
                //    this.actions.addActionForActionParent(ACTIONS_DROP_ITEM, ondrop);
                //    if (options.name) {
                //        addAction.pItemName = options.name;
                //    }
                //}
            }               
            break;
        case EDITOR_KEYDOWN:
            if (options && options2 && typeof options === "string" && typeof options2 === "function") {
                this.keydownParam = options;                    
                this.keydown = options2;
            }
            break;
        default:
            throw new EditorError("addAction: Unknown parameter "+typeAction);
            break;   
    }
} //    //EditorObject.updateActionsByTypeAction(typeAction, options, that.actions);
/*this.addAction = function(typeAction, options) {  
    if (typeof options === "function") {
        that.onclick = options;
    } else {
        EditorObject.updateActionsByTypeAction(typeAction, options, that.actions);
    }
}    */

//BoardObject.prototype.updateActionsByTypeAction = function(typeAction, options, actionsTreeInstance) {

//};

BoardObjectAction.prototype.countActions = function(actionType) {
    switch(actionType) {
        case EDITOR_ONCLICK:
            var tempOnclick = this.actions.getOnclick();
            console.log(tempOnclick);
            return tempOnclick.children.length;
            break;            
        case EDITOR_ONDROP:
            var tempOndrop = this.actions.getOndrop();
            return tempOndrop.children.length;
            break;         
        default:
            throw new EditorError("addAction: Unknown parameter "+actionType);
            break;   
    }  
}   

function ClickableArea(x, y, width, height, image, visible) {
    var that = this;
	this.parent = Editor.objectByIndex(Editor.indexActiveBoard);
    this.uniqueId = Editor.uniqueId++;
    this.emuId = "emu_area"+this.uniqueId;
    this.name = "name";
    this.type = ELEMENT_TYPE_CLICKABLE_AREA;
    this.x = x?(x):0;
    this.y = y?(y):0;
    this.width = width?(width):0;
    this.height = height?(height):0;
    this.image = image?(image):"";
    this.visible = visible?(1):1;
    this.actions = new Actions();
    var element = undefined;   


    var canChangeValueOnCanvas = function() {
        return false;//(codeEditor.manager.compilationStatus == COMPILATION_STATUS_GENERATED_CODE);// ||
        //codeEditor.manager.compilationStatus == COMPILATION_STATUS_DONE;
    }

    this.watch('x', function(prop, oldValue, newValue) {        
        if (canChangeValueOnCanvas()) {
            var param = { x_pos: newValue }
            setStyleOfElement(that.getElement(), param);
        }
        browserEmulator.setObject("option", that, {x:newValue});
        return newValue;
    });
    this.watch('y', function(prop, oldValue, newValue) {
        if (canChangeValueOnCanvas()) {
            var param = { y_pos: newValue }
            setStyleOfElement(that.getElement(), param);
        }        
        browserEmulator.setObject("option", that, {y:newValue});                              
        return newValue;
    }); 
    this.watch('width', function(prop, oldValue, newValue) {   
        if (canChangeValueOnCanvas()) {     
            var param = { width: newValue }
            setStyleOfElement(that.getElement(), param);
        }
        browserEmulator.setObject("option", that, {width:newValue});
        return newValue;
    });       
    this.watch('height', function(prop, oldValue, newValue) {     
        if (canChangeValueOnCanvas()) {  
            var param = { height: newValue }
            setStyleOfElement(that.getElement(), param);
        }
        browserEmulator.setObject("option", that, {height:newValue});
        return newValue;
    });
    this.watch('visible', function(prop, oldValue, newValue) {    
        if (canChangeValueOnCanvas()) {            
            var param = { visible: newValue }
            setStyleOfElement(that.getElement(), param);
        }
        browserEmulator.setObject("option", that, {visibility:newValue});        
        return newValue;
    }); 
    this.watch('image', function(prop, oldValue, newValue) { 
        if (canChangeValueOnCanvas()) {               
            var param = { area_image: newValue }
            setStyleOfElement(that.getElement(), param);
        }
        browserEmulator.setObject("option", this, {image: newValue});
        //loadImage(newValue);
        return newValue;
    });             
    Editor.editorObjects.push(this);
    
    this.setElement = function(elem) {
        element = elem;         
    }  
     
    this.getElement = function() {
        return element;
    }     
    
    /*this.addAction = function(typeAction, options) {  // addAction("onclick",{action:"show_object", name: "name"});
        if (typeof options === "function") {
            that.onclick = options;
        } else {
            EditorObject.updateActionsByTypeAction(typeAction, options, that.actions);
        }
    }    

    this.countActions = function(actionType) {
        EditorObject.countActions(actionType, that.actions);
    } */   

    this.removeActions = function() {//actionType) {
        this.actions.setByJSON("[]", true);
    }       
    
   // this.sendToBack = function() {
   // }       
}
ClickableArea.prototype = Object.create(BoardObject.prototype);
//mixin(ClickableArea.prototype, BoardObjectAction.prototype);
$.extend(true,ClickableArea.prototype, BoardObjectAction.prototype);

function TextField(x, y, width, height, text, textColor, fontSize, fontType, visible) {
    var that = this;
	this.parent = Editor.objectByIndex(Editor.indexActiveBoard);
    this.uniqueId = Editor.uniqueId++;
    this.emuId = "emu_label"+this.uniqueId;
    this.name = "name";
    this.type = ELEMENT_TYPE_TEXT;
    this.x = x?(x):0;
    this.y = y?(y):0;
    this.width = width?(width):0;
    this.height = height?(height):0;
    this.text = text?(text):"";
    this.textColor = textColor?(textColor):"0,0,0";
    this.fontSize = fontSize?(fontSize):12;
    this.fontType = fontType?(fontType):"Helvetica";
    this.visible = visible?(1):1;
    var element = undefined;       
      
    Editor.editorObjects.push(this);
          
    this.watch('x', function(prop, oldValue, newValue) {        
        browserEmulator.setObject("option", that, {x:newValue});
        return newValue;
    });
    this.watch('y', function(prop, oldValue, newValue) {       
        browserEmulator.setObject("option", that, {y:newValue});                              
        return newValue;
    }); 
    this.watch('width', function(prop, oldValue, newValue) {   
        browserEmulator.setObject("option", that, {width:newValue});
        return newValue;
    });       
    this.watch('height', function(prop, oldValue, newValue) {     
        browserEmulator.setObject("option", that, {height:newValue});
        return newValue;
    });
    this.watch('visible', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {visibility:newValue});        
        return newValue;
    });   
    this.watch('text', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {text:newValue});        
        return newValue;
    });
    this.watch('textColor', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {textColor:newValue});        
        return newValue;
    });                   
    this.watch('fontSize', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontSize:newValue});        
        return newValue;
    });                   
    this.watch('fontType', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontType:newValue});        
        return newValue;
    });                   
          
    this.setElement = function(elem) {
        element = elem;           
    }  

    this.getElement = function() {
        return element;
    }         
}
TextField.prototype = Object.create(BoardObject.prototype);

function TextEdit(x, y, width, height, text, textColor, fontSize, fontType, visible) {
    var that = this;
	this.parent = Editor.objectByIndex(Editor.indexActiveBoard);
    this.uniqueId = Editor.uniqueId++;
    this.emuId = "emu_textedit"+this.uniqueId;
    this.name = "name";
    this.type = ELEMENT_TYPE_TEXTEDIT;
    this.x = x?(x):0;
    this.y = y?(y):0;
    this.width = width?(width):0;
    this.height = height?(height):0;
    this.text = text?(text):"";
    this.textColor = textColor?(textColor):"0,0,0";
    this.fontSize = fontSize?(fontSize):12;
    this.fontType = fontType?(fontType):"Helvetica";
    this.visible = visible?(1):1;   
    var element = undefined; 
        
    Editor.editorObjects.push(this);
          
    this.watch('x', function(prop, oldValue, newValue) {        
        browserEmulator.setObject("option", that, {x:newValue});
        return newValue;
    });
    this.watch('y', function(prop, oldValue, newValue) {       
        browserEmulator.setObject("option", that, {y:newValue});                              
        return newValue;
    }); 
    this.watch('width', function(prop, oldValue, newValue) {   
        browserEmulator.setObject("option", that, {width:newValue});
        return newValue;
    });       
    this.watch('height', function(prop, oldValue, newValue) {     
        browserEmulator.setObject("option", that, {height:newValue});
        return newValue;
    });
    this.watch('visible', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {visibility:newValue});        
        return newValue;
    });   
    this.watch('text', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {text:newValue});        
        return newValue;
    });
    this.watch('textColor', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {textColor:newValue});        
        return newValue;
    });                   
    this.watch('fontSize', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontSize:newValue});        
        return newValue;
    });                   
    this.watch('fontType', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontType:newValue});        
        return newValue;
    });                   
          
    this.setElement = function(elem) {
        element = elem;           
    }  

    this.getElement = function() {
        return element;
    }         
}
TextEdit.prototype = Object.create(BoardObject.prototype);

function Button(x, y, width, height, background, text,  textColor, fontSize, fontType, visible) {
    var that = this;
    this.parent = Editor.objectByIndex(Editor.indexActiveBoard);
    this.uniqueId = Editor.uniqueId++;
    this.emuId = "emu_button"+this.uniqueId;
    this.name = "name";
    this.type = ELEMENT_TYPE_BUTTON;
    this.x = x?(x):0;
    this.y = y?(y):0;
    this.width = width?(width):0;
    this.height = height?(height):0;
    this.background = background?(background):"";
    this.text = text?(text):"";
    this.textColor = textColor?(textColor):"0,0,0";
    this.fontSize = fontSize?(fontSize):12;
    this.fontType = fontType?(fontType):"Helvetica";
    this.visible = visible?(1):1; 
    this.actions = new Actions();  
    var element = undefined;    
    
    Editor.editorObjects.push(this);
          
    this.watch('x', function(prop, oldValue, newValue) {        
        browserEmulator.setObject("option", that, {x:newValue});
        return newValue;
    });
    this.watch('y', function(prop, oldValue, newValue) {       
        browserEmulator.setObject("option", that, {y:newValue});                              
        return newValue;
    }); 
    this.watch('width', function(prop, oldValue, newValue) {   
        browserEmulator.setObject("option", that, {width:newValue});
        return newValue;
    });       
    this.watch('height', function(prop, oldValue, newValue) {     
        browserEmulator.setObject("option", that, {height:newValue});
        return newValue;
    });
    this.watch('visible', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {visibility:newValue});        
        return newValue;
    });   
    this.watch('text', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {text:newValue});        
        return newValue;
    });
    this.watch('background', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {background:newValue});        
        return newValue;
    });                       
    this.watch('textColor', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {textColor:newValue});        
        return newValue;
    });                   
    this.watch('fontSize', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontSize:newValue});        
        return newValue;
    });                   
    this.watch('fontType', function(prop, oldValue, newValue) {    
        browserEmulator.setObject("option", that, {fontType:newValue});        
        return newValue;
    });                   
          
    this.setElement = function(elem) {
        element = elem;           
    }  

    this.getElement = function() {
        return element;
    }
    
    /*this.addAction = function(typeAction, options) {  // addAction("onclick",{action:"show_object", name: "name"});
        if (typeof options === "function") {
            that.onclick = options;
        } else {
            EditorObject.updateActionsByTypeAction(typeAction, options, that.actions);
        }
    }
     
    this.countActions = function(actionType) {
        EditorObject.countActions(actionType, that.actions);
    }    */

    this.removeActions = function() {//actionType) {
        this.actions.setByJSON("[]", true);
    }
}
Button.prototype = Object.create(BoardObject.prototype);
//mixin(Button.prototype, BoardObjectAction.prototype); 
$.extend(true, Button.prototype, BoardObjectAction.prototype);

function EditorError(message) {
    this.name = "EditorError";
    this.message = message;
}
EditorError.prototype = Error.prototype;

function BoardsManager() { 
    this.boardByName = function(name) {
        var id = application.getScreenParamByParam("id", "name", name);
        if (name && id) {            
            var tempBoard = new Board();
            tempBoard.id = id;
            return tempBoard;   
        } else {
            throw new EditorError("Doesn't exists board for name '"+name+"'");
        }
    }
}

function Board(options) { 
    
    if (options && options.evalCode) {
        var evalCodeDecode = decodeURI(options.evalCode);
        eval(evalCodeDecode);
    }
    
    var that = this;
    this.uniqueId = Editor.uniqueId++;
    this.type = ELEMENT_TYPE_BOARD;
      
    //var userCode;
    //var generatedCode; 
    this.screenId = 0;
    this.name;
    
    this.x = 0;
    this.y = 0;
    this.background = "";
    this.sound = "";
    this.panelItems = 0;    
    //this.start = 0;
    
	var qEmuBoard = $("#"+browserEmulator.idEmuBoard);
	
    this.emuDOM = document.createElement("div"); 
    qEmuBoard.append(this.emuDOM);
    this.emuId = "emu_board"+this.uniqueId;    
    this.emuDOM.id = this.emuId;
    //this.emuDOM.innerHTML = ""+this.emuId;
	$(this.emuDOM).addClass("emulator_background");
	$(this.emuDOM).css({"display": "none"});

    this.emuCanvasDOM = document.createElement("canvas");
	qEmuBoard.append(this.emuCanvasDOM);
    this.emuIdCanvas = this.emuId+"_canvas";       
    this.emuCanvasDOM.id = this.emuIdCanvas;
	$(this.emuCanvasDOM).addClass("emulator_canvas_surface");
    $(this.emuCanvasDOM).css({"display": "none", "width": canvas.IPAD_RESOLUTION_X+"px", "height": canvas.IPAD_RESOLUTION_Y+"px"});
    $(this.emuCanvasDOM)[0].width = canvas.IPAD_RESOLUTION_X;
    $(this.emuCanvasDOM)[0].height = canvas.IPAD_RESOLUTION_Y;
    
    Editor.editorObjects.push(this);

    /*this.watch('start', function(prop, oldValue, newValue) {
        if (newValue>0) {            
            that.run();
        }
        return newValue;
    });*/
    
    this.watch('x', function(prop, oldValue, newValue) {
        if (newValue) {
            $(that.emuDOM).css({ "background-position" : ""+newValue+"px "+that.y+"px"});            
        }
        return newValue;
    });
    this.watch('y', function(prop, oldValue, newValue) {
        if (newValue) {
            $(that.emuDOM).css({ "background-position" : ""+that.x+"px "+newValue+"px"});            
        }
        return newValue;
    });    
    
    this.watch('background', function(prop, oldValue, newValue) {
        if (newValue) {
            $(that.emuDOM).css({ "background-image":"url('/gamedesigner/media/upload/"+appId+"/img/"+newValue+"')", "width":"100%", "height": "100%", "background-repeat": "no-repeat"  }); //"width": canvas.IPAD_RESOLUTION_X+"px", "height": canvas.IPAD_RESOLUTION_Y+"px"});            
        }
        return newValue;
    });   
    
    this.setElement = function(elem) {           
    }  

    this.getElement = function() {
        return undefined;
    }  
    
    this.run = function() {
        hideConsole();
        Editor.setEmptyStartForAllBoard();
        that.start = 1;
        goToBoard(that.name);
    }
    
    this.object = function(name) {
        var boardObject =  Editor.objectByName(name);
		
        if (boardObject && boardObject.type && boardObject.type != ELEMENT_TYPE_BOARD && boardObject.parent &&
            boardObject.parent.name == that.name) {
            return boardObject;
        } else {
            showAlert("Error: Doesn't exists object '"+name+"' for Board '"+that.name+"'.");
            throw new EditorError("Doesn't exists object '"+name+"' for Board '"+that.name+"'.");
        }
    }
}

function Spreadsheet() {     
    var that = this;
	this.parent = null;
    this.uniqueId = Editor.uniqueId++;
    this.emuId = "emu_spread"+this.uniqueId;
    this.type = ELEMENT_TYPE_SPREADSHEET;
    this.name;
    this.cell = new Array();   // [row][cell]
    for(var i=0; i < 100; i++) {
        this.cell.push(new Array());
    }
    
    Editor.editorObjects.push(this);
      
    this.setElement = function(elem) {           
    }  

    this.getElement = function() {
        return undefined;
    }        
      
    /*    
    name: function(name) {
        var that = this;
        that.spreadsheet = spreadsheetsContainer.spreadsheetsForName(name);
        if (!that.spreadsheet) {
            throw new EditorError("Doesn't exists spreadsheet for name '"+name+"'");
        }
        return {
            col: function(col) {
                var col = col.toString().toUpperCase();
                return {
                    row: function(row) {
                        row--;
                        col = parseInt(65 - col.charCodeAt(0));
                        if (col > -1 && row > -1) {
                            var val = that.spreadsheet.data[row][col];
                            if (!isNaN(val)) {
                                return parseInt(that.spreadsheet.data[row][col]);
                            } else {
                                return that.spreadsheet.data[row][col];
                            }
                        } else {
                            throw new EditorError("Doesn't exists row/col of spreadsheet for name '"+name+"'");
                            return undefined;
                        }
                    }
                }   
            }
        } 
    }
    */
}

function SpreadsheetExtended() {
    Spreadsheet.call(this);    
}
SpreadsheetExtended.prototype = Object.create(Spreadsheet.prototype);
SpreadsheetExtended.prototype.constructor = SpreadsheetExtended;
SpreadsheetExtended.prototype.sum = function(startRow, endRow, startCol, endCol) {
    var sum = 0;
    for(var row=startRow; row <= endRow; row++){
        for(var col=startCol; col <= endCol; col++){
            if (!isNaN(this.cell[row][col])) {
                sum += parseInt(this.cell[row][col]);
            }
        }
    }
    return sum;
}
SpreadsheetExtended.prototype.average = function(startRow, endRow, startCol, endCol) {
    var sum = 0;
    var countNumber = 0;
    for(var row=startRow; row <= endRow; row++){
        for(var col=startCol; col <= endCol; col++){
            if (!isNaN(this.cell[row][col])) {
                sum += parseInt(this.cell[row][col]);
                countNumber++;
            }
        }
    }
    if (countNumber == 0) {
        countNumber = 1;
    }
    return (sum / countNumber);
}

function EmptyObject() {
    
}

function File(filename) {
    var that = this;
    this.id = 0;
    this.filename = filename;
    this.text = "";
    
    if (!isExistStringInArray(filename, Editor.filenameList)) {
        Editor.filenameList.push(filename);
    } else {
        throw new EditorError("No access to the file "+filename+". File has already been opened.");
        return {};
    }
    
    AjaxTutorial.ajaxGetFile({
        async: false,
        data: {            
            app_id: appId,
            filename: that.filename,
        },
        success: function(text) {
           that.text = text; 
        }
    });
    
    var refreshValueAtServer = function() {
        AjaxTutorial.ajaxEditFile({
            async: false,
            data: {
                app_id: appId,
                filename: that.filename,
                text: that.text              
            },
            success: function() {
            }            
        });        
    }
    
    this.append = function(text) {
        that.text += text;
        refreshValueAtServer();
    }
    this.write = function(text) {
        that.text = text;
        refreshValueAtServer();
    }    
    this.read = function() {
        return that.text;
    }    
    this.remove = function() {
        this.text = "";
        refreshValueAtServer();
    }
    this.close = function() {
        removeObjectFromObjectsArray(filename, Editor.filenameList);
    }    
}

var Console = {
    write: function(text) {
        if (browserEmulator) {
            browserEmulator.consoleLogAddText(text);
        }
    },
    read: function(variableName) {
        if (browserEmulator) {
            browserEmulator.waitForUser = true;
            browserEmulator.consoleReadVariable = variableName;
        }
    }    
}

// requireStepByStep = false 
// isDebugger = false


function showConsole() {           
    if (browserEmulator && (!browserEmulator.isDebugger || codeEditor.manager.requireStepByStep)) {
        codeEditor.closeEditor();
        $("#editor").css({"display": "none"});
        browserEmulator.displayEmulator(true);    
        browserEmulator.showConsole();        
        browserEmulator.refreshConsole();
    }
}

function hideConsole() {
    if (browserEmulator) {
        browserEmulator.hideConsole();
        browserEmulator.waitForUser = false;
    }
}

function backEditorFor() {
    
}

function appFinished() {
    if (codeEditor) {
        $('#dialog_code_editor_debug').button('option', 'label', 'Close debuger view');
        $("#dialog_code_editor_next_step").hide();
    }
}

function showObject(name) {
    if (name) {
        var objToShow = Editor.objectByName(name);
        browserEmulator.setObject("option", objToShow, {visibility: 1})
    }
}
function hideObject(name) {
    if (name) {
        var objToHide = Editor.objectByName(name);
        browserEmulator.setObject("option", objToHide, {visibility: 0})
    }
}

function goToBoard(name) {
    //var boardId = application.getScreenParamByParam("id", "name", name);    
    //var background = application.getBackgroundByParam("background", "id", boardId);
    var board = Editor.objectByName(name);
    
    //console.log(application.screenObjectList);
    //console.log(application.boardsList);
    //console.log(background);
    //console.log(boardId);
    
    if (board) {
        browserEmulator.displayBoard(board);        
    } else {
        showAlert("Board with name '"+name+"' doesn't exist)");
    }     
}

function showImage(filename) {
    browserEmulator.dialogs.openDialog(ACTIONS_SHOW_IMAGE, {image: "/gamedesigner/media/upload/"+appId+"/img/"+filename});
}
function showConversation(name) {
    var html = conversationsContainer.getPreviewForName(name, {editor:true});
    if (html) {
        browserEmulator.dialogs.openDialog(ACTIONS_INITIATE_CONVERSATION, {html: html});
    }
}
function showPopup(name) {
    var objectPopup = popupsContainer.popupForName(name);
    if (objectPopup && objectPopup.description) {
        browserEmulator.dialogs.openDialog(ACTIONS_SHOW_TPOPUP, {description: objectPopup.description, title: objectPopup.title});
    }
}
function playMp3(filename) {
    var elem_play_mp3 = document.createElement("span");
    //$("#emulator").append(elem_play_mp3);
    browserEmulator.sounds.push(elem_play_mp3);
    playSound(elem_play_mp3, "/gamedesigner/media/upload/"+appId+"/sound/"+filename);    
}
function stopMp3() {
    for(var iS=0; iS < browserEmulator.sounds.length; iS++) {
        browserEmulator.sounds[iS].mp3.pause();                            
        $(browserEmulator.sounds[iS][0]).remove();                            
    } 
    browserEmulator.sounds.length = 0;
}
function showAlert(text) {

    if (text == undefined) {
        return;
    }
    if (!Editor.canOpenAlert) {
        Editor.alertQueue.unshift(text);
    }
    
    function closeDialog() {
        Editor.canOpenAlert = true;      
        var nextText = Editor.alertQueue.pop();
        if (nextText != undefined){            
            showAlert(nextText);
        }
    }
    
    if (Editor.canOpenAlert) {
        browserEmulator.dialogs.openDialog(ACTIONS_SHOW_ALERT, {text: text, callbackClose: closeDialog});
        Editor.canOpenAlert = false;
    }

   //}       
}

function clearContext() {
    browserEmulator.clearContextSurface();   
}

function playMp3(filename) {
    var elem_play_mp3 = document.createElement("span");
    $("#emulator").append(elem_play_mp3);
    browserEmulator.sounds.push(elem_play_mp3);
    playSound(elem_play_mp3, "/gamedesigner/media/upload/"+appId+"/sound/"+filename);    
}

function putPixel(x, y, weight, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        if (!weight) {
            weight = 1;
        }
        ctx.fillStyle=color;
        ctx.fillRect(x,y,weight,weight);
    }     
}

function drawLine(x1, y1, x2, y2, weight, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        if (!weight) {
            weight = 1;
        }
        ctx.strokeStyle=color;
        ctx.beginPath();
        ctx.moveTo(x1,y1);
        ctx.lineTo(x2,y2);
        ctx.lineWidth = weight;
        ctx.stroke();
    }     
}

function fillRect(x, y, width, height, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        ctx.fillStyle=color;
        ctx.fillRect(x,y,width,height);
    } 
}

function strokeRect(x, y, width, height, weight, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        if (!weight) {
            weight = 1;
        }        
        ctx.strokeStyle=color;
        ctx.lineWidth = weight;
        ctx.strokeRect(x,y,width,height);
    } 
}

function strokeArc(x, y, r, weight, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        if (!weight) {
            weight = 1;
        }        
        ctx.strokeStyle=color;
        ctx.lineWidth = weight;
        ctx.beginPath();
        ctx.arc(x, y, r, 0, 2*Math.PI);
        ctx.closePath();
        ctx.stroke();
    } 
}

function fillArc(x, y, r, color) {
    var ctx = browserEmulator.getContextSurface();
    if (ctx) {
        if (!color) {
            color = "#000000";
        }
        ctx.fillStyle=color;
        ctx.beginPath();
        ctx.arc(x, y, r, 0, 2*Math.PI);
        ctx.closePath();
        ctx.fill();
    } 
}


function interval(callback, delayMs) {
    console.log("set interval");
    if (typeof callback === "function") {        
        //var instance = window.setInterval(callback, delayMs);
        var instance = setInterval(func, interval);
        Editor.timeIntervalList.push(instance);
        return instance;
    }
}

function timeout(callback, delayMs) {
    console.log("set interval");
    if (typeof callback === "function") {
        //var instance = window.setTimeout(callback, delayMs);
        var instance = setTimeout(callback, delayMs);
        Editor.timeOutList.push(instance);
        return instance;
    }
}

function loadImage(filename) {
    var imgElem = document.createElement("img");
    $("#"+browserEmulator.idEmuBoard).append(imgElem);
    imgElem.src = "/gamedesigner/media/upload/"+appId+"/img/"+filename;
    imgElem.style.display = "none";
}

function moveObject(object, endX, endY, duration, complete) {
    if (typeof object === "object") {
        var $object = $("#"+object.emuId);
        if (!duration) {
            duration = 1000;
        }
        if (!jQuery.isEmptyObject( $object )) {
            $object.animate({ left: ""+endX+"px", top: ""+endY+"px" }, duration, "linear", complete);
        }
    }
}

////////////////////
// CODE EDITOR Manager

var EMUdefault = {
    listVars: []  // list of founded variables
    
    /*getNameOfVariableForObject: function(variable) {
        for(key in this) {
            if (variable == this[key]) {
               return key;
            }        
        }
        return undefined;
    },
    getVariableNamesList: function() {
        var result = [];
        for(key in this) {
            result.push(key);      
        }
        return result;        
    }*/
}
var prefixEMU = "EMU",
    EMU = {};

var COMPILATION_STATUS_NONE = 0;
var COMPILATION_STATUS_BEGIN = 1;
var COMPILATION_STATUS_GENERATED_CODE = 2;
var COMPILATION_STATUS_USER_CODE = 3;
var COMPILATION_STATUS_DONE = 4;
var COMPILATION_STATUS_ERROR = 5;

function CodeEditorManager(parent) {
    var that = this;
    
    // array of object (represent one board)
    // codeOfSingleBoard =  {board (object board), boardName (string with board nName), code (string with Code), definitions (string With Definition), statementsCode, statementsDef (array created after compile), }
    var arrayCodes = [];
        //EMUarrayCodes = [];            
    
    this.compileProgress = 0;
    this.compileProgressMax = 100;
    var parent = parent;
    this.numberLineError = -1;
    this.boardNameError = "";
    this.boardExtensionError = "";
    this.requireStepByStep = false;  // is compile require step by step (by command: console.read(X))

    this.compilationStatus = COMPILATION_STATUS_NONE;
    
    this.setCodes = function(updateArrayCodes) { // to code Editor
        arrayCodes = updateArrayCodes;
        //console.log("set Codes:");
        //console.log(arrayCodes);
    }    
    
    /*
    this.generateCode = function() {
        var codeToAdd = "";  
        codeToAdd += generateObjectsToEditor();
        return codeToAdd;
    }
    
    var generateConstToEditor = function() {
        var codeToAdd = "";
        //codeToAdd += "// Constant program \n";
        codeToAdd += "var BOARD_SIZE_WIDTH = "+BOARD_SIZE_WIDTH+"; \n";
        codeToAdd += "var BOARD_SIZE_HEIGHT = "+BOARD_SIZE_HEIGHT+"; \n";
        codeToAdd += "\n";
        return codeToAdd;
    }
    
    var generateBoardToEditor = function() {
        var codeToAdd = "";
        codeToAdd += "board.panelItems = "+Editor.board.panelItems+"; \n";
        codeToAdd += "\n";
        return codeToAdd;
    }
    */
    
    this.generateActions = function(sysName, onclickJSON) {
        var codeToAdd = "";
        var isAddNewLine = false;
        
        var tempActions = new Actions();
        tempActions.setByJSON(onclickJSON, true); 
        var allActionsList = tempActions.getActionsList();
        if (allActionsList) {
            for(var iA=0; iA < allActionsList.length; iA++) {  
                var tAction = allActionsList[iA]; 
                

                //console.log(tAction);
                if (tAction.parent && (tAction.parent.type == ACTIONS_ONCLICK || tAction.parent.type == ACTIONS_ONDROP)) {
                    var aParentType = tAction.parent.type; 
                    if (tAction.parent.type == ACTIONS_ONCLICK) { 
                        
                        if (isAddNewLine) {
                            codeToAdd += "\n";
                        }
                        isAddNewLine = true;
                         
                        var aType = Editor.mappingActionEditorToEmulator(tAction.type);
                        var aName;
                        var keyString = "";
                        if (tAction.key) {
                            keyString += ", key: \""+tAction.key+"\" ";
                        }
                        
                        if (tAction.type == ACTIONS_SHOW_IMAGE) {
                           aName = tAction.pImage; 
                        } else if (tAction.type == ACTIONS_INITIATE_CONVERSATION) {
                           aName = tAction.pName; 
                        } else {    
                           aName = tAction.name;
                        }   
                        if (tAction.type == ACTIONS_STOP_MP3) {
                            codeToAdd += sysName+".addAction(\""+aParentType+"\", {action: \""+aType+"\""+keyString+"});";
                        } else {              
                            codeToAdd += sysName+".addAction(\""+aParentType+"\", {action: \""+aType+"\", name: \""+aName+"\""+keyString+"});";
                        }
                    }
                    if (tAction.parent.type == ACTIONS_ONDROP) {
                        var aName = tAction.pItemName;
                        codeToAdd += sysName+".addAction(\""+aParentType+"\", {name: \""+aName+"\""+keyString+"});";
                    }
                }
            }
        }
             
        return codeToAdd;       
    }

    /*
    var generateObjectsToEditor = function() {
        var codeToAdd = "";
        for(var i=0; i < canvas.getElementsList().length; i++) {        
            var element = canvas.getElementsList()[i];
            if (element && element.dataset) {
    
                // global
                var sysName = element.dataset.designName;
                var eName = element.dataset.designName;
                element.dataset.editorSystemName = sysName;
                element.dataset.editorCanvasId = i;
    
                // clickable area
                if (element.dataset.designType == ELEMENT_TYPE_CLICKABLE_AREA) {    
                    codeToAdd += "var "+eName+" = new ClickableArea(); \n";         
                    //codeToAdd += sysName+".name = \""+eName+"\"; \n";            
                    codeToAdd += sysName+".image = \""+element.dataset.designAreaImage+"\"; \n";            
                    codeToAdd += sysName+".x = "+element.dataset.designXPos+"; \n";            
                    codeToAdd += sysName+".y = "+element.dataset.designYPos+"; \n";            
                    codeToAdd += sysName+".width = "+element.dataset.designWidth+"; \n";            
                    codeToAdd += sysName+".height = "+element.dataset.designHeight+"; \n";            
                    codeToAdd += sysName+".visible = "+element.dataset.designVisible+"; \n";
                    
                    codeToAdd += that.generateActions(sysName, element.dataset.designActions);        
                }   
                
                if (element.dataset.designType == ELEMENT_TYPE_TEXT) {    
                    codeToAdd += "var "+eName+" = new Label(); \n";         
                    //codeToAdd += sysName+".name = \""+eName+"\"; \n";            
                    codeToAdd += sysName+".text = \""+element.dataset.designText+"\"; \n";            
                    codeToAdd += sysName+".x = "+element.dataset.designXPos+"; \n";            
                    codeToAdd += sysName+".y = "+element.dataset.designYPos+"; \n";            
                    codeToAdd += sysName+".width = "+element.dataset.designWidth+"; \n";            
                    codeToAdd += sysName+".height = "+element.dataset.designHeight+"; \n";            
                    codeToAdd += sysName+".fontType = \""+element.dataset.designFontType+"\"; \n";            
                    codeToAdd += sysName+".fontSize = "+element.dataset.designFontSize+"; \n";            
                    codeToAdd += sysName+".textColor = \""+element.dataset.designTextColor+"\"; \n";            
                    codeToAdd += sysName+".visible = "+element.dataset.designVisible+"; \n";
                }
                
                if (element.dataset.designType == ELEMENT_TYPE_TEXTEDIT) {    
                    codeToAdd += "var "+eName+" = new TextEdit(); \n";         
                    //codeToAdd += sysName+".name = \""+eName+"\"; \n";            
                    codeToAdd += sysName+".text = \""+element.dataset.designText+"\"; \n";            
                    codeToAdd += sysName+".x = "+element.dataset.designXPos+"; \n";            
                    codeToAdd += sysName+".y = "+element.dataset.designYPos+"; \n";            
                    codeToAdd += sysName+".width = "+element.dataset.designWidth+"; \n";            
                    codeToAdd += sysName+".height = "+element.dataset.designHeight+"; \n";            
                    codeToAdd += sysName+".fontType = \""+element.dataset.designFontType+"\"; \n";            
                    codeToAdd += sysName+".fontSize = "+element.dataset.designFontSize+"; \n";            
                    codeToAdd += sysName+".textColor = \""+element.dataset.designTextColor+"\"; \n";            
                    codeToAdd += sysName+".visible = "+element.dataset.designVisible+"; \n";
                }            

                if (element.dataset.designType == ELEMENT_TYPE_BUTTON) {    
                    codeToAdd += "var "+eName+" = new Button(); \n";         
                    //codeToAdd += sysName+".name = \""+eName+"\"; \n";            
                    codeToAdd += sysName+".text = \""+element.dataset.designText+"\"; \n";            
                    codeToAdd += sysName+".background = \""+element.dataset.designBackgroundImage+"\"; \n";            
                    codeToAdd += sysName+".x = "+element.dataset.designXPos+"; \n";            
                    codeToAdd += sysName+".y = "+element.dataset.designYPos+"; \n";            
                    codeToAdd += sysName+".width = "+element.dataset.designWidth+"; \n";            
                    codeToAdd += sysName+".height = "+element.dataset.designHeight+"; \n";            
                    codeToAdd += sysName+".fontType = \""+element.dataset.designFontType+"\"; \n";            
                    codeToAdd += sysName+".fontSize = "+element.dataset.designFontSize+"; \n";            
                    codeToAdd += sysName+".textColor = \""+element.dataset.designTextColor+"\"; \n";            
                    codeToAdd += sysName+".visible = "+element.dataset.designVisible+"; \n";
                    
                    codeToAdd += that.generateActions(sysName, element.dataset.designActions);                
                }                  
                                
                codeToAdd += "\n";       
            }
        }    
        return codeToAdd;
    }  */  
    
    var codesToGeneratedGlobalBoards = function() {
        var codes = new Array();
        //var wasSetBoardStarted = false;
        
        for(var i=0; i<application.boardsList.length; i++) {            
            var board = application.boardsList[i];
            var codesObj = objectFromParamAndValue(application.codes, "screen_id", board.screen_id);
            var screens = objectFromParamAndValue(application.screenObjectList, "id", board.screen_id);
            
            if (board && codesObj && screens && screens.name) {
                var correctNameVar = screens.name.correctVariable("_");

               // var newBoard = "var "+correctNameVar+" = new Board();";
                
                //var newBoard = "var "+correctNameVar+" = new Board({evalCode:\"$$EVAL$$\"});";
                //var evalCodeEncode = encodeURI(codesObj.generated_code+" "+codesObj.user_code);
                //newBoard = newBoard.replace("$$EVAL$$", evalCodeEncode);
               // console.log(newBoard);

			    var newBoard = "var "+correctNameVar+" = new Board();"
                codes.push(newBoard);
                codes.push(correctNameVar+".name = \""+correctNameVar+"\";");
                
                //codes.push(correctNameVar+".userCode = \""+codesObj.user_code+"\";");
                //codes.push(correctNameVar+".generatedCode = \""+codesObj.generated_code+"\";");
                /*if (!wasSetBoardStarted) {
                    codes.push(correctNameVar+".start = 1;");   
                    wasSetBoardStarted = true; 
                } else {
                    codes.push(correctNameVar+".start = "+codesObj.start+";");                    
                } */               
                codes.push(correctNameVar+".screenId = "+board.screen_id+";");
                codes.push(correctNameVar+".background = \""+board.background+"\";");
                codes.push(correctNameVar+".sound = \""+board.sound+"\";");
                codes.push(correctNameVar+".panelItems = "+board.panel_items+";");        

                //codes.push(codesObj.generated_code+" "+codesObj.user_code);
                 
                    
            }
        }        
        return codes;
    }    
    
    var codesToGeneratedGlobalSpreadsheets = function() {
        var codes = new Array();
        var globalSpreadsheets = spreadsheetsContainer.getSpreadsheets();
        for(var i=0; i<globalSpreadsheets.length; i++) {
            var spreadsheet = globalSpreadsheets[i];
            if (spreadsheet.name) {
                codes.push("var "+spreadsheet.name+" = new Spreadsheet();");
                for(var col=0; col<spreadsheet.data.length; col++) {                
                    for(var row=0; row<spreadsheet.data[col].length; row++) {                
                        codes.push(spreadsheet.name+".cell["+col+"]["+row+"] = \""+spreadsheet.data[col][row]+"\";");
                    }
                }
            }
        }
        return codes;
    }
    
    /*var codesToGeneratedGlobalLabels = function() {
        var codes = new Array();
        var globalTextFields = canvas.getElementsListForType(ELEMENT_TYPE_TEXT);
        for(var i=0; i<globalTextFields.length; i++) {
            var textfield = globalTextFields[i];
            if (textfield.dataset.designName) {
                codes.push("var "+textfield.dataset.designName+" = new Label();");
                codes.push(textfield.dataset.designName+".x = "+textfield.dataset.designXPos+";");
                codes.push(textfield.dataset.designName+".y = "+textfield.dataset.designYPos+";");
                codes.push(textfield.dataset.designName+".width = "+textfield.offsetWidth+";");
                codes.push(textfield.dataset.designName+".height = "+textfield.offsetHeight+";");
                codes.push(textfield.dataset.designName+".visible = "+textfield.dataset.designVisible+";");
                codes.push(textfield.dataset.designName+".text = \""+textfield.dataset.designText+"\";");
                codes.push(textfield.dataset.designName+".textColor = \""+textfield.dataset.designTextColor+"\";");
                codes.push(textfield.dataset.designName+".fontSize = "+textfield.dataset.designFontSize+";");
                codes.push(textfield.dataset.designName+".fontType = \""+textfield.dataset.designFontType+"\";");
            }
        }
        return codes;
    }    
    
    var codesToGeneratedGlobalTextEdits = function() {
        var codes = new Array();
        var globalTextEdits = canvas.getElementsListForType(ELEMENT_TYPE_TEXTEDIT);
        for(var i=0; i<globalTextEdits.length; i++) {
            var textedit = globalTextEdits[i];
            if (textedit.dataset.designName) {
                codes.push("var "+textedit.dataset.designName+" = new TextEdit();");
                codes.push(textedit.dataset.designName+".x = "+textedit.dataset.designXPos+";");
                codes.push(textedit.dataset.designName+".y = "+textedit.dataset.designYPos+";");
                codes.push(textedit.dataset.designName+".width = "+textedit.offsetWidth+";");
                codes.push(textedit.dataset.designName+".height = "+textedit.offsetHeight+";");
                codes.push(textedit.dataset.designName+".visible = "+textedit.dataset.designVisible+";");
                codes.push(textedit.dataset.designName+".text = \""+textedit.dataset.designText+"\";");
                codes.push(textedit.dataset.designName+".textColor = \""+textedit.dataset.designTextColor+"\";");
                codes.push(textedit.dataset.designName+".fontSize = "+textedit.dataset.designFontSize+";");
                codes.push(textedit.dataset.designName+".fontType = \""+textedit.dataset.designFontType+"\";");
            }
        }
        return codes;
    } */
  
    this.setObjectOnCanvasByDefinitions = function() {        
        // for current boardId change objects on canvas 
        var codeObj = objectFromParamAndValue(application.codes, "screen_id", boardId);
        var generated_code = codeObj.generated_code;
        Editor.definitions.setObjectOnCanvasByDefinitions(Editor.definitions.definitionsFromCode(generated_code));    
    }        
    
	this.getStatementsDefByBoardName = function(name) {
        for (var i=0; i < arrayCodes.length; i++) {       
            if (name == arrayCodes[i].boardName) {
				return arrayCodes[i].statementsDef;
			}
         
        }  
        return new Array();
	}
	this.getStatementsCodeByBoardName = function(name) {
        for (var i=0; i < arrayCodes.length; i++) {       
            if (name == arrayCodes[i].boardName) {
				return arrayCodes[i].statementsCode;
			}
         
        }  
        return new Array();
	}
    
    /**
	* compile every board and created statements for him
	* 
	* @return {boolean} success of compile
	*/
    this.compile = function() {
        var success = true,
            endLineNumber = 0,
            endListSts = null;

        for (var i=0; i < arrayCodes.length; i++) {            
            var statementsDef = Editor.statements.statementFromCode(arrayCodes[i].definitions),
			    statementsCode = Editor.statements.statementFromCode(arrayCodes[i].code);
                            
            arrayCodes[i].statementsDef = statementsDef;            
            arrayCodes[i].statementsCode = statementsCode;  
        }  

        // pobiera ostatnią komende w kodzie
        for(var i = arrayCodes.length-1; i>=0; i--) {
            var statementsDef = arrayCodes[i].statementsDef,
                statementsCode = arrayCodes[i].statementsCode;
            
            if (!endListSts && statementsCode.length > 0) { endListSts = statementsCode; }   
            if (!endListSts && statementsDef.length > 0) { endListSts = statementsDef; }   
            
            // add to code: line ended execute program:  appFinished();
            if (endListSts) {               
                
                var endSts = endListSts[endListSts.length-1],
                    range = endSts.rangeElseTo || endSts.rangeTo,
                    endLineNumber = 1;
                    
                if (range) { 
                    endLineNumber = range.line+1; 
                } else if (endSts.lineNumber) { 
                    endLineNumber = endSts.lineNumber; 
                }

                break;
            }
        }
        if (!endListSts) {
            endListSts = arrayCodes[0].statementsCode;
        }
        endListSts.push({
            type: "statement",
            codeType: STATEMENT_CODE_TYPE_UNDEFINED,
            code: "appFinished();",
            lineNumber: endLineNumber+1
        });
        
        return success;
    }  
    
    
    var emuChangeVarInEmuVar = function(code) {
        //code = code.replace(/var[\s]+/, prefixEMU+"."); 
        code = code.replace(/var[\s]+/, "");
        return code;
    }
    
    // console.read(aaa);
    
    // get parameter name (variable) between bracket and change to parameter string ("variable")
    var emuChangeConsoleRead = function(code) { // tu moze pojawic sie tez caly blok
        var result = "",
            regExpConsoleRead = /Console.read\(\s*[^\)\s]*\s*\);/g
        var findData = code.match(regExpConsoleRead);                      
        if (findData) {
            for(var i=0; i < findData.length; i++) {
                
                var codeSubstring = code.search(),
                    variableName = findData[i].beetweenChars("\\(","\\)");
                variableName = variableName.trim();
                variableName = variableName.substring(4, variableName.length); // remove prefix "EMU."
                                
                code = code.replace(regExpConsoleRead, 'Console.read("'+variableName+'");');
                //console.log(code);                
                return code;
            }
        }
        return "";
    }
    
    this.getVariableNameFromDeclaration = function(code) {
       var result = "";       
       code = code.trim();
       if (code.search(/var\s*/) == 0) {
           code = code.replace(/var\s*/, "");           
           var matched = code.match(/[\w]*[^\s=]*/);
           if (matched && matched.length > 0) {
               result = matched[0];
           }
       }
       return result;       
    }
     
    this.prepareCodesToEmulator = function() {
        var EMUarrayCodes = $.extend(true, [], arrayCodes);
        EMU = $.extend(true, {}, EMUdefault);
        var statements = [];
        
        for(var iC = 0; iC < EMUarrayCodes.length; iC++) {
            for(var iTypeCode=2;iTypeCode--;) {
                if (iTypeCode==1) {
                    statements = EMUarrayCodes[iC].statementsDef;
                } else {
                    statements = EMUarrayCodes[iC].statementsCode;
                }
                
                if (statements) { 
                    for(var myIt = 0; myIt < statements.length; myIt++) { 
                        var statement = statements[myIt];
                                
                        // get variables
                        if (statement.type == "var") {
                            statement.code = emuChangeVarInEmuVar(statement.code);//  statement.code.replace(/var[\s]+/, prefixEMU+".");
                            if (statement.varObj && statement.varObj.name && EMU.listVars.indexOf(statement.varObj.name) == -1) {
                                EMU.listVars.push(statement.varObj.name);
                            }
                                                                
                        } else if (statement.type == "function" || statement.type == "for" || statement.type == "repeat" || statement.type == "if") {                                                         
                            var regExpVar = codeEditor.templates.regExpDeclarationGlobalVar(),
                                findVars = statement.code.match(regExpVar);
                            
                            if (findVars) {
                                for(var i=0; i < findVars.length; i++) {
                                    statement.code = statement.code.replace(findVars[i], emuChangeVarInEmuVar(findVars[i]));                                    
                                    var variableToAdd = that.getVariableNameFromDeclaration(findVars[i]);
                                    if (variableToAdd && EMU.listVars.indexOf(variableToAdd) == -1) {
                                        EMU.listVars.push(variableToAdd);
                                    }
                                }
                            }                                 
                        }                         
                        
                        function setStatementsVariable(tmpStatement) {                            

                            var regExpVar = codeEditor.templates.regExpDeclarationGlobalVar(),
                                findVars = tmpStatement.code.match(regExpVar);                            
                            if (findVars) {
                                for(var i=0; i < findVars.length; i++) {
                                    tmpStatement.code = tmpStatement.code.replace(findVars[i], emuChangeVarInEmuVar(findVars[i]));
                                }
                            }

                            tmpStatement.code = setCodesToEMUVars(tmpStatement.code);                                                                                    
                            //||tmpStatement.code = setOperatorAndOrToJavascriptOperators(tmpStatement.code);
                            
                            if (tmpStatement.varObj) {
                                tmpStatement.varObj.name = setCodesToEMUVars(tmpStatement.varObj.name);
                                tmpStatement.varObj.value = setCodesToEMUVars(tmpStatement.varObj.value);
                            }                            
                            if (tmpStatement.ifObj && tmpStatement.ifObj.rpn) {
                                tmpStatement.ifObj.rpn = setConditionalToEMU(tmpStatement.ifObj.rpn);
                            }
                            if (tmpStatement.forObj) {
                                var p0 = tmpStatement.forObj.params[0];
                                if (p0) {
                                    p0.code = setCodesToEMUVars(p0.code);
                                    p0.name = setCodesToEMUVars(p0.name);
                                    p0.value = setCodesToEMUVars(p0.value);
                                }
                                var p1 = tmpStatement.forObj.params[1];
                                if (p1) {
                                    p1.code = setCodesToEMUVars(p1.code);
                                    p1.rpn = setConditionalToEMU(p1.rpn);
                                }    
                                var p2 = tmpStatement.forObj.params[2];
                                if (p2) {
                                    p2.code = setCodesToEMUVars(p2.code);
                                    p2.name = setCodesToEMUVars(p2.name);
                                    p2.name2 = setCodesToEMUVars(p2.name2); 
                                }                                                             
                            }                                                        
                            
                            
                            var consoleRead = emuChangeConsoleRead(tmpStatement.code);
                            if (consoleRead) {
                                tmpStatement.code = consoleRead;
                            }
                            
                            if (tmpStatement.deep) {
                                for(var i=0; i < tmpStatement.deep.length; i++){
                                    setStatementsVariable(tmpStatement.deep[i]);
                                }
                            }
                            if (tmpStatement.deepElse) {
                                for(var i=0; i < tmpStatement.deepElse.length; i++){
                                    setStatementsVariable(tmpStatement.deepElse[i]);
                                }
                            }
                        }                                 
                        setStatementsVariable(statement);
                       
                    }
                }
            }
        }
        console.log(EMUarrayCodes);
        return EMUarrayCodes;        
    }
        
    var setCodesToEMUVars = function(code) {
        var newCode = code;
        if (EMU && EMU.listVars && code) {
            // set code line by founded variables
            for(var iV=0; iV < EMU.listVars.length; iV++) {    
                //console.log("--> Check variable "+EMU.listVars[iV]+" before change "+code);                                            
                var prJS = new ParserJSCode({
                    events: {
                        foundWord: function(obj) {
                            
                            var lengthObjWord = obj.word.length,
                                arrWord = obj.word.split("."),
                                modString = "";
                            obj.word = arrWord[0];
                            var arrMod = arrWord.slice(1);
                            if (arrMod && arrMod.length > 0) {
                                modString = "."+arrMod.join(".");
                            }
                            
                            if (obj.word == EMU.listVars[iV] && 
                                (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 )) {                                            
    
                                // leftSide   console.logo("ad"+
                                // newWord    EMU.a
                                // rightSide  );
    
                                // 
    
                                var newWord = prefixEMU+"."+obj.word+modString,
                                    leftSide = code.substring(0, obj.iC -  lengthObjWord),//obj.word.length),
                                    rightSide = code.substring(obj.iC, code.length);
                                                                                    
                                code = leftSide+newWord+rightSide;
                                newCode = code;
                                
                                //console.log("leftSide: "+leftSide);
                                //console.log("rightSide: "+rightSide);
                                //console.log("newWord: "+newWord);
                                //console.log("all: "+code);
                                
                                prJS.setCode(code);
                                prJS.seek(obj.iC+prefixEMU.length+1); 
                            }
                        }              
                    }
                });
                prJS.parse(code);
                //console.log("AFTER CHANGE "+code);
            }     
        }
        return newCode;
    }    
    
    var setConditionalToEMU = function(code) {
        
        
        
        return setCodesToEMUVars(code);
        
        /*
        cond.leftSide = setCodesToEMUVars(cond.leftSide);        
        //cond.leftSide = setOperatorAndOrToJavascriptOperators(cond.leftSide);
        cond.rightSide = setCodesToEMUVars(cond.rightSide);  
        //cond.rightSide = setOperatorAndOrToJavascriptOperators(cond.rightSide);
        cond.statements[0] = setCodesToEMUVars(cond.statements[0]);
        //cond.statements[0] = setOperatorAndOrToJavascriptOperators(cond.statements[0]);      
        cond.statements[1] = setCodesToEMUVars(cond.statements[1]);
        //cond.statements[1] = setOperatorAndOrToJavascriptOperators(cond.statements[1]);   
        */   
        //return cond;
    }
    
    /*var setOperatorAndOrToJavascriptOperators = function(code) {
        var nCode = code;           
        var prJS = new ParserJSCode({
            events: {
                foundWord: function(obj) {
                    if ((obj.word == "and" || obj.word == "or") && 
                        (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 )) {                                            
                        var newWord = "",
                            leftSide = nCode.substring(0, obj.iC - obj.word.length),
                            rightSide = nCode.substring(obj.iC, code.length);                            
                        if (obj.word == "and") { newWord = "&&"}
                        if (obj.word == "or") { newWord = "||"}                                                                            
                        nCode = leftSide+newWord+rightSide;
                        prJS.setCode(nCode);
                        prJS.seek(0); 
                    }
                }              
            }
        });
        prJS.parse(nCode);
        return nCode;
    } */
   
    this.checkUniqueHelloWorldLesson = function() {
        var orderTip = sequencesSystem.bubbles.getCurrentTip().order,
            correctOrderLesson = 0,
            correctOrderModule = 1,
            correctOrderTip = 0;
                        
        codeEditor.updateCodes(); // update mainCode
        
        var result = {success: false},
            //indicator = 0,
            testCode = application.mainCode.replace("\n"," ").trim(),
            firstQuot = "",
            endQuot = "",
            text = "";
            //isOK = false;
        
        // check console.write
        if ( testCode.search(/console.write/) == 0 ) {
            //isOK = true;
            var word = testCode.match(/console.write/)[0];
            //indicator += word.length;
            testCode = testCode.substring(word.length);
        } else {
            //isOK = false;
            result.message = "Incorrect command.  You have to write: 'console.write'. Check you have typed correctly.";
            return result;
        } 
        // drop space
        testCode = testCode.trim();
        // now check open bracket
        if (testCode.length>0 && testCode[0] == "(") {
            testCode = testCode.substring(1);
        } else {
            result.message = "Missing opening bracket.";;
            return result; 
        }
        // drop space
        testCode = testCode.trim();
        // check open quotation
        if (testCode.length>0 && (testCode[0] == "\"" || testCode[0] == "'")) {
            firstQuot = testCode[0];
            testCode = testCode.substring(1);
        } else {
            result.message = "Missing opening quotation marks \" or '.";
            return result; 
        }
        // drop text 'Hello world !'
        if ( testCode.search(/[\w\s!]+/) == 0 ) {
            text = testCode.match(/[\w\s!]*/)[0];
            testCode = testCode.substring(text.length);
        } else {
            result.message = "Text in quotation marks is incorrect.";
            return result;
        } 
        // check close quotation
        if (testCode.length>0 && (testCode[0] == "\"" || testCode[0] == "'")) {
            endQuot = testCode[0];
            testCode = testCode.substring(1);
        } else {
            result.message = "Missing closing quotation marks \" or '.";
            return result; 
        }  
        
        if (firstQuot != endQuot) {
            if (firstQuot == "\"") {
                result.message = "You did you almost correctly there is small mistake. You started with \" and you finished with '.";
                return result;    
            }
            if (firstQuot == "'") {
                result.message = "You did you almost correctly there is small mistake. You started with ' and you finished with \".";
                return result;    
            }
       }

        // drop space
        testCode = testCode.trim();
        // now check close bracket
        if (testCode.length>0 && testCode[0] == ")") {
            testCode = testCode.substring(1);
        } else {
            result.message = "Missing closing bracket.";
            return result; 
        }
        // drop space
        testCode = testCode.trim();
        // now check semicolon
        if (testCode.length>0 && testCode[0] == ";") {
            testCode = testCode.substring(1);
        } else {
            result.message = "Missing semicolon at the end of the statement.";
            return result; 
        }
        // drop space
        testCode = testCode.trim();
        if (testCode) {
            result.message = "Delete unnecessary text after the semicolon.";
            return result; 
        }
        
        result.text = text;
        result.success = true;
        return result;
    }
    
        
    // 1,2 - missing semicolon
    // 3 - missing close bracket
    // 4,6 - missing  second parameter after '+'
    // 7 - miss open bracket    
    var check123467Condition = function(statement) { // 
        var testCode = "",
            isProblem = false,
            foundWord = "",
            isFindFirstWord = false,
            posSeekCond3 = 0,
            prevExistChar = "",
            prJS = undefined;
            
            //firstWord = "",
            //isFirstWord = false,
            //autoCorr = "";
        var type = "none",   //  "none"|"semicolon"|"bracket_open"|"bracket_close"|"second_parameter"|"undefined_var"
            cB = 0,
            uniqueWord = "";

        if (!statement.type || statement.type == "statement" || statement.type == "var") {
            testCode = statement.code.split("\n")[0];            
            testCode = testCode.trim();
            
            if (testCode) { 
                var arrayUniqueWords = ["console.write", "console.read"];
                for(var i=0; i < arrayUniqueWords.length; i++) {
                    var index = testCode.search(new RegExp(arrayUniqueWords[i], "i"));
                    if (index == 0) {
                        uniqueWord =  arrayUniqueWords[i];
                        break;
                    }
                }
                if (uniqueWord) {
                    posSeekCond3 += uniqueWord.length;
                }                

                prJS = new ParserJSCode({
                    events: {
                        foundChar: function(obj) {
                            if (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 ) {
                                // 1,2                                            
                                if (obj.ch == "(" || obj.ch == ")") {
                                    if (obj.ch == "(") {
                                        //isFirstWord = true;
                                        cB++;
                                    } else if (obj.ch == ")") {
                                        cB--;
                                    }    
                                    if (cB == 0) { // end statement
                                        
                                        var remainingString = testCode.substring(obj.iC+1);
                                        if (remainingString) {
                                            remainingString = remainingString.trim();
                                        }
                                        
                                        if (!remainingString && remainingString[remainingString.length - 1] != ";") {
                                            isProblem = true;
                                            type = "semicolon";
                                        }                                        
   
                                    }
                                    if (cB < 0) { // error
                                        prJS.stop();
                                    } 
                                }                                                             

                                // 3
                                /*
                                if (uniqueWord) {
                                    var lengthWord = uniqueWord.length;
                                    //prJS.seek(lengthWord);
                                    return;
                                }*/
                                
                                //if (obj.ch == "+" && (obj.iC + 1 < testCode.length) &&
                                                       
                                // 3
                                /*if (uniqueWord) {
                                    //posSeekCond3
                                    //console.log("prev:"+prevExistChar+" now:"+obj.ch);
                                    
                                    if (prevExistChar == "+") {
                                        console.log("my prev: "+prevExistChar);
                                        //obj.ch
                                    } 
                                    
                                }*/
         
                                // type = "bracket_close";  
                                
                                
                                // 4, 6
                                if (obj.ch == "+" && (obj.iC + 1 < testCode.length) && 
                                    (testCode[obj.iC+1]=="+" || testCode[obj.iC+1]=="=")) {
                                    prJS.seek(obj.iC+2);
                                    return; // drop situation:  ++, +=  
                                }
                                if (obj.ch == "+") { // optionally check:  uniqueWord
                                    var modString = testCode.substring(obj.iC, testCode.length),
                                        firstSign = true,
                                        tmpCh = "";
                                    foundWord = "";
                                    for(var i=0; i < modString.length; i++) {

                                        if (i + 1 < modString.length && modString[i+1]) {
                                            tmpCh = modString[i+1].trim();
                                        }
                                        
                                        if (tmpCh) {                                                              
                                            if (firstSign) {
                                                if (tmpCh == ")" || tmpCh == ";") {
                                                    type = "second_parameter";
                                                    isProblem = true;
                                                    prJS.stop();
                                                    break;
                                                }
                                            }                                  
                                            firstSign = false;                                            
                                        }
                                    }
                                }                                                               
                                
                                // 7
                                if (uniqueWord) {
                                    var index = uniqueWord.length;
                                    if (index < testCode.length) {
                                        for(var i=index; i < testCode.length; i++) {
                                            var tmpCh = testCode[i].trim();
                                            if (tmpCh) {
                                                if (tmpCh != "(") {
                                                    type = "bracket_open";
                                                    isProblem = true;
                                                    prJS.stop();
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                                
                                
                            }
                                                                                   
                            // we check at the end prev char
                            if (obj.ch && obj.ch.trim() != "") {
                                prevExistChar = obj.ch;
                            }                            
                            
                        },                                              
                        
                        foundWord: function(obj) {
                            if (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 ) {
                                var reservedWords = ["new", "Array", "var", "Console.write", "Console.read", "Console", "write", "read", "repeat", "for"]
                                
                                // check exists variable between var, =
                                var varName = "";
                                if (statement.type == "var") {
                                    varName =  testCode.beetweenStrings ("var", "=");
                                    if (varName) { varName = varName.trim(); }                                     
                                }
                                
                                var isReserved = (reservedWords.indexOf(obj.word) > -1);
                                //if (!isReserved) { 
                                if ((uniqueWord && !isReserved && obj.iC > uniqueWord.length) || 
                                   (!isReserved && varName && statement.type == "var" && obj.iC > "var".length )  ) { // && !isFindFirstWord 
                                    foundWord = obj.word;
                                    //isFindFirstWord = true;
                                    
                                    var copyVars = $.extend(true, [], EMU.listVars);
                                    if (varName) {
                                        copyVars.push(varName);
                                    }
                                    
                                    for(var i=copyVars.length-1; i>=0; i--) {
                                        copyVars.push(copyVars[i]+".length");
                                    }
                                    // TODO
                                    // browserEmulator.isDebugger                                    
                                    if (browserEmulator.isDebugger && !isProblem && isNaN(foundWord) && copyVars.indexOf(foundWord)<0 ) {
                                        type = "undefined_var";
                                        isProblem = true;
                                        prJS.stop();
                                    }
                                }

                               /* if (uniqueWord) {
                                    var lengthWord = uniqueWord.length;
                                    //prJS.seek(lengthWord);
                                    return;
                                }*/
           
                            }
                        }
                    }
                });
                prJS.parse(testCode);
            }
        }
               
        
        if (prJS && !isProblem && uniqueWord) {
            if (prJS.state.isOpenQuotation1) {
                isProblem = true;
                type = "begin_quot1_without_closing"
            }
            if (prJS.state.isOpenQuotation2) {
                isProblem = true;
                type = "begin_quot2_without_closing"
            }
        }
                         
        if (!isProblem && testCode && testCode[testCode.length - 1] == "+") {
            isProblem = true;
            type = "second_parameter";
        }                           
                
         
        if (!isProblem && statement.type == "var" && testCode && testCode[testCode.length - 1] != ";") {
            isProblem = true;
            type = "semicolon";
        }           
        
        // 3
        if (cB > 0 && !isProblem) {
            // count open bracket is more than 0
            var wasFoundSemicolon = false;
            // we check if last char is semicolon
            for(var i=testCode.length-1; i>=0; i--) {
                var ch = testCode[i];
                ch = ch.trim();
                if (ch) {
                    if (ch == ";") {
                        wasFoundSemicolon = true;
                    }
                    break;
                }
            }
            isProblem = true;
            if (wasFoundSemicolon) {                
                type = "bracket_close";
            } else {
                type = "bracket_close_without_semicolon";
            }
        }        
        
        
        if (isProblem) {
            var result = {type: "error"},
                msg = "";
            if (type == "semicolon") {
                result.message = "Code error. Missing semicolon at the end of the statement.";
            } else if (type == "bracket_open") {
                result.message = "Code error. It seems like you forgot to put opening bracket '('.";
            } else if (type == "bracket_close_without_semicolon") {
                result.message = "Code error. It seems like you forgot to put closing bracket ')' and semicolon at the end of the line.";
            } else if (type == "bracket_close") {
                result.message = "Code error. It seems like you forgot to put closing bracket ')' at the end of the line.";
            } else if (type == "second_parameter") {
                result.message = "Code error detected. You probably forgot to put parameter after '+'.";
            } else if (type == "begin_quot1_without_closing") {
                result.message = "Code error detected. You did you almost correctly there is small mistake. You started with \" and not closing with \".";
            } else if (type == "begin_quot2_without_closing") {
                result.message = "Code error detected. You did you almost correctly there is small mistake. You started with ' and not closing with '.";
            } else if (type == "undefined_var") {
                result.message = "Code error. Undefined variable '"+foundWord+"'";
            } 
            
            return result;
        }
    }
    
    var getListOfStatements = function(tmpCodes) {
        var statementsList = [];
        for(var i=0; i < tmpCodes.length; i++ ) {        
            for(var iTypeCode=2;iTypeCode--;) {
                if (iTypeCode==1) {
                    statements = tmpCodes[i].statementsDef;
                } else {
                    statements = tmpCodes[i].statementsCode;
                }                
                if (statements) { 
                    for(var myIt = 0; myIt < statements.length; myIt++) {                        
                        var tmpSts =  statements[myIt];
                        statementsList.push(tmpSts);
                    }
                }
                
            }
        }   
        return statementsList;
    }
    
    var check8AutoCorrect = function(statement, tmpCodes) {
        var firstWord = "",
            isFirstWord = false,
            autoCorr = "",
            //testCode = statement.code.trim();
            testCode = statement.code.split("\n")[0];
        
        if (testCode) testCode = testCode.trim();      
        
        if (testCode) {     
            var prJS = new ParserJSCode({
                events: {
                    foundChar: function(obj) {
                        if (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 ) {                                            
                            if (obj.ch == "(" || obj.ch == " ") {
                                isFirstWord = true;
                            }
                            if (!isFirstWord) {
                                firstWord += obj.ch;
                            }
                        }
                    }              
                }
            });
            prJS.parse(testCode);                
        }
        
        var listDynamicReference = getListOfStatements(tmpCodes),
            listDynamicName = [];
            
        for(var i=0; i < listDynamicReference.length; i++) {
            var obj = listDynamicReference[i];
            if (obj.type == "var" && obj.varObj) { listDynamicName.push(obj.varObj.name); }            
            if (obj.type == "function" && obj.functionObj) { listDynamicName.push(obj.functionObj.name.split("(")[0]); }            
            if (obj.type == "class" && obj.classObj) { listDynamicName.push(obj.classObj.name); }                        
        }
                
        var listAutocorrect = ["console.write", "console.read", "if", "for", "repeat", "var"];
        firstWord = firstWord.trim().toLowerCase();
        
        for(var i=0; i < listAutocorrect.length; i++) {
            autoCorr = listAutocorrect[i];
            
            if (firstWord != autoCorr && listDynamicName.indexOf(firstWord) == -1 ) {
                if (checkSimilarString(firstWord, autoCorr)) {
                    return {
                        type: "error",
                        message: "unknown command name. Maybe you mean: "+autoCorr+" ?"
                    };
                }    
            }
        }
    }    
    
    // warning    if (zmienna=2)
    var check9Condition = function(statement) {
        var testCode = "",
            isProblem = false;
            
        var rpn = "";
        if (statement && statement.ifObj && statement.ifObj.rpn) {
            rpn = statement.ifObj.rpn;
        }
        if (statement && statement.forObj && statement.forObj.params &&
            statement.forObj.params.length > 2 && statement.forObj.params[1].rpn) {
            rpn = statement.forObj.params[1].rpn;
        }            
                   
        if (rpn){
            var arrRpn = rpn.split(" ");
            for(var i=0; i < arrRpn.length; i++) {
                var token = arrRpn[i].trim();
                if (token && token == "=") {
                    isProblem = true;
                }                    
            }
        }
        
            /*testCode = statement.code.trim();
            if (testCode) {     
                var prJS = new ParserJSCode({
                    events: {
                        foundChar: function(obj) {
                            if (!obj.state.isOpenQuotation1 && !obj.state.isOpenQuotation2 ) {                                            
                                                                
                                if (testCode[obj.iC] == "=" && (
                                     (obj.iC + 1 < testCode.length && testCode[obj.iC+1] != "=") &&
                                     (obj.iC - 1 >= 0 && testCode[obj.iC-1] != "=") &&
                                     (obj.iC - 1 >= 0 && testCode[obj.iC-1] != "!")
                                    )) {
                                    isProblem = true;
                                }
                            }
                        }              
                    }
                });
                prJS.parse(testCode);                
            }*/
        if (isProblem) {
            return {
                type: "warning",
                message: "wykrywamy sytuacje gdzie po If/For jest warunek z jednym znakiem =",
            };
        }
    }    
    
    // search the errors and warning
    that.checkInitialErrorsAndWarnings = function() {
        var statements = [],
            problemsInfo = [], //  { boardName, typeCode, lineNumber, problemType, problemNumber, problemParams }
            tmpCodes = $.extend(true, [], arrayCodes);
        
        console.log("=== ERRORS/WARNINGS ======");

        function getStatement(tmpStatement) {
            var deepSts = null; 
            if (tmpStatement.deep) {
                deepSts = tmpStatement.deep;
            } else if (tmpStatement.deepElse) {
                deepSts = tmpStatement.deepElse;
            }            
            
            if (deepSts && tmpStatement.iDeep > -1 && tmpStatement.iDeep < deepSts.length) {
                var stat = deepSts[tmpStatement.iDeep];
                stat.parent = tmpStatement;
                return getStatement(stat);
            } else {                           
                if (tmpStatement.iDeep < 0) {
                    tmpStatement.iDeep++;
                } else {
                    var parent = tmpStatement.parent;
                    if (parent) {
                        if (parent.deep) {
                            
                            tmpStatement = parent.deep[parent.iDeep];
                            parent.iDeep++; 
                            
                            if (parent.iDeep > parent.deep.length) {
                                parent.deep = null;
                                tmpStatement.iDeep = -1;
                            }
                        } else if (parent.deepElse) {
                            
                            tmpStatement = parent.deep[parent.iDeep];
                            parent.iDeep++;                            
                               
                            if (parent.iDeep > parent.deepElse.length) {
                                parent.deepElse = null;
                                tmpStatement.iDeep = -1;
                            } 
                        }
                    }
                }
                if (!tmpStatement.wasStatement) {
                    tmpStatement.wasStatement = true;
                    return tmpStatement;    
                } else {
                    return null; 
                }
            } 
        }
                
        
        for(var i=0; i < tmpCodes.length; i++ ) {        
            for(var iTypeCode=2;iTypeCode--;) {
                if (iTypeCode==1) {
                    statements = tmpCodes[i].statementsDef;
                } else {
                    statements = tmpCodes[i].statementsCode;
                }                
                if (statements) { 
                    for(var myIt = 0; myIt < statements.length; myIt++) {                        
                        var tmpSts =  statements[myIt],
                            statement = null,
                            count = 0;
                        
                        do {
                            count++;
                            statement = getStatement(tmpSts);
                            console.log(statement);
                            if (!statement) {
                                break;
                            }

                            var problem = check8AutoCorrect(statement, tmpCodes) || check123467Condition(statement) || check9Condition(statement);
                            
                            if (problem) {
                                problemsInfo.push({
                                    boardName: tmpCodes[i].boardName,
                                    typeCode: (iTypeCode==0)?parent.boardExtension.code:parent.boardExtension.definitions,
                                    lineNumber: statement.lineNumber,
                                    type: problem.type,
                                    message: problem.message
                                });
                                break;
                            } 
                            
                        } while(statement);                        
                         
                        
                    }
                }
            }
        }
        

        console.log("=== END OF SECTION: ERRORS/WARNINGS ======");
        console.log(tmpCodes);
        return problemsInfo;
    } 
    
    
    this.handleErrorsAndWarnings = function(options) {
        var problems = that.checkInitialErrorsAndWarnings(),
            warnings = [],
            wasWarning = false;
        for(var i=0; i < problems.length; i++) {
            var problem = problems[i];
            that.numberLineError =  problem.lineNumber;
            that.boardNameError = problem.boardName;
            that.boardExtensionError = problem.typeCode;                
            
            if (problem.type == "warning") {
                warnings.push(problem);
            }
            
            if (problem.type == "error") {
                throw {
                    type: problem.type,
                    name: "",
                    message: problem.message,
                }
            }
        }
        for(var i=0; i < warnings.length; i++) {
            var warning = warnings[i];
            wasWarning = true;
            if (options && options.callbackRunAway && typeof options.callbackRunAway === "function"
                        && options.callbackStopRun && typeof options.callbackStopRun === "function") {
                messageDialog.showWithTwoButtons("Warning", "In project are warnings.  [Line:"+problem.lineNumber+"] ("+problem.message+")", "STOP", "RUN AWAY", options.callbackStopRun, options.callbackRunAway);
                throw {
                    type: problem.type,
                    name: "",
                    message: problem.message,
                }
            }
        }
        if (!wasWarning && options && options.callbackAllOK && typeof options.callbackAllOK === "function") {
            options.callbackAllOK();
        }                     
    }

    this.run = function(callbackSuccess, callbackFailed, callbackLog) {
        
        if (browserEmulator.isRunning) {
            return;
        }        
                        
        try {
            // we used below command to get variables to object "EMU" (for example EMU.listVars)
            var EMUarrayCodes = that.prepareCodesToEmulator();            
             
            that.handleErrorsAndWarnings({
                //statements: EMUarrayCodes,
                callbackAnyWarningOrError: function(problem) {
                       
                },
                callbackRunAway: function() {
                    runEmuApp();
                },                
                callbackStopRun: function() {
                    parent.stopDebugger();   
                },
                callbackAllOK: function() {
                    runEmuApp();
                },                
            });
        } catch (e) {
            browserEmulator.clear();
            if (typeof callbackLog === "function") {                    
                callbackLog("[Line:"+that.numberLineError+"] "+e.name+": "+e.message+"");
            }        
            
            if(e.type == "error") {
                this.compilationStatus = COMPILATION_STATUS_ERROR;
                if (typeof callbackFailed === "function") {                    
                    callbackFailed();
                }        
                return;                
            }
            
        }
        finally {
            AJAX_ASYNC = true;
        }         
        
        
        function runEmuApp() {
            try {
                // we set type of compilation
                that.requireStepByStep = false;                
                   
                // we are at the first, create copy codes, before update him during close editor window
                var EMUarrayCodes = that.prepareCodesToEmulator();
                var tmpArrayCodes = null;    
                
                for(var i=0; i < arrayCodes.length; i++) {
                    if (arrayCodes[i].code.search(/console\.read/) != -1) {
                        // if begin from isDebugger == true, then not set this values
                        if (!browserEmulator.isDebugger) {
                            that.requireStepByStep = true;                        
                            browserEmulator.isDebugger = true;
                        }
                    }
                }                
                
                if (browserEmulator.isDebugger) {
                    tmpArrayCodes = $.extend(true, [], EMUarrayCodes);  //arrayCodes
                } else {
                    tmpArrayCodes = $.extend(true, [], arrayCodes);  
                }   
                
                /*console.log(EMUarrayCodes);
                console.log(arrayCodes);
                console.log(tmpArrayCodes);*/        
                
                that.numberLineError = -1;
                that.boardNameError = "";
                that.boardExtensionError = "";                   
                
                // clear previous environment emulator before run emulator again
                Editor.removeObjectsNotRelatedWithCanvas();  
                Editor.removeObjectsActions();
                Editor.clearTimes();  
                Editor.clearFiles();
                Editor.clearAlertQueue();
                browserEmulator.clear();
                //browserEmulator.addConsole();
                             
                
                showConsole();
                
                this.compilationStatus = COMPILATION_STATUS_BEGIN;
                browserEmulator.isRunning = true;
        
                // execute global codes
                var codes = [],
                    statements = [];
        
                codes = codes.concat(codesToGeneratedGlobalSpreadsheets());
                codes = codes.concat(codesToGeneratedGlobalBoards());
                // codes = codes.concat(codesToGeneratedGlobalLabels());
                // codes = codes.concat(codesToGeneratedGlobalTextEdits());
                for(var i=0; i < codes.length; i++) {
                    eval(codes[i]);
                    console.log("code:"+codes[i]);
                }
                
                // default values
                var iC=0,
                    iTypeCode=0,    // begin from definitions  (iTypeCode=0  def,   iTypeCode=1 code)
                    myIterator = 0;
                
                parent.resetEditorDebug();
                if (browserEmulator.isDebugger) {
                    for(var i=0; i < tmpArrayCodes.length; i++) {
                        var countDef = tmpArrayCodes[i].definitions.split("\n").length,
                            countCode = tmpArrayCodes[i].code.split("\n").length,
                            defDebugEmpty = (new Array(countDef)).join("\n")+"\n", // at the end we add extra line, to end of debugger
                            codeDebugEmpty = (new Array(countCode)).join("\n")+"\n";                                            
                        //tmpArrayCodes[i].defDebug = (new Array(countDef)).join("\n")+"\n"
                        //tmpArrayCodes[i].codeDebug = (new Array(countCode)).join("\n")+"\n";             
                        parent.setEditorDebugForCode(tmpArrayCodes[i].boardName, parent.boardExtension.definitions, defDebugEmpty);
                        parent.setEditorDebugForCode(tmpArrayCodes[i].boardName, parent.boardExtension.code, codeDebugEmpty);
                    }          
                }

            } catch (e) {
                this.compilationStatus = COMPILATION_STATUS_ERROR;
                AJAX_ASYNC = true;
                browserEmulator.clear();
                if (typeof callbackLog === "function") {                    
                    callbackLog("[Editor error] "+e.name+": "+e.message+"");
                }        
                if (typeof callbackFailed === "function") {                    
                    callbackFailed();
                }
                return;
            }
   
            // CORE CODE
            function executeCode() {   
                try {
                    
                    if (browserEmulator.debugInterrupt) {
                        browserEmulator.debugInterrupt = false;
                        return;
                    }
                    
                    // stop
                    AJAX_ASYNC = false;                                 
                    for(; iC < tmpArrayCodes.length; iC++) {
                        /*var statementsDef = tmpArrayCodes[iC].statementsDef,
                            statementsCode = tmpArrayCodes[iC].statementsCode,
                            definitionsLineCount = tmpArrayCodes[iC].definitions.split("\n").length;
                            codeLineCount = tmpArrayCodes[iC].code.split("\n").length,
                            statements = new Array();*/                       
        
                        Editor.indexActiveBoard = Editor.objectIndexByName(tmpArrayCodes[iC].boardName);
                        if(Editor.indexActiveBoard > -1 && Editor.indexActiveBoard < Editor.editorObjects.length && 
                           Editor.editorObjects[Editor.indexActiveBoard].type != ELEMENT_TYPE_BOARD) {
                            Editor.indexActiveBoard = -1;
                        }
                            
                        that.boardNameError = tmpArrayCodes[iC].boardName;
                        
                        for(;;) {
                            if (iTypeCode==1) {
                                statements = tmpArrayCodes[iC].statementsDef;
                                this.compilationStatus = COMPILATION_STATUS_GENERATED_CODE;
                                that.boardExtensionError = parent.boardExtension.definitions;
                            } else {
                                statements = tmpArrayCodes[iC].statementsCode;
                                this.compilationStatus = COMPILATION_STATUS_USER_CODE;
                                that.boardExtensionError = parent.boardExtension.code;
                            }
        
                            if (statements) {
                                for(;;) {
                                    // added for debugger
                                    /*if (myIterator >= statements.length) {
                                        if (browserEmulator.isNextStep) {
                                            parent.stopDebugger();
                                        } else {
                                            window.setTimeout(executeCode, 200);
                                            return;                                        
                                        }
                                    } */                               
                                    var statement = statements[myIterator];
        
                                    // go by parent                                
                                    if (browserEmulator.isDebugger) {
                                        // set to correct statement
                                        function getStatement(tmpStatement) {
                                            
                                            // choose correct block for 'if' (true/false)
                                            var deepSts = tmpStatement.deep;
                                            if (tmpStatement.type == "if") {
                                                
                                                if (tmpStatement.ifObj.exeElse) {
                                                    deepSts = tmpStatement.deepElse;
                                                } else {
                                                    deepSts = tmpStatement.deep;
                                                }                                                
                                            }
                                            
                                            if (deepSts && tmpStatement.iDeep > -1 && tmpStatement.iDeep <= deepSts.length) {
                                                
                                                if (tmpStatement.type == "if") {
                                                    if (tmpStatement.iDeep > -1 && tmpStatement.iDeep < deepSts.length) {
                                                        var stat = deepSts[tmpStatement.iDeep];
                                                        stat.parent = tmpStatement;
                                                        return getStatement(stat);    
                                                    } else if (tmpStatement.iDeep == deepSts.length) {
                                                        return null; // skip step
                                                    }
                                                }
                                                if (tmpStatement.type == "for" || tmpStatement.type == "repeat") {
                                                    if (tmpStatement.iDeep > -1 && tmpStatement.iDeep < deepSts.length) {
                                                        var stat = deepSts[tmpStatement.iDeep];
                                                        stat.parent = tmpStatement;
                                                        return getStatement(stat);    
                                                    } else if (tmpStatement.iDeep == deepSts.length) {
                                                        return tmpStatement;
                                                    }
                                                }                                                
                                                
                                            } else {
                                                return tmpStatement; 
                                            }                                            
                                            /*if (deepSts && tmpStatement.iDeep > -1 && tmpStatement.iDeep < deepSts.length) {
                                                var stat = deepSts[tmpStatement.iDeep];
                                                stat.parent = tmpStatement;
                                                return getStatement(stat);
                                            } else {
                                                return tmpStatement; 
                                            } */
                                        }
                                        if (statement) {
                                            statement = getStatement(statement);
                                        }                                    
                                    }
        
                                    //console.log("DEBUG: next statement: code: " +statement.code+"   iDeep: " +statement.iDeep);                                
                                    
                                    if (statement) {
                                        that.numberLineError = statement.lineNumber;
                                        
                                        if (typeof callbackLog === "function" && statement && that.numberLineError) {                    
                                            //callbackLog("[\""+that.boardNameError+"."+that.boardExtensionError+"\" Line:"+this.numberLineError+"] Find statement: "+statement.code+" type:"+statement.type+" codeType:"+statement.codeType);
                                        }    
                                        
                                        var isSetObjectName = true,
                                            definition = null;
                                        
                                        // check to not created double object for this same reference
                                        // if exist set object from canvas
                                        if (statement.codeType == STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA ||
                                             statement.codeType == STATEMENT_CODE_TYPE_NEW_TEXTFIELD ||
                                             statement.codeType == STATEMENT_CODE_TYPE_NEW_TEXTEDIT ||
                                             statement.codeType == STATEMENT_CODE_TYPE_NEW_BUTTON) {
            
                                            definition = Editor.definitions.getDefinitionsOfNewObject(statement.code);
             
                                            var idObject = Editor.objectIndexByName(definition.variable);
                                            var object = Editor.objectByName(definition.variable);                                    
                                            if (idObject != undefined && object) {                    
                                                statement.code = "var "+definition.variable+" = Editor.editorObjects["+idObject+"];";
                                                if (object.type && 
                                                    (object.type == ELEMENT_TYPE_CLICKABLE_AREA ||
                                                     object.type == STATEMENT_CODE_TYPE_NEW_TEXTFIELD ||
                                                     object.type == ELEMENT_TYPE_TEXTEDIT ||
                                                     object.type == ELEMENT_TYPE_BUTTON)) {
                                                    var element = object.getElement();
                                                    object.setElement(element);
                                                }
                                                isSetObjectName = false; // name is already set
                                            }
                                        }
                
                                        var tabData = {},
                                            debuggerEditor = {},
                                            cmEditor = {},
                                            skipBeforeNewStatement = false;
                                            
                                        function openTabAndSet() {    
                                            parent.openBoardCode(that.boardNameError, that.boardExtensionError);
                                            tabData = codeEditor.findObjectOfTabsData([{search:"name", value: that.boardNameError},{search:"typeCode", value: that.boardExtensionError}]);
                                            debuggerEditor = tabData.codeMirrorDebug;
                                            cmEditor = tabData.codeMirror;
                                        }  
                                        
                                        function setDebugInfo() {                                    
                                            // show info in Debug
                                            if (browserEmulator.isDebugger && debuggerEditor) {
                                                //var posEnd = {line: debuggerEditor.lastLine(), ch: 0 };
                                                var posStart = {line: that.numberLineError-1, ch: 0},
                                                    posEnd = {line: that.numberLineError-1, ch: Number.MAX_VALUE},
                                                    detailsString = parent.strings.stringForCode(statement).trim();
                                                    shortString = parent.strings.stringForCode(statement, {shortString: true, maxLength: 50}).trim();
                                                
                                                                                                
                                                if (statement.type == "for" || statement.type == "repeat") {                                                
                                                    // clear lines after current lines (only for statement.type == "for"/"repeat")
                                                    parent.clearEditorDebugForRange(that.boardNameError, that.boardExtensionError, {from: statement.lineNumber, to: statement.lineNumberEnd}  );
                                                    parent.clearDebugLineDetailsForRange(that.boardNameError, that.boardExtensionError, {from: statement.lineNumber, to: statement.lineNumberEnd} );                                                  
                                                }  
                                                if (statement.type == "if" || statement.type == "for") {
                                                    // add see details button
                                                    parent.addOrUpdateDebugLineDetails({
                                                        name: that.boardNameError,
                                                        typeCode: that.boardExtensionError,
                                                        lineNumber: statement.lineNumber,
                                                        statementType: statement.type,
                                                        detailsCode: detailsString
                                                    });
                                                    
                                                    
                                                }
                                                                                              
                                                // refresh content for debugger info
                                                parent.setEditorDebugForCodeLine(that.boardNameError, that.boardExtensionError, shortString, that.numberLineError-1);
                                                debuggerEditor.replaceRange(shortString, posStart, posEnd);                                                                                               
                                                debuggerEditor.refresh();        
                                            }                         
                                        }                                                                                                                                                                                                                        
                                            
                                        /*if (statement.parent) {
                                            console.log("iDeep:"+statement.parent.iDeep);
                                        }*/
                                           
                                            
                                        if (browserEmulator.isDebugger && !browserEmulator.waitForUser) {
                                            
                                            if (that.requireStepByStep) {
                                                browserEmulator.isNextStep = true;
                                            }
                                                                                    
                                            if (browserEmulator.isNextStep) {
                                                
                                                browserEmulator.isNextStep = false;                                                                                            
                                                openTabAndSet();
                                                parent.clearLinesType("code_mirror_line_conditional");
                                                parent.removeDebugConsoleRead();
                                                
                                                
                                                //if (statement.type != "if") { // we draw horizontal debug line for all command, besides if                                              
                                                    parent.setDebugLine(that.boardNameError, that.boardExtensionError, that.numberLineError-1);
                                                //}
                                                parent.jumpToLine(that.boardNameError, that.boardExtensionError, that.numberLineError-1);
                                                parent.setReadOnlyDebugForAll(true);
                                                    
                                                // add empty line until can add info debugger
                                                /*for(;;) {                   // +1                                   
                                                    if (that.numberLineError > debuggerEditor.lineCount()) {
                                                        browserEmulator.debugCanCreateNewLine = true;
                                                        var posEnd = {line: debuggerEditor.lastLine(), ch: 0 };
                                                        debuggerEditor.replaceRange("\n", posEnd, posEnd);
                                                    } else {
                                                        browserEmulator.debugCanCreateNewLine = false;
                                                        break;
                                                    }
                                                }*/
                                                
                                                setDebugInfo();
                                                
                                                //  if statement has parent and is 'for' then he become parent himself   
                                                if (statement.parent) {                                                
                                                    if (statement.type == "for" || statement.type == "if") {                                                    
                                                    } else {                                                
                                                        statement = statement.parent;
                                                    }
                                                }    
                                                                                      
          
                                                //console.log("EMU0 i: " +EMU.i+"");
                                                
                                                                                        
                                                if (statement.type == "for" || statement.type == "repeat") {
                                                    if (statement.deep) {
                                                    //console.log("DEBUG: statement: iDeep: " +statement.iDeep+"");
                                                        
                                                        // loop for: init values
                                                        if (statement.iDeep < 0) {
                                                            var p0 = statement.forObj.params[0];
                                                            if (p0 && p0.code) {
                                                                var p0code = p0.code; // >>setCodesToEMUVars(p0.code);                                               
                                                                eval(p0code);
                                                                setDebugInfo();
                                                            }
                                                        }
                                                        
                                                        // loop for: check conditional                                                        
                                                        if (statement.iDeep < 0 || statement.iDeep >= statement.deep.length) {    
                                                            
                                                            // third part of "for" loop 
                                                            if (statement.iDeep >= statement.deep.length) {
                                                                var p2 = statement.forObj.params[2];
                                                                if (p2 && p2.code) {
                                                                    var p2code = p2.code; // >> setCodesToEMUVars(p2.code);
                                                                    eval(p2code);
                                                                    setDebugInfo();
                                                                }
                                                            }
                                                                                                                                                                                    
                                                            var p1 = statement.forObj.params[1];
                                                            if (p1 && p1.code) {                 
                                                                var p1code = p1.code; // >>setCodesToEMUVars(p1.code);                                            
                                                                var rpnInfo = Algorithm.infix_to_rpn_to_info(p1code);    //   conditionalValue(p1code);
                                                                if (rpnInfo.success) {        
                                                                    
                                                                    console.log("COND: " +rpnInfo.value+"");
                                                                    console.log("EMU i: " +EMU.i+"");
                                                                    
                                                                    // >> statement.iDeep
                                                                    
                                                                    if (rpnInfo.value) {                                                                     
                                                                        statement.iDeep = 0;
                                                                        skipBeforeNewStatement = true;                                                                               
                                                                        if (statement.rangeFrom && statement.rangeTo) {
                                                                            parent.setCodeSelectionRange(that.boardNameError, that.boardExtensionError, statement.rangeFrom, statement.rangeTo, {lineClass:"code_mirror_line_conditional"});
                                                                        }                                                                                                                                                                                                               
                                                                    } else { // 
                                                                        statement.iDeep = -1;
                                                                        if (statement.parent){
                                                                            statement.parent.iDeep++;
                                                                            skipBeforeNewStatement = true;
                                                                        } 
                                                                    }                                                   
                                                                }
                                                            }                                                        
                                                            //iDeep = 0;
                                                            
                                                        } else {
                                                            //console.log("iDeep:"+statement.iDeep);
                                                            //console.log("Deep length:"+statement.deep.length);
                                                            //console.log("Deep code:"+statement.deep[statement.iDeep].code);
                                                            //console.log(statement);
                                                            
                                                            eval(statement.deep[statement.iDeep].code);   // execute for console.read and set waitForUser                                                     
                                                            if (!browserEmulator.waitForUser) {
                                                                statement.iDeep++;
                                                            }
                                                            skipBeforeNewStatement = true;
                                                            //console.log("DEBUG: statement2: iDeep: " +statement.iDeep+"");                                                                                                               
                                                        }
                                                    }
                                                } else if (statement.type == "if") {
                                                    if (statement.ifObj && statement.ifObj.rpn) {  
                                                        
                                                        var deepSts = [];
                                                        function setCorrectDeep() {
                                                            deepSts = [];
                                                            if (statement.ifObj.exeElse) {
                                                                deepSts = statement.deepElse;
                                                            } else {
                                                                deepSts = statement.deep;
                                                            } 
                                                        }
                                                        
                                                        function setNextStatementForParent() {
                                                            if (statement.iDeep < deepSts.length) {                                                                
                                                                skipBeforeNewStatement = true;
                                                            } else {
                                                                statement.iDeep = -1;
                                                                if (statement.parent) {                                                                    
                                                                    statement.parent.iDeep++;
                                                                    skipBeforeNewStatement = true;
                                                                }
                                                            }  
                                                        }                                                    
                                                        
                                                        // first exe of statement so check conditional
                                                        if (statement.iDeep < 0) {  // deepSts && deepSts.length > 0 &&                                                                                        
                                                            var rpnInfo = Algorithm.rpn_to_info(statement.ifObj.rpn); 
                                                                                                                    
                                                            if (rpnInfo.success) {
                                                                if (rpnInfo.value) {                                                       
                                                                    statement.ifObj.exeElse = false;
                                                                    if (statement.rangeFrom && statement.rangeTo) {
                                                                        parent.setCodeSelectionRange(that.boardNameError, that.boardExtensionError, statement.rangeFrom, statement.rangeTo, {lineClass:"code_mirror_line_conditional"});
                                                                    }                                                                                                                                           
                                                                    console.log(statement.range);
                                                                } else {
                                                                    statement.ifObj.exeElse = true;
                                                                    if (statement.rangeElseFrom && statement.rangeElseTo) {                                                                        
                                                                        parent.setCodeSelectionRange(that.boardNameError, that.boardExtensionError, statement.rangeElseFrom, statement.rangeElseTo, {lineClass:"code_mirror_line_conditional"});
                                                                    }
                                                                }                                                             
                                                            }
                                                            //eval(statement.code);
                                                            statement.iDeep = 0;
                                                            setCorrectDeep();                                                        
                                                            if (!deepSts || statement.iDeep >= deepSts.length) {
                                                                statement.iDeep = -1;
                                                                if (statement.parent) {                                                                    
                                                                    statement.parent.iDeep++;                                                                
                                                                    skipBeforeNewStatement = true;
                                                                } 
                                                            } else {
                                                                skipBeforeNewStatement = true; /// <<<
                                                            }                                                   
                                                             
                                                        }  else { // after check conditional we iterate 
                                                            
                                                            setCorrectDeep();
                                                            
                                                            if (deepSts && deepSts.length > 0 && statement.iDeep < deepSts.length) {
                                                                eval(deepSts[statement.iDeep].code); // execute for console.read and set waitForUser
                                                                if (!browserEmulator.waitForUser) {
                                                                    statement.iDeep++;
                                                                }
                                                                setNextStatementForParent();
                                                                                                                      
                                                            }/* else { <<
                                                                //statement.iDeep = -1; <<< 
                                                                if (statement.parent) {
                                                                    statement.parent.iDeep++;
                                                                    //skipBeforeNewStatement = true;
                                                                } else {
                                                                    //skipBeforeNewStatement = true;
                                                                }                                                            
                                                            }*/
                                                        }
                                                    }
                                                } else { // other 
                                                    eval(statement.code);    
                                                }                                                
                                                          
                                                //parent.setEditorDebugForCode(that.boardNameError, that.boardExtensionError, codeToDebugger);
                                                //debuggerEditor.setOption("readOnly", true);                                            
                                                /*debuggerEditor.markText({line:0, ch:0}, posStart, {readOnly: true} );
                                                debuggerEditor.markText(posEnd, {line:debuggerEditor.lastLine(), ch:Number.MAX_VALUE}, {readOnly: true} );
                                                debuggerEditor.markText(posStart, posEnd, {readOnly: false} );
                                                */
                                                
                                            } else {
                                                skipBeforeNewStatement = true;
                                            }
                                        }                                                                                             
                                        
                                        if (!browserEmulator.isDebugger) {
                                            eval(statement.code);
                                        }
                                        
                                        // ustaw nieaktywne pole do pisania, ustal
                                        //
                                        
                                        
                                        if (browserEmulator.waitForUser) {  // console read
                                            openTabAndSet();
                                            browserEmulator.consoleCurrentCommandUser = debuggerEditor.getLine(that.numberLineError-1);
                                            //setReadOnlyDebugForLine
                                            //parent.setReadOnlyDebugForLine(that.boardNameError, that.boardExtensionError, that.numberLineError-1, false);
                                            parent.setReadOnlyDebugForAll(false);                                                                                       
                                            // when string != null, then set value
                                            //console.log("command NOT set");
                                                                                                
                                            var lengthInfoText = 'App expects you to put value and press enter:'.length,
                                                lengthReadText = browserEmulator.consoleCurrentCommandUser.length;
                                            parent.setDebugConsoleRead(that.boardNameError, that.boardExtensionError, that.numberLineError, {from: 0, to: lengthInfoText} );
                                            debuggerEditor.setCursor({line: that.numberLineError-1, ch: lengthReadText });
                                            debuggerEditor.refresh();
                                            debuggerEditor.focus();                                            
                                            //lengthReadText
                                            
                                            //if (consoleCurrentCommandUser)
                                            //browserEmulator.consoleCurrentCommandUser = browserEmulator.consoleCurrentCommandUser.substring(lengthReadText, );
                                            
                                            // consoleCurrentCommandUserConfirmed - debug console
                                            // consoleLastCommandUser - emu console
                                            if (browserEmulator.consoleLastCommandUser || browserEmulator.consoleCurrentCommandUserConfirmed) {
                                                
                                                // remove text 'App expects you to put value and press enter:'
                                                var lineRead = browserEmulator.consoleCurrentCommandUserConfirmed;
                                                if (lineRead) {
                                                    lineRead = lineRead.substring(lengthInfoText);
                                                    if (lineRead) {
                                                        lineRead = lineRead.trim();
                                                    }
                                                }                                                
                                                lineRead = lineRead || browserEmulator.consoleLastCommandUser;
                                                
                                                if (lineRead) {
                                                    var key = browserEmulator.consoleReadVariable,
                                                        commandUser = lineRead;
    
                                                    if (commandUser) {
                                                        eval(prefixEMU+'.'+key+' = "'+commandUser+'";');
                                                        //console.log(EMU);
                                                        browserEmulator.consoleLastCommandUser = null;
                                                        browserEmulator.consoleCurrentCommandUserConfirmed = null;
                                                        browserEmulator.waitForUser = false;
                                                        browserEmulator.isNextStep = true;
                                                        if (statement.parent && statement.parent.deep) {
                                                            statement.parent.iDeep++;
                                                            skipBeforeNewStatement = true;
                                                        }
                                                    }                                                 
                                                } else {
                                                    skipBeforeNewStatement = true; 
                                                }
                                                
                                            } else {
                                                skipBeforeNewStatement = true; 
                                            }                                   
                                        }     
                                        
                                        //BACK
                                            if (skipBeforeNewStatement) {
                                                skipBeforeNewStatement = false;
                                                if (browserEmulator.isRunning) {
                                                    window.setTimeout(executeCode, (that.requireStepByStep)?1:100);
                                                }
                                                return; 
                                            }                                                                             
         
                                            if (definition && (statement.codeType == STATEMENT_CODE_TYPE_NEW_CLICKABLE_AREA ||
                                                 statement.codeType == STATEMENT_CODE_TYPE_NEW_TEXTFIELD ||
                                                 statement.codeType == STATEMENT_CODE_TYPE_NEW_TEXTEDIT ||
                                                 statement.codeType == STATEMENT_CODE_TYPE_NEW_BUTTON )) {
                                                var command = "";
                                            
                                            // set name for created object
                                            if (isSetObjectName) {
                                                command = definition.variable+".name = "+"\""+definition.variable+"\""; // xxx.name = "xxx";
                                                eval(command);                                            
                                            }
                                            if(Editor.indexActiveBoard!=-1) {
                                                command = definition.variable+".parent = Editor.editorObjects["+Editor.indexActiveBoard+"];";
                                                eval(command);
                                            }
                                        }
                
                                        this.compileProgress = myIterator;    
                                        //console.log(statement.code +" line:"+statement.lineNumber+" gen:"+parent.getGeneratedCodeCountLine()+" status:"+this.compilationStatus)
                                        
                                    }
                                    
                                                               
                                    // check deep
                                    var canIterate = true;
                                    /*if (statement.deep && statement.deep.length > 0) {
                                        iDeep++;  // first execute set to 0                                    
                                        if (iDeep >= statement.deep.length) {
                                            iDeep = -1;                                        
                                        } else {
                                            canIterate = false;
                                        }
                                    } */                               
                                    
                                    
                                    // check conditional at the end, because will back to here from other function
                                    // and dont want to rewrite this variable
                                    if (canIterate) {                               
                                        myIterator++;                        
                                        if (myIterator >= statements.length) {
                                            myIterator = 0;
                                            break;
                                        } 
                                    }
        
                                }
                            }
                            
                            // check conditional at the end, because will back to here from other function
                            // and dont want to rewrite this variable
                            iTypeCode--;                        
                            if (iTypeCode < 0) {   // iTypeCode<=0
                                iTypeCode = 1; // <<<
                                break;
                            }  
                        }
                    }  
        
                    if (!browserEmulator.isDebugger) { // normal compilation (without debugger)
                        // compilation success          
                        this.compilationStatus = COMPILATION_STATUS_DONE;        
                        
                        // prepare environment emulator & next run            
                        browserEmulator.clearBackground();                        
                        browserEmulator.displayObjects(Editor.editorObjects);            
                        setTimeout(function() { browserEmulator.refreshConsole(); }, 100);   
                        
                        if (typeof callbackSuccess === "function") {                    
                            callbackSuccess();
                        }
                    } else { // debug compilation 
                                      
                        function checkDebugEnd() {
                            if (browserEmulator.isRunning && !browserEmulator.isNextStep) {
                                window.setTimeout(checkDebugEnd, 200);
                            } else {
                                browserEmulator.isNextStep = true;
                                parent.stopDebugger();
                            }
                            return; 
                        }
                        browserEmulator.isNextStep = false;
                        checkDebugEnd();
                    }
                                    
                } catch (e) {
                    this.compilationStatus = COMPILATION_STATUS_ERROR;
                    browserEmulator.clear();
                    if (typeof callbackLog === "function") {                    
                        callbackLog("[Line:"+that.numberLineError+"] "+e.name+": "+e.message+"");
                    }        
                    if (typeof callbackFailed === "function") {                    
                        callbackFailed();
                    }                             
                }
                finally {
                    AJAX_ASYNC = true;
                } 
            }
            executeCode();
        
       } // end of function runEmuApp
    }
    
 
    
    		
}
////////////////////
// CODE EDITOR - HELP 


function CodeEditorHelp() {    
    var that = this;
    //this.idPanelTree = "id_help_panel_tree";
    this.idObjectTree = "id_help_panel_tree_object_tree";
    //this.idPanelInfo = "id_help_panel_info";
    this.idObjectTreePrefix = "help_object_tree_prefix";
    
    this.uniqueId = 1;    
    this.jsonData = []; // = '[{ attributes: { id : "pjson_1" }, state: "open", data: "Root node 1", children : [ { attributes: { id : "pjson_2" }, data: { title : "Custom icon", icon : "../media/images/ok.png" } },{ attributes: { id : "pjson_3" }, data: "Child node 2" }, { attributes: { id : "pjson_4" }, data: "Some other child node" }]}, { attributes: { id : "pjson_5" }, data: "Root node 2" } ]';
        

   /*this.showPTree = function(visible) {
        if (visible) {
            $("#"+this.idPanelTree).show();
            $("#"+this.idPanelNoTree).hide();
        } else {
            $("#"+this.idPanelTree).hide();
            $("#"+this.idPanelNoTree).show();            
        }
    }  
    this.showPInfo = function(visible) {
        $("#"+this.idPanelInfo).css("display",(visible)?"block":"none");
    }    */
    
    this.create = function() {
      //this.reflowTree();
      this.setJSTree();  
    }
    
    this.addNode = function(nodeId, objectLeaf) {
        $("#"+this.idObjectTree).jstree("create",nodeId,"last",{attr : {id: objectLeaf.attr.id, boardName:objectLeaf.attr.boardName, boardExtension:objectLeaf.attr.boardExtension, lineNumber:objectLeaf.attr.lineNumber}, data: { title: objectLeaf.data.title, icon: objectLeaf.data.icon }},false,true);
               
    }    
    
    /*this.addBeforeNode = function(nodeId, idNodeToAdd, nameToAdd) {
        $("#"+this.idObjectTree).jstree("create","#"+nodeId, "before", {attr : {id: idNodeToAdd}, data: {title: nameToAdd, icon}}, false, true);
    }
    
    this.addAfterNode = function(node, name) {
        $("#"+this.idObjectTree).jstree("create","#"+nodeId, "after", {attr : {id: idNodeToAdd}, data: nameToAdd}, false, true);
    }   */ 
    
    this.removeNode = function(nodeId) {
        $("#"+this.idObjectTree).jstree("remove",$("#"+nodeId));        
    }
    
   // st1, st2, f1, st3
  //  st1, st2, st3, f1, 

    this.refreshJSTree = function(jsonObj) {
        
        var isUpdate = false; 
        
        if (jsonObj.length != this.jsonData.length) {
            isUpdate = true;
        }
        
        if (!isUpdate && jsonObj.length == this.jsonData.length) {
            for(var i=0; i < this.jsonData.length; i++) {
                if (this.jsonData[i].data.title != jsonObj[i].data.title) {
                    isUpdate = true;
                    break;
                }
            }
        }
        
        if (isUpdate) {
            console.log("update tree");
            for(var i=0; i < this.jsonData.length; i++) {
                this.removeNode(this.jsonData[i].attr.id);
            }          
            for(var i=0; i < jsonObj.length; i++) {
                this.addNode(-1, jsonObj[i]);
                
            }   
            this.jsonData = jsonObj;
        }
        
        /*var result = new Array();
        var removeAndAddFromIndex=-1;
        
        for(var i=0; i < jsonObj.length; i++) {          
            if ((this.jsonData.length > i && this.jsonData[i].data.title != jsonObj[i].data.title) ||
                i > this.jsonData.length) {
              //removeAndAddFromIndex = i;             
              console.log("refresh tree index:"+removeAndAddFromIndex);
              break;  
            }
        }
        
        if (removeAndAddFromIndex > -1) {
            for(var j=this.jsonData.length-1; j >= removeAndAddFromIndex; j--) {
                console.log("remove node index:"+j);
                this.removeNode(this.jsonData[j].attr.id);
            }       
            
            for(var j=removeAndAddFromIndex; j < jsonObj.length; j++) {
                console.log("add node index:"+j);
                this.addNode(-1, jsonObj[j]);
            }          
            this.jsonData = jsonObj;         
        }*/


        /*var scrollY = $("#"+this.idPanelTree).scrollTop();
        console.log(scrollY);
        this.setJSTree(); 
        $("#"+this.idPanelTree).scrollTop(scrollY);*/               
        
    } 
    
              
    this.setJSTree = function() { //"html_data",
    
        $("#"+this.idObjectTree).jstree( { "plugins" : ["themes", "json_data", "crrm","ui"], // ,"ui"
            "core" : { animation: 0 /*"initially_open" : this.arrayIdParentsOfSelectedNode*/ }, 
            "themes" : { "theme" : "default","icons" : true},
            "ui": { "select_limit" : 1, },
            "json_data": {
                "data": that.jsonData
            }
			
            // 1) if using the UI plugin bind to select_node
            }).bind("select_node.jstree", function (event, data) { 
                // `data.rslt.obj` is the jquery extended node that was clicked    
                
                nodeIdSelected = data.rslt.obj.attr("id");
                var lineNumber = data.rslt.obj.attr("lineNumber");
				var boardName = data.rslt.obj.attr("boardName");
				var boardExtension = data.rslt.obj.attr("boardExtension");
                $.jstree._focused().select_node("#"+nodeIdSelected);  
                
                $("#"+that.idObjectTree).jstree("toggle_node", data.rslt.obj);
                $("#"+that.idObjectTree).jstree("deselect_node", data.rslt.obj);  
                
                
                //$("#"+codeEditor.idCodeEditorCode).scrollTop(lineNumber*20);
				if (boardName && boardExtension) {
					codeEditor.jumpToLine(boardName, boardExtension, lineNumber, 2);
				}
            }).bind("loaded.jstree", function (event, data) {
                //$.jstree._focused().select_node("#"+that.idActionSelected);                                      
            }).bind("dblclick.jstree", function (event) {
               //var node = $(event.target).closest("li");
               //var data = node.data("jstree");
               //alert("a");
               // Do my action
            });//.delegate("a", "click", function (event, data) { event.preventDefault(); });
                        
    }    
    

    /*this.reflowTree = function() {   
        var html = "";
        html += showTreeElement(this.data);
        $("#"+this.idObjectTree).html(html);
        
        //that.setEvents();
    }

    var showTreeElement = function(parent) {
        var html = "";
        if (parent && parent.children && parent.children.length > 0) {
            html += "<ul>";
            for(var i=0; i < parent.children.length; i++) {
                var object = parent.children[i];
                var nodeId = that.idObjectTreePrefix+object.uniqueId; 
                html += "<li id=\""+nodeId+"\" title='"+object.title+"'> \
                             <a style='cursor:default;'>  "+object.text+" </a>";  
                             // <span style='color:red;font-size:7pt;'><i>"+action.getInfo()+"</i></span></a>";
                html += showTreeElement(object);
                html += "</li>";            
            }
            html += "</ul>";
        }
        return html;
    } */         
          

    	
}
////////////////////
// CODE EDITOR - EXPLORER 


function CodeEditorExplorer() {    
    var that = this;
    this.idObjectTree = "id_explorer_panel_tree_object_tree";
    this.idObjectTreePrefix = "explorer_object_tree_prefix";
    
    this.uniqueId = 1;    
    this.jsonData = []; // = '[{ attributes: { id : "pjson_1" }, state: "open", data: "Root node 1", children : [ { attributes: { id : "pjson_2" }, data: { title : "Custom icon", icon : "../media/images/ok.png" } },{ attributes: { id : "pjson_3" }, data: "Child node 2" }, { attributes: { id : "pjson_4" }, data: "Some other child node" }]}, { attributes: { id : "pjson_5" }, data: "Root node 2" } ]';        
    
    this.create = function() {
      this.setJSTree();  
    }
    
    this.addNode = function(nodeId, objectLeaf) {
        $("#"+this.idObjectTree).jstree("create",nodeId,"last",{attr : {id: objectLeaf.attr.id, boardName:objectLeaf.attr.boardName, boardExtension:objectLeaf.attr.boardExtension, title:objectLeaf.data.title}, data: { title: objectLeaf.data.title, icon: objectLeaf.data.icon }},false,true);
               
    }    
    
    this.removeNode = function(nodeId) {
        $("#"+this.idObjectTree).jstree("remove",$("#"+nodeId));        
    }
    
    this.refreshJSTree = function(jsonObj) {    
        if (this.jsonData.length != jsonObj.length) {      
            for(var i=0; i < jsonObj.length; i++) {
                this.addNode(-1, jsonObj[i]);
                
            }   
            this.jsonData = jsonObj;
        }
    } 
    
              
    this.setJSTree = function() { //"html_data",
    
        $("#"+this.idObjectTree).jstree( { "plugins" : ["themes", "json_data", "crrm","ui"], // ,"ui"
            "core" : { animation: 0 /*"initially_open" : this.arrayIdParentsOfSelectedNode*/ }, 
            "themes" : { "theme" : "default","icons" : true},
            "ui": { "select_limit" : 1, },
            "json_data": {
                "data": that.jsonData
            }
            // 1) if using the UI plugin bind to select_node
            }).bind("select_node.jstree", function (event, data) { 
                // `data.rslt.obj` is the jquery extended node that was clicked    
                
                nodeIdSelected = data.rslt.obj.attr("id");
                var boardName = data.rslt.obj.attr("boardName");
                $.jstree._focused().select_node("#"+nodeIdSelected);  
                
                $("#"+that.idObjectTree).jstree("toggle_node", data.rslt.obj);
                $("#"+that.idObjectTree).jstree("deselect_node", data.rslt.obj);  
				
                  var boardExtension = data.rslt.obj.attr("boardExtension");
                  if (boardName && boardExtension) {
                      codeEditor.openBoardCode(boardName, boardExtension);
                  }
                                              
                                              
            }).bind("loaded.jstree", function (event, data) {
                //$.jstree._focused().select_node("#"+that.idActionSelected);                                      
            }).bind("dblclick.jstree", function (event) {
               var node = $(event.target).closest("li");
               /*if (node && node[0]) {
                  var boardName = $(node[0]).attr("boardName");
                  var boardExtension = $(node[0]).attr("boardExtension");
                  if (boardName && boardExtension) {
                      codeEditor.openBoardCode(boardName, boardExtension);
                  }
               }*/
               
               
               //console.log(data);
               
               //alert("a");
               // Do my action
            });//.delegate("a", "click", function (event, data) { event.preventDefault(); });
                        
    }    

    	
}
////////////////////
// CODE EDITOR - TEMPLATES & REGEXP

var varExp = new RegExp("var\\s+[^;]*[^;]","");
function CodeEditorTemplates() {    
    var that = this;
    
    this.stringDeclatationNew = function(variableName) {
        return "var "+variableName+" = new Object();";
    }    
    
    this.stringDeclatationNewClickableArea = function(variableName) {
        return "var "+variableName+" = new ClickableArea();";
    }

    this.stringDeclatationNewTextField = function(variableName) {
        return "var "+variableName+" = new TextField();";
    }
    
    this.stringDeclatationNewTextEdit = function(variableName) {
        return "var "+variableName+" = new TextEdit();";
    }    
    
    this.stringDeclatationNewButton = function(variableName) {
        return "var "+variableName+" = new Button();";
    }    
    
    this.stringDeclatationNewObject = function(variableName, type) {
        switch(type) {
            case ELEMENT_TYPE_CLICKABLE_AREA:
                return that.stringDeclatationNewClickableArea(variableName);
                break;
            case ELEMENT_TYPE_TEXT:
                return that.stringDeclatationNewTextField(variableName);
                break;
            case ELEMENT_TYPE_TEXTEDIT:
                return that.stringDeclatationNewTextEdit(variableName);
                break;
            case ELEMENT_TYPE_BUTTON:
                return that.stringDeclatationNewButton(variableName);
                break;
            default:
                return that.stringDeclatationNew(variableName);
                break;                
        }        
    }    
    
    this.stringObjectParameter = function(variableName, variableParameter, variableValue ) {
        var commas = "";
        if (variableParameter == "fontType" || variableParameter == "textColor" || 
            variableParameter == "titleColor" || variableParameter == "text" ||
            variableParameter == "html" || variableParameter == "image" || 
            variableParameter == "background") {
            commas = "\"";
        }
        if (variableParameter == "text") {
            variableValue = Convert.nl2br(variableValue);
        }
        return variableName+"."+variableParameter+" = "+commas+variableValue+commas+";";
    }    
    

    //this.regExpDeclarationNewAnyObject = function() {
     //   return new RegExp("(var)\\s*[^=]*=\\s*(new)\\s*(ClickableArea\\(\\);)","");                   
    //}    
    
    this.regExpDeclarationNewClickableArea = function() {
        return new RegExp("(var)\\s*[^=]*=\\s*(new)\\s*(ClickableArea\\(\\);)","");                   
    }
    
    this.regExpDeclarationNewTextField = function() {                
        return new RegExp("(var)\\s*[^=]*=\\s*(new)\\s*(TextField\\(\\);)","");                
    }
    
    this.regExpDeclarationNewTextEdit = function() {                
        return new RegExp("(var)\\s*[^=]*=\\s*(new)\\s*(TextEdit\\(\\);)", "");                
    }

    this.regExpDeclarationNewButton = function() {                
        return new RegExp("(var)\\s*[^=]*=\\s*(new)\\s*(Button\\(\\);)", "");                
    }

    this.regExpDeclarationEqual = function() {                
        //  [^\\s]*[^=]=\\s*[\\w\\.\\+\\-\\s\"',:\\[\\]\\(\\)]+\\s*;    //  [^\\s]*[^=]=\\s*(\"[^\"]*\"|[\\d]+)\\s*;  // [^=]=\s*("[^"]*"|\d*); // RegExp("={1}[^=]*[^{]*");
        return new RegExp("[^\\s]*[^=]=\\s*[^;]+\\s*;", "");   
    }
    
    
    this.regExpDeclarationIncrement = function() {                
        return new RegExp("[\\w\\.]+\\s*\\+\\+\\s*;", ""); 
    }    
    
    this.regExpDeclarationDecrement = function() {                
        return new RegExp("[\\w\\.]+\\s*\\-\\-\\s*;", ""); 
    }         
    
    this.regExpDeclarationSum = function() {      
        return new RegExp("[\\w\\.]+\\s*\\+\\=\\s*[\\w\\.\\+\\s\"'\\[\\]\\(\\)]+\\s*;", ""); 
    }         
    this.regExpDeclarationMinus = function() {                
        return new RegExp("[\\w\\.]+\\s*\\-\\=\\s*[\\w\\.\\+\\s\"'\\[\\]\\(\\)]+\\s*;", ""); 
    }         
    this.regExpDeclarationMulti = function() {                
        return new RegExp("[\\w\\.]+\\s*\\*\\=\\s*[\\w\\.\\+\\s\"'\\[\\]\\(\\)]+\\s*;", ""); 
    }         
    this.regExpDeclarationDiv = function() {                
        return new RegExp("[\\w\\.]+\\s*\\/\\=\\s*[\\w\\.\\+\\s\"'\\[\\]\\(\\)]+\\s*;", ""); 
    }         
    
    this.regExpDeclarationAddAction = function() {                
        return  /[\w]*.addAction\("(onclick|ondrop)"[\s]*,[^{]*{[\s]*action:[^,]*,[\s]*name:[^}]*}[\s]*\)[\s]*;/;  //new RegExp("[\\w]*.addAction\\([^\\)]*\\);", "");                  
    }
    
    this.regExpDeclarationAddActionWithoutEndSemicolon = function() {                
        return  /[\w]*.addAction\("(onclick|ondrop)"[\s]*,[^{]*{[\s]*action:[^,]*,[\s]*name:[^}]*}[\s]*\)[\s]*/;                    
    }    
    
    this.regExpDeclarationGlobalVar = function() {
        return /var\s+[^;]*[^;]/g;
    }

    this.regExpGlobalVariable = function(variable) {
        return new RegExp("[^A-Za-z0-9_\\-\\.]"+variable+"[^A-Za-z0-9_\\-]", "g");
    }
    
    this.regExpEMUNewClickableArea = function() {
        return new RegExp("(EMU.)\\s*[^=]*=\\s*(new)\\s*(ClickableArea\\(\\);)","");                   
    }
    
    this.regExpEMUNewTextField = function() {                
        return new RegExp("(EMU.)\\s*[^=]*=\\s*(new)\\s*(TextField\\(\\);)","");                
    }
    
    this.regExpEMUNewTextEdit = function() {                
        return new RegExp("(EMU.)\\s*[^=]*=\\s*(new)\\s*(TextEdit\\(\\);)", "");                
    }

    this.regExpEMUNewButton = function() {                
        return new RegExp("(EMU.)\\s*[^=]*=\\s*(new)\\s*(Button\\(\\);)", "");                
    }
    
 
}
////////////////////
// RECORDWRITING

var KeyboardCode = {
    shift: 16,
    ctrl: 17,
    cursorUp: 38,
    cursorDown: 40,
    cursorLeft: 37,
    cursorRight: 39,
    backspace: 8,
    enter: 13,
    pageUp: 33,
    pageDown: 34,
    home: 36,
    end: 35
};

function RecordWriting(options) {
    var that = this,
        startDateMs = 0,
        nowDateMs = 0,
        isRunning = false,
        isDebug = false,
        events = (options && options.events)?options.events:{}, // events:  keyup, stop
        data = [], // [{type:String, keyCode: INT, letter: CHAR, absoluteMs: INT, lastMs: INT, specialKeys: {}},...],
        specialKeys = {
            shift: false,
            ctrl: false,
            cursorUp: false,
            cursorDown: false,
            cursorLeft: false,
            cursorRight: false,
            backspace: false,
            enter: false,
            pageUp: false,
            pageDown: false,
            home: false,
            end: false,
        };//,
        //dataKeys
        
    
    this.addEventListener = function(type, listener) {
        if (events && typeof listener === "function") {
            events[type] = listener;
        }
    }
    
    /*var beginObserver = function(ev) {        
        if (isRunning) {
            
            var isDown = false;
            if (ev.type == "keydown" || ev.type == "keyup") {
                if (ev.type == "keydown") {
                    isDown = true;
                } else if (ev.type == "keyup") {
                    isDown = false;
                } 
                specialKeys.shift = ev.shiftKey;                 
                if (ev.keyCode == KeyboardCode.ctrl) { specialKeys.ctrl = isDown; }
                if (ev.keyCode == KeyboardCode.cursorUp) { specialKeys.cursorUp = isDown; }
                if (ev.keyCode == KeyboardCode.cursorDown) { specialKeys.cursorDown = isDown; }
                if (ev.keyCode == KeyboardCode.cursorLeft) { specialKeys.cursorLeft = isDown; }
                if (ev.keyCode == KeyboardCode.cursorRight) { specialKeys.cursorRight = isDown; }
                if (ev.keyCode == KeyboardCode.backspace) { specialKeys.backspace = isDown; }
                if (ev.keyCode == KeyboardCode.enter) { specialKeys.enter = isDown; }
                if (ev.keyCode == KeyboardCode.pageUp) { specialKeys.pageUp = isDown; }
                if (ev.keyCode == KeyboardCode.pageDown) { specialKeys.pageDown = isDown; }
                if (ev.keyCode == KeyboardCode.home) { specialKeys.home = isDown; }
                if (ev.keyCode == KeyboardCode.end) { specialKeys.end = isDown; }
            } 
            
            nowDateMs = (new Date()).getTime();
            var dataKey = {
                type: ev.type,
                keyCode: ev.keyCode,
                letter: String.fromCharCode(ev.keyCode),
                absoluteMs: that.diffTimeMs(),
                lastMs: that.diffTimeMsFromLast(),
                specialKeys: $.extend(true,{},specialKeys)
            }                         
            data.push(dataKey);
            debug(dataKey);        
        }
        if (events && events.keyup && typeof events.keyup === "function") {
            events.keyup(dataKey, data);
        }
    }*/
    
    this.addKey = function(change) { // {change} - object from codeMirror
        if (isRunning) {
            nowDateMs = (new Date()).getTime();
            var keyData = {
                type: "change",
                change: change,
                absoluteMs: that.diffTimeMs(),
                lastMs: that.diffTimeMsFromLast(),
            };
            data.push(keyData);
            debug(keyData);
        }
    }    
    
    this.addSelection = function(selection) {
        if (isRunning) {
            nowDateMs = (new Date()).getTime();
            var selectionData = {
                type: "selection",
                selection: selection,
                absoluteMs: that.diffTimeMs(),
                lastMs: that.diffTimeMsFromLast(),
            };
            data.push(selectionData);
            debug(selectionData);
        }
    }

    this.addCursorPosition = function(cursorData) { // {pos: {line, ch}, tabData: {name, typeCode writingEnd}}
        if (isRunning) {
            nowDateMs = (new Date()).getTime();
            var cursorData = {
                type: "cursor",
                pos: cursorData.pos,
                tabData: cursorData.tabData,
                absoluteMs: that.diffTimeMs(),
                lastMs: that.diffTimeMsFromLast(),
            };
            data.push(cursorData);
            debug(cursorData);
        }
    }

    this.addChangeTab = function(tabData) { 
        if (isRunning) {
            nowDateMs = (new Date()).getTime();
            var tabData = {
                type: "changetab",
                tabData: tabData,   // {name, typeCode, withoutCursor}
                absoluteMs: that.diffTimeMs(),
                lastMs: that.diffTimeMsFromLast(),
            };
            data.push(tabData);
            debug(tabData);
        }
    }

    this.diffTimeMs = function() {
        return (nowDateMs - startDateMs);  
    }

    this.diffTimeMsFromLast = function() {
        var absoluteNow = that.diffTimeMs(); 
        var lastMs = (data.length > 0)?(absoluteNow - data[data.length-1].absoluteMs):absoluteNow;
        return lastMs;  
    }
    
    this.removeTimeLastMsToFirstKey = function() {
        //data = [], // [{type:String, keyCode: INT, letter: CHAR, absoluteMs: INT, lastMs: INT, specialKeys: {}},...],
        //var //indexFind = -1,
        //    diffMs = 0;
        for(var i=0; i < data.length; i++) {
            data[i].lastMs = 1; // everyting event to first key press set to 1ms
            if (data[i].type == "change" || data[i].type == "keypress" || data[i].type == "keyup" || data[i].type == "keydown") {
                return;
            }
        }
    }
    
    this.run = function() {    
        if (!isRunning) {
            startDateMs = (new Date()).getTime();
            
            //keyup|keydown (all keys) // keypress            
            //$(document).bind("keypress.recordObserver", beginObserver);
            //$(document).bind("keyup.recordObserver", beginObserver);
            //$(document).bind("keydown.recordObserver", beginObserver);
            isRunning = true;        
        }
    }     
    
    this.stop = function() {
        //$(document).unbind("keypress.recordObserver", beginObserver);
        //$(document).unbind("keyup.recordObserver", beginObserver);
        //$(document).unbind("keydown.recordObserver", beginObserver);
        isRunning = false;
        
        if (events && events.stop && typeof events.stop === "function") {
            events.stop(data);
        }
    }
    
        /*
         * var press = jQuery.Event("keypress");
            press.ctrlKey = false;
            press.which = 40;
             ... any other event properties ...
            $("whatever").trigger(press);
         */
    
    this.reset = function() {
        that.stop();
        data = [];
    }    
    
    this.getData = function() {
        return data;
    }
    
    this.isRecording = function() {
        return isRunning;
    }
    
    var debug = function(data) {
        if (isDebug) {
            console.log(JSON.stringify(data));
        }
    }
    
    
}

/*
 *   textBox.value = String.fromCharCode(charCode);
     if (charCode == 8) textBox.value = "backspace"; //  backspace
     if (charCode == 9) textBox.value = "tab"; //  tab
     if (charCode == 13) textBox.value = "enter"; //  enter
     if (charCode == 16) textBox.value = "shift"; //  shift
     if (charCode == 17) textBox.value = "ctrl"; //  ctrl
     if (charCode == 18) textBox.value = "alt"; //  alt
     if (charCode == 19) textBox.value = "pause/break"; //  pause/break
     if (charCode == 20) textBox.value = "caps lock"; //  caps lock
     if (charCode == 27) textBox.value = "escape"; //  escape
     if (charCode == 33) textBox.value = "page up"; // page up, to avoid displaying alternate character and confusing people             
     if (charCode == 34) textBox.value = "page down"; // page down
     if (charCode == 35) textBox.value = "end"; // end
     if (charCode == 36) textBox.value = "home"; // home
     if (charCode == 37) textBox.value = "left arrow"; // left arrow
     if (charCode == 38) textBox.value = "up arrow"; // up arrow
     if (charCode == 39) textBox.value = "right arrow"; // right arrow
     if (charCode == 40) textBox.value = "down arrow"; // down arrow
     if (charCode == 45) textBox.value = "insert"; // insert
     if (charCode == 46) textBox.value = "delete"; // delete
     if (charCode == 91) textBox.value = "left window"; // left window
     if (charCode == 92) textBox.value = "right window"; // right window
     if (charCode == 93) textBox.value = "select key"; // select key
     if (charCode == 96) textBox.value = "numpad 0"; // numpad 0
     if (charCode == 97) textBox.value = "numpad 1"; // numpad 1
     if (charCode == 98) textBox.value = "numpad 2"; // numpad 2
     if (charCode == 99) textBox.value = "numpad 3"; // numpad 3
     if (charCode == 100) textBox.value = "numpad 4"; // numpad 4
     if (charCode == 101) textBox.value = "numpad 5"; // numpad 5
     if (charCode == 102) textBox.value = "numpad 6"; // numpad 6
     if (charCode == 103) textBox.value = "numpad 7"; // numpad 7
     if (charCode == 104) textBox.value = "numpad 8"; // numpad 8
     if (charCode == 105) textBox.value = "numpad 9"; // numpad 9
     if (charCode == 106) textBox.value = "multiply"; // multiply
     if (charCode == 107) textBox.value = "add"; // add
     if (charCode == 109) textBox.value = "subtract"; // subtract
     if (charCode == 110) textBox.value = "decimal point"; // decimal point
     if (charCode == 111) textBox.value = "divide"; // divide
     if (charCode == 112) textBox.value = "F1"; // F1
     if (charCode == 113) textBox.value = "F2"; // F2
     if (charCode == 114) textBox.value = "F3"; // F3
     if (charCode == 115) textBox.value = "F4"; // F4
     if (charCode == 116) textBox.value = "F5"; // F5
     if (charCode == 117) textBox.value = "F6"; // F6
     if (charCode == 118) textBox.value = "F7"; // F7
     if (charCode == 119) textBox.value = "F8"; // F8
     if (charCode == 120) textBox.value = "F9"; // F9
     if (charCode == 121) textBox.value = "F10"; // F10
     if (charCode == 122) textBox.value = "F11"; // F11
     if (charCode == 123) textBox.value = "F12"; // F12
     if (charCode == 144) textBox.value = "num lock"; // num lock
     if (charCode == 145) textBox.value = "scroll lock"; // scroll lock
     if (charCode == 186) textBox.value = ";"; // semi-colon
     if (charCode == 187) textBox.value = "="; // equal-sign
     if (charCode == 188) textBox.value = ","; // comma
     if (charCode == 189) textBox.value = "-"; // dash
     if (charCode == 190) textBox.value = "."; // period
     if (charCode == 191) textBox.value = "/"; // forward slash
     if (charCode == 192) textBox.value = "`"; // grave accent
     if (charCode == 219) textBox.value = "["; // open bracket
     if (charCode == 220) textBox.value = "\\"; // back slash
     if (charCode == 221) textBox.value = "]"; // close bracket
     if (charCode == 222) textBox.value = "'"; // single quote
 */
////////////////////
// AUTOWRITING

function AutowritingCodeMirror(options) {  //   codeMirror, text, typeWriting, dataKeys
    var that = this,
        autowriting = new Autowriting({
            text: (options && options.text)?options.text:"",
            typeWriting: options.typeWriting,
            dataKeys:  options.dataKeys,
            events: options.events
        }),
        codeMirror = (options && options.codeMirror)?options.codeMirror:null,
        codeEditor = (options && options.codeEditor)?options.codeEditor:null,
        posCursor = {line: 0, ch: 0},
        prevPosCursor = {line: 0, ch: 0},
        isSelection = false,
        selectionCursorStart = null,
        tabDataAll = null,
        isDebug = true,
        tabDataEndWriting = [];   //  [{tabData: {name:STRING, typeCode: STRING}, lineStart: INT, countLineEditor:INT}, {...}]
        //selectionCursorEnd = null;
    
    if (!options || !options.codeEditor) {
        alert("AutowritingCodeMirror: code editor is null");
        return that;
    }
    
    // pos = {line, ch}
    this.setCursorByCodeMirror = function(pos) { 
        if (codeMirror) {
            codeMirror.setCursor(pos);
            codeMirror.focus();
        } 
    }
    
    // pos = {line, ch}
    this.setCursorByRecord = function(pos) { 
        prevPosCursor = posCursor;
        posCursor = pos;
    } 
    
    
    this.drawAtEnd = function() {
    }
    
    var tryAddNewDataEndWriting = function(posCursor, tabData) {
        for(var i=0; i < tabDataEndWriting.length; i++) {
            var singleData = tabDataEndWriting[i];
            if (singleData.tabData.name == tabData.name && singleData.tabData.typeCode == tabData.typeCode &&
                tabData.writingEnd ) {
                return false;
            }
        }
        if (codeMirror && tabData && tabData.writingEnd) {
            
            var indexLastLine = codeMirror.lastLine();
            var lengthLastLine = codeMirror.getLine(codeMirror.lastLine()).length;
            if (lengthLastLine > 0) {
                var tmpPos = {line: indexLastLine, ch: lengthLastLine};
                codeMirror.replaceRange("\n", tmpPos, tmpPos);
            }
            
            tabDataEndWriting.push({
                tabData: {
                    name: tabData.name,
                    typeCode: tabData.typeCode,
                },
                lineStart:   posCursor.line,
                countLineEditor: codeMirror.lastLine(),
                offsetLine: (codeMirror.lastLine() - posCursor.line)
            });
            return true;
        }
    }
    
    var getOffsetActiveTab = function(tabData) {
        for(var i=0; i < tabDataEndWriting.length; i++) {
            var singleData = tabDataEndWriting[i];
            if (singleData.tabData.name == tabData.name && singleData.tabData.typeCode == tabData.typeCode) {
                return singleData.offsetLine;
            }
        }
        return 0;
    }
    
    var backCursorToBack = function(newCursor) {
       newCursor.ch--;
       if (newCursor.ch < 0) {
          newCursor.line--;
          if (newCursor.line < 0) {
              newCursor.line = 0;
              newCursor.ch = 0;
          } else {
              var line = codeMirror.getLine(newCursor.line);
              newCursor.ch = line.length;
          }
       }
       return newCursor;
    }
    
    this.run = function() {
        
        var offsetLineEndWriting = 0;
        
        autowriting.addEventListener("next_char", function(dataKey){
           var newCursor = {};
           $.extend(newCursor, posCursor);
           //var isSelection = false;           
                  
           //that.setCursorCodeMirror();
                 
           if (dataKey.type == "changetab") {
               
               var tabData = dataKey.tabData;
               codeEditor.addTab(tabData.name, tabData.typeCode, true);
               codeEditor.setBlockedClosedForAllFile(false);
               codeEditor.setBlockedClosedForFile(tabData.name+"."+tabData.typeCode,true);
               
               tabDataAll = codeEditor.findObjectOfTabsData([{search:"name", value:tabData.name},{search:"typeCode", value:tabData.typeCode}]);                                                         
               if (tabDataAll && tabDataAll.codeMirror) {               
                   codeMirror = tabDataAll.codeMirror;
                    //tryAddNewDataEndWriting({line: tabDataAll.codeMirror.lastLine() }, tabDataAll);
                    //offsetLineEndWriting = getOffsetActiveTab(tabDataAll);               
                   if (tabData.withoutCursor) {
                       codeEditor.addTab(tabData.name, tabData.typeCode);
                       codeMirror = tabDataAll.codeMirror;
                   } else { // animation of cursor 
                       
                        var tabDataActiveTab = codeEditor.getTabDataByTabIndex(codeEditor.getActiveTab());
                         // the same tab was opened so doesnt switch tab 
                        if (tabDataActiveTab && tabDataActiveTab == tabDataAll && tabDataActiveTab.codeMirror) {   
                            codeEditor.addTab(tabData.name, tabData.typeCode);
                            codeMirror = tabDataAll.codeMirror;
                        } else {                            
                           
                           // pause & animation switch tab
                            
                           autowriting.pause(); // pause writing before animation                       
                           
                           var leftTab = parseInt(tabDataAll.tab.offset().left.toFixed(0))+50;
                               topTab = parseInt(tabDataAll.tab.offset().top.toFixed(0))+20,
                               editorCursor = $("#editor_cursor"),
                               initialTop = parseInt(topTab)+80,
                               initialLeft = parseInt(leftTab);
        
                           editorCursor.css({"display": "block", "left": initialLeft+"px", "top": initialTop+"px"});
                           editorCursor.animate({
                               left: leftTab+"px",
                               top: topTab+"px",
                           }, 1200, "linear", function() {
                               
                              var $editorClick = $("#editor_click"); 
                              $editorClick.css({"display": "block", "left":(leftTab-20)+"px", "top": (topTab-20)+"px"});
    
                              tabDataAll.tab.effect( "highlight", {}, 400, function () {    
                                  setTimeout(function() {
                                    $( "#effect" ).removeAttr( "style" ).hide().fadeIn();
                                  }, 400 );
                                  $editorClick.css({"display": "none"});
                                  editorCursor.css({"display": "none"});
                                  codeEditor.addTab(tabData.name, tabData.typeCode);
                                  autowriting.run();
                               });
                           });
                       }
                   }
               }
           } else if (dataKey.type == "cursor") {
               newCursor = dataKey.pos;               
                  tryAddNewDataEndWriting(dataKey.pos, dataKey.tabData); 
                  offsetLineEndWriting = getOffsetActiveTab(dataKey.tabData);
               newCursor.line += offsetLineEndWriting;
               //that.setCursor(newCursor);
               
               that.setCursorByRecord(newCursor);
               //that.setCursorByCodeMirror(newCursor);
               
               debug(newCursor);
           } else if (dataKey.type == "keydown" || dataKey.type == "keyup") {
               if (dataKey.keyCode == KeyboardCode.shift) { 
                   if (dataKey.type == "keydown") { // isSelection
                       selectionCursorStart = newCursor;
                       isSelection = true;
                   } else if (dataKey.type == "keyup") {                       
                   } // isSelection
                   //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.shift && dataKey.type == "keyup") {
                   //isSelection = true;                    
               } else if (dataKey.keyCode == KeyboardCode.cursorUp) {
                   if (dataKey.type == "keydown") { 
                       //newCursor.line--;
                   }
                   //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.cursorDown) {
                   if (dataKey.type == "keydown") {
                       //newCursor.line++;
                   }
                   //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.cursorLeft) {
                   if (dataKey.type == "keydown") {
                       //newCursor = backCursorToBack(newCursor);
                   }
                   //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.cursorRight) {
                   if (dataKey.type == "keydown") { 
                      //newCursor.ch++;
                   }
                   //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.backspace && dataKey.type == "keydown") {                   
                   //newCursor = backCursorToBack(newCursor);
                   codeMirror.replaceRange("", posCursor, prevPosCursor); 
               } else if (dataKey.keyCode == KeyboardCode.enter && dataKey.type == "keydown") {
                  //codeMirror.setCursor(prevPosCursor);
                  codeMirror.replaceRange("\n", prevPosCursor, prevPosCursor);
                  //newCursor.line++;
                  //newCursor.ch = 0;
               } else if (dataKey.keyCode == KeyboardCode.home) {
                  if (dataKey.type == "keydown") {
                  //    newCursor.ch = 0;
                  }
                  //isSelection = true;
               } else if (dataKey.keyCode == KeyboardCode.end) {
                  if (dataKey.type == "keydown") {
                  //    newCursor.ch = codeMirror.getLine(newCursor.line).length;
                  }
                  //isSelection = true;
               } else {
                   isSelection = false;
               }
               
           } else if (dataKey.type == "keypress" && codeMirror){
               codeMirror.replaceRange(dataKey.letter, newCursor, newCursor);
               debug(dataKey.letter);
               //newCursor.ch++;
           } else if (dataKey.type == "selection" && codeMirror && 
               dataKey.selection.anchor &&  // && dataKey.selection.anchor.xRel != undefined
               dataKey.selection.head){  //  && dataKey.selection.head.xRel != undefined
               
               if (offsetLineEndWriting) {
                   dataKey.selection.anchor.line += offsetLineEndWriting;    
                   dataKey.selection.head.line += offsetLineEndWriting;
               }    
               if (dataKey.selection.anchor.line == dataKey.selection.head.line && dataKey.selection.anchor.ch == dataKey.selection.head.ch) {
                   //codeMirror.setCursor(dataKey.selection.anchor);
                   that.setCursorByCodeMirror(newCursor);
               } else {
                   codeMirror.setSelection(dataKey.selection.anchor, dataKey.selection.head);
               }
               
               codeMirror.focus();
               debug(dataKey.selection);
               //newCursor.ch++;
           } else if (dataKey.type == "change" && codeMirror){
               var string = dataKey.change.text.join("\n");
               
               if (offsetLineEndWriting) {
                   dataKey.change.from.line += offsetLineEndWriting;
                   dataKey.change.to.line += offsetLineEndWriting;
               }
                            
               codeMirror.replaceRange(string, dataKey.change.from, dataKey.change.to); 
               //that.setCursorByCodeMirror(newCursor);
               
               debug(string);
               //newCursor.ch++;
           }           
           
           /*if (isSelection) {
               if (selectionCursorStart) {
                   codeMirror.setSelection(selectionCursorStart, newCursor);
               }             
           } else {
               selectionCursorStart = null;
           }*/        
           
           /* actual if (codeMirror && isSelection && selectionCursorStart) {
               codeMirror.setSelection(selectionCursorStart, newCursor);
           }*/
           
           
        });
        autowriting.run();
    }   
    
    this.stop = function() {
        // interrupt animation
        var $editorCursor = $("#editor_cursor"),
            $editorClick = $("#editor_click"); 
        if ($editorCursor) {
            $editorCursor.stop();
            $editorCursor.css({"display": "none"});
        }
        if ($editorClick) {
            $editorClick.css({"display": "none"});
        }
        if (tabDataAll && tabDataAll.tab) {
            tabDataAll.tab.stop();
        }
        autowriting.stop();        
    }    
    
    this.setEqualInterval = function() {
        autowriting.setEqualInterval();
    }     
    
    var debug = function(data) {
        if (isDebug) {
            console.log(data);
        }
    }    
}

function Autowriting(options) {
    var that = this,
        typeWriting = (options && options.typeWriting)?options.typeWriting:"text", // "text"|"keys"
        textToWriting = (options && options.text)?options.text:"",
        indexText = 0,
        countText = textToWriting.length,
        speed = (options && options.speed)?options.speed:100,  //ms
        timer = undefined,
        isRunning = false,
        events = (options && options.events)?options.events:{},  // events: "next_char"&"run"&"stop"&"pause"
        indexData = 0,
        dataKeys = (options && options.dataKeys)?options.dataKeys:[];
    
    this.addEventListener = function(type, listener) {
        if (events && typeof listener === "function") {
            events[type] = listener;
        }
    }
    
    this.setText = function(text) {
        textToWriting = text;
        countText = textToWriting.length;
    }
    
    this.setSpeed = function(_speed) {
        speed = _speed;
        if (isRunning) {
            this.run();
        }
    }
    
    this.setEqualInterval = function() {
        var data = dataKeys[i],
            sumAbsoluteMs = 0,
            sumLastMs = 0,
            singleAbsoluteMs = 0,
            singleLastMs = 0;
        if (dataKeys.length > 0) {
            for(var i=0; i < dataKeys.length; i++) {
                data = dataKeys[i];
                if (typeof data["absoluteMs"] !== "undefined" && typeof data["lastMs"] !== "undefined") {
                    sumAbsoluteMs += data.absoluteMs;
                    sumLastMs += data.lastMs;
                }
            }
            singleAbsoluteMs = sumAbsoluteMs / dataKeys.length;
            singleLastMs = sumLastMs / dataKeys.length;
            
            for(var i=0; i < dataKeys.length; i++) {
                dataKeys[i].absoluteMs = singleAbsoluteMs;
                dataKeys[i].lastMs = singleLastMs;
            }
        }
    }
    
    this.run = function() {
        
        if (typeWriting == "text") {        
            clearInterval(timer);
            
            timer = setInterval(function() {
                isRunning = true;
                
                if (indexText < countText) {
                    if (events && events.next_char && typeof events.next_char === "function") {
                        events.next_char(textToWriting[indexText]);
                    }                
                } else {
                    that.stop();
                }
                indexText++;
            }, speed);
        } else if (typeWriting == "keys") {
            if (indexData < dataKeys.length) {
                nextKey();
            }
        }
        // events
        if (typeWriting == "text" || typeWriting == "keys") {
            if (events && events.run && typeof events.run === "function") {
                events.run();
            }                        
        }        
    }
    
    var nextKey = function() {
        clearTimeout(timer);
        timer = setTimeout(function() {
            isRunning = true;
            if (indexData < dataKeys.length) {
                if (events && events.next_char && typeof events.next_char === "function") {
                    events.next_char(dataKeys[indexData]);
                }  
                indexData++;
                if (indexData >= dataKeys.length) {
                    that.stop();
                    return;
                }
                if (!isRunning) {
                    return;
                } 
                nextKey();        
            }          
        }, dataKeys[indexData].lastMs); 
    }
    
    var clearTimers = function() {
        if (typeWriting == "text") { 
            clearInterval(timer);
        } else if (typeWriting == "keys") { 
            clearTimeout(timer);
        }        
        isRunning = false; 
    }
    
    this.pause = function() {
        clearTimers();
        if (events && events.pause && typeof events.pause === "function") {
            events.pause();
        }
    }    
    
    this.stop = function() {
        clearTimers();
        indexText = 0; 
        indexData = 0;     
        if (events && events.stop && typeof events.stop === "function") {
            events.stop();
        }                   
    }
   
}



function BrowserEmulator() {
    this.SOURCE_OPEN_EDITOR = "editor";
    this.SOURCE_OPEN_CODE_EDITOR = "code_editor";
    var that = this,
        tempObjects = [];
        consoleCM = null; // instance of CodeMirror
        //isConsoleAuto = true;        
        
    this.dialogs = new BrowserEmulatorDialogs();    
    this.items = new BrowserEmulatorItems();
	
    this.idEmuBoard = "emulator_board";
    this.idEmuConsole = "emulator_console";
	
    //this.idEmuBackground = "emulator_background";
    //this.idEmuSurface = "emulator_canvas_surface";
    this.idBack = "emulator_back";    
    this.idBackToCode = "emulator_back_to_code";
    this.idBackToAppList = "emulator_back_to_app_list";
    this.sounds = new Array(); 
	this.currentBoard = null;	
    var displayEmulator = false;
    this.sourceOpen = that.SOURCE_OPEN_EDITOR;  
    this.waitForUser = false;
    this.consoleReadVariable = null;
    this.consoleLastCommandUser = "";
    this.consoleCurrentCommandUser = "";   // command during writing
    this.consoleCurrentCommandUserConfirmed = ""; // command is confirm
    this.isRunning = false;
    this.isDebugger = false;
    this.isNextStep = false;
    this.isAutoNextStep = false;
    this.debugCanCreateNewLine = false;
    this.debugInterrupt = false;
    
             
    this.dialogs.createDialogs();
    
    /*qCanvasSurface = $("#"+this.idEmuSurface);
    qCanvasSurface.css({"width": canvas.IPAD_RESOLUTION_X+"px", "height": canvas.IPAD_RESOLUTION_Y+"px"});
    qCanvasSurface[0].width = canvas.IPAD_RESOLUTION_X;
    qCanvasSurface[0].height = canvas.IPAD_RESOLUTION_Y;*/
   
    this.backToPrevScreen = function() {
       that.clear();  
       that.isRunning = false;
       codeEditor.stopDebugger();
       
       if (that.sourceOpen == that.SOURCE_OPEN_EDITOR) {
           that.backToEditor();
       } else if (that.sourceOpen == that.SOURCE_OPEN_CODE_EDITOR) {
           that.backToCodeEditor();
       }
       $(document).scrollTop( 1 );
    }
   
    $("#"+that.idBack).click(function(){       
       var isFind = false;
       EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
       //sequencesSystem.bubbles.refreshTip();
       that.backToPrevScreen();
       codeEditor.clearConsole();
    });    
    $("#"+that.idBackToCode).click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
        that.clear();
        that.backToCodeEditor();
        codeEditor.clearConsole();
    });     
    $("#"+that.idBackToAppList).click(function(){
       var isFind = false;
       EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}        
       that.clear();
       window.location.assign("/gamedesigner/select/app/");
    });      
    

    /*$("#emulator_next_step").click(function(){
        browserEmulator.isNextStep = true;
    });*/
    
    this.backToEditor = function() {
        $("#editor").css({"display": "block"});
        browserEmulator.displayEmulator(false); 
        stopMp3();
        codeEditor.closeEditor();        
    }
    
    this.backToCodeEditor = function() {
       $("#editor").css({"display": "block"});
       browserEmulator.displayEmulator(false);
       stopMp3(); 
       codeEditor.openEditor();
    }
    
    this.displayEmulator = function(openEmu) {
        displayEmulator = openEmu;
        if (displayEmulator) {
            $("#emulator").css("display","block");
        } else {
            $("#emulator").css("display","none");
        }            
    }
    
    this.isDisplayEmulator = function() {
        return displayEmulator;
    }
    
    this.clearBoards = function() {
		$("#"+this.idEmuBoard).html("");
    }
	
    this.clearBackground = function() {
		if (this.currentBoard) {
			$(this.currentBoard.emuDOM).html("");
		}
    }
    
    this.addConsole = function() {        
        var textAreaElement = document.createElement("textarea");
        textAreaElement.id = this.idEmuConsole;
        $("#"+this.idEmuBoard).append(textAreaElement);        
       
        consoleCM = CodeMirror.fromTextArea(document.getElementById(this.idEmuConsole), {
            lineNumbers: false,
            //styleActiveLine: true,
            mode:  "", //"javascript",
            //matchBrackets: true,
            //continueComments: "Enter",
            //extraKeys: {"Ctrl-Q": "toggleComment"},
            smartIndent: false,
            indentUnit: 0,
            indentWithTabs: false,
            tabSize: 0,
            /*extraKeys: {
              "F11": function(cm) {
                cm.setOption("fullScreen", !cm.getOption("fullScreen"));
              },
              "Esc": function(cm) {
                if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
              }
            } */           
            //viewportMargin: 25,
            //cursorScrollMargin: 5,
        });

        consoleCM.setSize("100%", "100%");
        consoleCM.on("beforeChange", function(cm, changeObj) {       
            
            var stringLastLine = cm.getLine(cm.lastLine());                         
            if (changeObj.from.line < cm.lastLine()) {  // !isConsoleAuto || 
                changeObj.cancel();
            } else {
                // text is array . length == 2 if enter
                if (changeObj.text.length == 2 && changeObj.text.join("") == "") {
                    browserEmulator.consoleLastCommandUser = stringLastLine;
                }
            }
            var countLetters = stringLastLine.length;
            cm.setCursor({line: cm.lastLine(), ch: countLetters });
        });                   
        
        consoleCM.on("keypress", function(cm, ev) {
            
        });           
        
        that.hideConsole();
    }
    
    this.showConsole = function() {  
        //if (!consoleCM) {
            that.addConsole();
        //}      
        if (consoleCM) {
            $(consoleCM.getWrapperElement()).css("display", "block");
            $(this.currentBoard.emuDOM).css("display", "none");
            $(this.currentBoard.emuCanvasDOM).css("display", "none");
        }
    }

    this.hideConsole = function() {
        if (consoleCM) {
            $(consoleCM.getWrapperElement()).css("display", "none");
            $(this.currentBoard.emuDOM).css("display", "block");
            $(this.currentBoard.emuCanvasDOM).css("display", "block");
        }
    }
    
    this.consoleLogAddText = function(text) { // append text to console
        var cm = consoleCM;
        if (cm) {
            var lastLineIndex = cm.lastLine(),
                lastLine = { line: lastLineIndex, ch: 0 },
                newLastLine = {};
            
            //isConsoleAuto = true;
    
            cm.replaceRange(text+"\n", lastLine, lastLine);
            newLastLine = { line: cm.lastLine(), ch: 0 }; 
            cm.markText({line:0, ch:0}, newLastLine, {readOnly: true} );
            
            cm.refresh();
            cm.focus();
        }
    }
    
    
    
    
    this.refreshConsole = function() {
        if (consoleCM) {
            consoleCM.refresh();
            consoleCM.focus();
        }
    } 

    this.clear = function() {
        this.clearContextSurface();   
        this.clearBoards();
        this.waitForUser = false;
        this.consoleReadVariable = null;
        this.consoleLastCommandUser = "";   
        this.consoleCurrentCommandUser = ""; 
        $(document).unbind("keypress.emulator", observerKeyboardEmulator);
    }

    this.getContextSurface = function() {
		if (this.currentBoard) {
			var qCanvasSurface = $(this.currentBoard.emuCanvasDOM);
			if (qCanvasSurface) {  
				var ctx = qCanvasSurface[0].getContext("2d");                
				return ctx;
			}
		}
    }
    this.clearContextSurface = function() {   
		if (this.currentBoard) {
			var qCanvasSurface = $(this.currentBoard.emuCanvasDOM);	
			if (qCanvasSurface) {
				var elemCanvas = qCanvasSurface[0];
				if (elemCanvas) {
    				var ctx = elemCanvas.getContext("2d");                
    				ctx.clearRect(0, 0, qCanvasSurface[0].width, qCanvasSurface[0].height);
				}
			}
		}
    }    
    
    this.setBoard = function(boardObj) {
        this.currectBoard = boardObj;
    }
        
    this.displayBoard = function(boardObj) {
        if (boardObj) {  
			if(this.currentBoard) {
				$(this.currentBoard.emuDOM).css({"display":"none"});
				$(this.currentBoard.emuCanvasDOM).css({"display":"none"});
			}
			$(boardObj.emuDOM).css({"display":"block"});
			$(boardObj.emuCanvasDOM).css({"display":"block"});
			this.currentBoard = boardObj;

            var res = canvas.getResolution();
            $("#"+that.idEmuBoard).css({"width":""+res.x+"px", "height": ""+res.y+"px"});

            if (boardObj.background && boardObj.background != "") {
                $(boardObj.emuDOM).css({ "background-image":"url('/gamedesigner/media/upload/"+appId+"/img/"+boardObj.background+"')", "width":"100%", "height": "100%", "background-repeat": "no-repeat"  });
            } else {
                $(boardObj.emuDOM).css({ "background-image":"none", "width":""+res.x+"px", "height": ""+res.y+"px"  });
            }
            
            if (boardObj.sound && boardObj.sound != "-") {
                stopMp3();
                playMp3(boardObj.sound);
            }
            
            if (boardObj.panelItems != undefined) {
                this.items.displayPanel(boardObj.panelItems);
            }                                  
        }
    }
    
    this.setObject = function(option, object, options) {
        //if (object.type == ELEMENT_TYPE_CLICKABLE_AREA) {
            if (option == "option" && object && object.emuId && options) {             
                if (options.x != undefined) {
                    $("#"+object.emuId).css({"left": options.x});  
                }
                if (options.y != undefined) {
                    $("#"+object.emuId).css({"top": options.y});  
                }            
                if (options.width != undefined) {
                    $("#"+object.emuId).css({"width": object.width});  
                }            
                if (options.height != undefined) {
                    $("#"+object.emuId).css({"height": object.height});  
                }       
                if (options.image != undefined) {
                    $("#"+object.emuId).css({
                        "background": "url('/gamedesigner/media/upload/"+appId+"/img/"+options.image+"')",
                        "background-size": "100% 100%",
                        "background-repeat": "no-repeat",
                    });  
                }  
                if (options.background != undefined) {
                    if (options.background != "") {
                        $("#"+object.emuId).css({
                            "background": "url('/gamedesigner/media/upload/"+appId+"/img/"+options.background+"')",
                            "background-size": "100% 100%",
                            "background-repeat": "no-repeat",
                        });  
                    } else {
                        $("#"+object.emuId).css({
                            "background": "url('/gamedesigner/media/img/btn_bg_vert.png')",
                            "background-size": "100% 100%",
                            "background-repeat": "no-repeat",
                        });                         
                    }
                }  
                if (options.text != undefined) {
                    var text = Convert.br2nl(options.text);
                    text = specialCharsToHtml(text);                    
                    $("#"+object.emuId).text(text);
                    $("#"+object.emuId).val(text);
                }  
                if (options.textColor != undefined) {
                    var hex = (new Color).myRgbToHex(options.textColor);
                    $("#"+object.emuId).css({"color": hex});
                }                                                     
                if (options.fontSize != undefined) {
                    $("#"+object.emuId).css({"fontSize": options.fontSize+"px"});
                }     
                if (options.fontType != undefined) {
                    $("#"+object.emuId).css({"fontFamily": options.fontType});
                } 
                if (options.visibility != undefined) {
                    //object.visible = options.visibility;
                    $("#"+object.emuId).css({"visibility": (options.visibility)?"visible":"hidden"});  
                }            
            }
       //}
    }           
    
    this.displayObjects = function(objects) {   
        for(var i=0; i < objects.length; i++) {            
            var object = objects[i];
            if (object.type == ELEMENT_TYPE_CLICKABLE_AREA) {
                var emu_div = "<div id='"+object.emuId+"'></div>"; 
                
                if (object.parent && object.parent.emuDOM) {                       
                    $(object.parent.emuDOM).append(emu_div);
                    
                    $("#"+object.emuId).css({ 
                        "position": "absolute",
                        //"pointer-events": "none"
                    });
                    this.setObject("option", object, {x: object.x});
                    this.setObject("option", object, {y: object.y});
                    this.setObject("option", object, {width: object.width});
                    this.setObject("option", object, {height: object.height});
                    this.setObject("option", object, {image: object.image});
                    this.setObject("option", object, {visibility: object.visible});
                }
            }
            if (object.type == ELEMENT_TYPE_TEXT || object.type == ELEMENT_TYPE_TEXTEDIT ||
                object.type == ELEMENT_TYPE_BUTTON) {                                    
                
                var emu_div = "<textarea id='"+object.emuId+"' />";

                if (object.parent && object.parent.emuDOM) {                 
    				$(object.parent.emuDOM).append(emu_div);
    
                    if (object.type == ELEMENT_TYPE_TEXT) {
                        $("#"+object.emuId).attr('readonly', true);
                        $("#"+object.emuId).css({"background":"transparent", "border":"0px solid #000"});
                    }
                    if (object.type == ELEMENT_TYPE_TEXTEDIT) {
                        $("#"+object.emuId).css({"border":"1px solid #aaa"});
                    }
                    if (object.type == ELEMENT_TYPE_BUTTON) {
                        $("#"+object.emuId).attr('readonly', true);
                        $("#"+object.emuId).css({
                            "background":"transparent", 
                            "border":"1px solid #aaaaaa", 
                            "background-color":"#ffffff", 
                            "text-align": "center",
                            "cursor": "pointer"
                        });
                        $("#"+object.emuId).corner();
                    }                    
                    $("#"+object.emuId).css({ 
                        "position": "absolute",    
                        //"pointer-events": "none"
                    });
                         
                    this.setObject("option", object, {x: object.x});
                    this.setObject("option", object, {y: object.y});
                    this.setObject("option", object, {width: object.width});
                    this.setObject("option", object, {height: object.height});
                    this.setObject("option", object, {visibility: object.visible});
                    this.setObject("option", object, {text: object.text});
                    this.setObject("option", object, {textColor: object.textColor});
                    this.setObject("option", object, {fontSize: object.fontSize});
                    this.setObject("option", object, {fontType: object.fontType});
                    if (object.type == ELEMENT_TYPE_BUTTON) {
                        this.setObject("option", object, {background: object.background});    
                    }
                    
                }
             }             
         }
        for(var i=0; i < objects.length; i++) {            
            var object = objects[i];
            if (object.isBoardObject) {
                object.tryAddToFront();
            }
        }

         this.setObjectsEvents(objects);
    }
    
    
    var executeChildAction = function(child) {
        //console.log(child.name);        
        if (child.type == ACTIONS_SHOW_ELEMENT && child.name) {   
            showObject(child.name);
        }
        if (child.type == ACTIONS_HIDE_ELEMENT && child.name) {   
            hideObject(child.name);
        }   
        if (child.type == ACTIONS_RUN_XML && child.name) {   
            goToBoard(child.name);                  
        }                       
        if (child.type == ACTIONS_PLAY_MP3 && child.name) {
            playMp3(child.name);
        }  
        if (child.type == ACTIONS_STOP_MP3) {
            stopMp3();   
        }                                                       
        if (child.type == ACTIONS_SHOW_IMAGE && child.pImage) {
            showImage(child.pImage);   
        }    
        if (child.type == ACTIONS_INITIATE_CONVERSATION && child.pName) {
            showConversation(child.pName);
        }             
    }
 
    this.setObjectsEvents = function(objects) {                
        for(var i=0; i < objects.length; i++) {
            var object = objects[i];
            if (object.type == ELEMENT_TYPE_CLICKABLE_AREA || object.type == ELEMENT_TYPE_BUTTON) {                  
                                                                
                $("#"+object.emuId).click(function(){
                    console.log("click "+$(this)[0].id);  
                    var obj =  Editor.objectByEmuId($(this)[0].id); 
                    
                    if (typeof obj.onclick === "function") {
                        obj.onclick(obj);
                    }
          
                    var onclick =  obj.actions.getOnclick();
                    for(var j=0; j < onclick.children.length; j++) {
                        var child = onclick.children[j];
                        executeChildAction(child);                                
                    }  
                }); 
            }
            if (object.type == ELEMENT_TYPE_TEXTEDIT) {
                $("#"+object.emuId).change(function(){
                   var id = $(this)[0].id;
                   if (id) {
                       var text = $(this).val();
                       var obj = Editor.objectByEmuId(id);
                       obj.text = text;
                   }
                    
                });
            }
        }   
        
        tempObjects = objects;
        $(document).bind("keypress.emulator", observerKeyboardEmulator);
    }
    
    function observerKeyboardEmulator(ev) {
        var objects = tempObjects;
        for(var i=0; i < objects.length; i++) {
            var object = objects[i];
            if (object.type == ELEMENT_TYPE_CLICKABLE_AREA || object.type == ELEMENT_TYPE_BUTTON) {                                                 
                var elem =  $("#"+object.emuId)[0];
                if (elem && elem.id) {                    
                    var obj =  Editor.objectByEmuId(elem.id); 
                    if (obj && obj.keydown && obj.keydownParam && typeof obj.keydown === "function" && typeof obj.keydownParam  === "string" ) { 
                        var key = obj.keydownParam;
                        if (key.length == 1) {
                            if ( ev.which == key.charCodeAt(0) ) {
                                obj.keydown(obj);       
                            }
                        }                        
                    }
                                        
                    // keyboards
                    var onclick =  obj.actions.getOnclick();
                    for(var j=0; j < onclick.children.length; j++) {
                        var child = onclick.children[j];                        
                        if (child.key && child.key.length == 1 && ev.which == child.key.charCodeAt(0)) {
                            executeChildAction(child);
                        }
                    }      
                }
                
                 
            }
        } 
    }
        
     
}

var ACTIONS_SHOW_ALERT = "show_alert";


function BrowserEmulatorDialogs() {    
    var that = this;
    this.idDialogShowImage = "emulator_dialog_show_image";    
    this.idDialogShowImageImg = "emulator_dialog_show_image_img";    
    this.idDialogInitiateConversation = "emulator_dialog_initiate_conversation";    
    this.idDialogInitiateConversationHtml = "emulator_dialog_initiate_conversation_html";    
    this.idDialogShowPopup = "emulator_dialog_show_popup";    
    this.idDialogShowPopupDescription = "emulator_dialog_show_popup_description";    
    this.idDialogShowAlert = "emulator_dialog_show_alert";    
    this.idDialogShowAlertText = "emulator_dialog_show_alert_text";    
     
    var optAlert = {}; 
     
    this.createDialogs = function() {        
        $("#"+this.idDialogShowImage).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
           // title: '<span class="title">CODE EDITOR</span>',                
            width: 600,
            height: 650, 
            buttons: {
                OK: function() { 
                    that.closeDialog(ACTIONS_SHOW_IMAGE);  
                },
            },            
            close: function( event, ui ) {             
            },
            open: function(event, ui) {                    
                $(this).siblings('div.ui-dialog-titlebar').remove();          
            },                     
        });
        
        $("#"+this.idDialogInitiateConversation).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
           // title: '<span class="title">CODE EDITOR</span>',                
            width: 600,
            height: 650, 
            buttons: {
                OK: function() { 
                    that.closeDialog(ACTIONS_INITIATE_CONVERSATION);  
                },
            },            
            close: function( event, ui ) {             
            },
            open: function(event, ui) {                    
                $(this).siblings('div.ui-dialog-titlebar').remove();          
            },                     
        });   
        
        $("#"+this.idDialogShowPopup).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
           // title: '<span class="title">CODE EDITOR</span>',                
            width: 600,
            height: 650, 
            buttons: {
                OK: function() { 
                    that.closeDialog(ACTIONS_SHOW_TPOPUP);  
                },
            },            
            close: function( event, ui ) {             
            },
            open: function(event, ui) {   
                $(this).siblings('div.ui-dialog-titlebar').remove();                 
            },                     
        }); 
           
        $("#"+this.idDialogShowAlert).dialog({
            autoOpen: false,
            resizable: false,
            modal: true,
            width: 300,
            height: 300, 
            buttons: {
                OK: function() { 
                    that.closeDialog(ACTIONS_SHOW_ALERT);
                },
            },            
            close: function( event, ui ) {   
                if (optAlert && typeof optAlert.callbackClose === "function") {
                    optAlert.callbackClose();
                }                            
            },
            open: function(event, ui) {   
                $(this).siblings('div.ui-dialog-titlebar').remove();                 
            },                     
        });                   
    }
         
    this.openDialog = function(type, options) {
        if (type == ACTIONS_SHOW_IMAGE) {
            if (options && options.image) {
                $("#"+this.idDialogShowImage).dialog("open");            
                $("#"+that.idDialogShowImageImg)[0].src = "";
                $("#"+that.idDialogShowImageImg)[0].src = options.image;
                $("#"+that.idDialogShowImageImg)[0].onload = function() {
                }
            }
        }  
        if (type == ACTIONS_INITIATE_CONVERSATION) {
             if (options && options.html) {
                $("#"+that.idDialogInitiateConversation).dialog("open");           
                $("#"+that.idDialogInitiateConversationHtml).html(options.html);
            }            
        }  
        if (type == ACTIONS_SHOW_TPOPUP) {
             if (options && options.description) {
                $("#"+that.idDialogShowPopup).dialog("open");
                if (options.title) {          
                    $("#"+that.idDialogShowPopup).dialog("option","title","<span class='title'>"+options.title+"</span>");
                }
                $("#"+that.idDialogShowPopupDescription).html("<div class='big_black_text'>"+options.description+"</div>");
            }            
        }   
        if (type == ACTIONS_SHOW_ALERT) {
             if (options) {
                optAlert = options;
                $("#"+that.idDialogShowAlert).dialog("open");
                $("#"+that.idDialogShowAlertText).html("<div class='big_black_text'>"+options.text+"</div>");                
            }            
        }                                 
    }   
                  
    this.closeDialog = function(type) {
        if (type == ACTIONS_SHOW_IMAGE) {
            $("#"+this.idDialogShowImage).dialog("close");
        }
        if (type == ACTIONS_INITIATE_CONVERSATION) {
            $("#"+this.idDialogInitiateConversation).dialog("close");
        }
        if (type == ACTIONS_SHOW_TPOPUP) {
            $("#"+this.idDialogShowPopup).dialog("close");
        }
        if (type == ACTIONS_SHOW_ALERT) {
            $("#"+this.idDialogShowAlert).dialog("close");
        }        
    }     
}



function BrowserEmulatorItems() {    
    var that = this;
    this.idPanelItems = "emulator_panelitems";
    var items = new Array();

    this.displayPanel = function(visible) {
        $("#"+this.idPanelItems).css({"display": visible?"block":"none"});
    }    

    this.addItem = function(name) {
        
    }
    
    this.useItem = function(dissapearAfterTaking) {
            
    }   

    this.removeAllItems = function() {
        items.length = 0;
    }
    
}

function setCookie(name, value, expire, domain) {
        document.cookie = name + "=" + escape(value) + ((expire==null)?"" : ("; expires=" + expire.toGMTString())) + ((domain==null)?"" : ("; domain=" + domain) );
}

function getCookie(name) { //1
    if (document.cookie!="") { //2
    var toCookie=document.cookie.split("; ");  //3
        for (i=0; i<toCookie.length; i++) { //4
            var nazwaCookie=toCookie[i].split("=")[0]; //5
            var wartoscCookie=toCookie[i].split("=")[1]; //6
            if (nazwaCookie==nazwa) return unescape(wartoscCookie) //7
        }
    }
}


function removeCookie(name) {
    var dzis = new Date()
    if (document.cookie!="") {
        var toCookie=document.cookie.split("; ");
        for (i=0; i<toCookie.length; i++) {
            var nazwaCookie=toCookie[i].split("=")[0];
            var wartoscCookie=toCookie[i].split("=")[1];
            if (nazwaCookie==name) document.cookie=nazwaCookie+"=;expires="+dzis.getMonth()-1
        }
    }
}

function removeAllCookies() {
    if (document.cookie!="") {
        var toCookie=document.cookie.split("; ");
        var dataWygasniecia=new Date;
        dataWygasniecia.setDate(dataWygasniecia.getDate()-1)
        for (i=0; i<toCookie.length; i++) {
            var nazwaCookie=toCookie[i].split("=")[0]; 
            document.cookie = nazwaCookie + "=;expires=" + dataWygasniecia.toGMTString();
            //document.cookie = toCookie[i] + ";expires=" + dataWygasniecia.toGMTString();
        }
    }
}

function displayAllCookies() {
    if (document.cookie!="") { //jeżeli istnieją w ogóle cookie
        toCookie = document.cookie.split("; "); //tworzymy talblice toCookie z ciasteczkami
        console.log("Ilosc cookie: " + toCookie.length); //wypisujemy ilosc cookie (czyli wielkosc toCookie)
        for (i=0; i<toCookie.length; i++) { //rozpoczyanmy petle po toCookie
            console.log("Nazwa cookie " + i + ": " + toCookie[i].split("=")[0]); //wypisujemy nazwe aktualnego cookie...
            console.log("Wartość cookie " + i + ": " + toCookie[i].split("=")[1]); //i jego wartosc
        }
    } else {
        console.log('Nie ma żadnych cookie');
    }
}

    var AJAX_ASYNC = true;

    var defaultAjax = { // default ajax to copy
        type: 'POST',
        url: "/gamedesigner/post/",
        dataType: "text",
        async: true        
    };
    
    function ajaxBase(options) {
        var dataAjax = {};
        $.extend( true, dataAjax, defaultAjax );        
        $.extend( true, dataAjax, options );        
        $.ajax(dataAjax);
    }    
    
    function addObject(element, type, mKeyVals) {
        switch(type) {
            case ELEMENT_TYPE_TEXT: mKeyVals.action = "add_text_object"; break;
            case ELEMENT_TYPE_BUTTON: mKeyVals.action = "add_button_object"; break;
            case ELEMENT_TYPE_IMAGE: mKeyVals.action = "add_image_object"; break;
            case ELEMENT_TYPE_HTML: mKeyVals.action = "add_html_object"; break;
            case ELEMENT_TYPE_MAP: mKeyVals.action = "add_map_object"; break;
            case ELEMENT_TYPE_CLICKABLE_AREA: mKeyVals.action = "add_clickable_area_object"; break;
            case ELEMENT_TYPE_TEXTEDIT: mKeyVals.action = "add_textedit_object"; break;
            default: break;
        }
        console.log("add "+type+": ");
        console.log(mKeyVals);
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: mKeyVals,
            dataType: "text",
            async: AJAX_ASYNC,
            success: function(resultData) {
                element.dataset.designId = resultData;
                                
                //if (canvas.canCreateElementName(element.dataset.designName) == false) {
                //    element.dataset.designName = canvas.getFirstAvailableNameForType(type);
                //} 
                              
                switch(type) {
                    case ELEMENT_TYPE_TEXT:
                        //setStyleOfElement(element, {text:specialCharsToHtml("Optional default text here")}); 
                        break;
                    case ELEMENT_TYPE_BUTTON:
                        //setStyleOfElement(element, {title_label:specialCharsToHtml(element.dataset.designName)});
                        break;
                    case ELEMENT_TYPE_IMAGE: 
                        break;
                    case ELEMENT_TYPE_HTML:
                        //setStyleOfElement(element, {html_content:specialCharsToHtml(element.dataset.designName)}); 
                        break;
                    case ELEMENT_TYPE_MAP: 
                        break;                        
                    case ELEMENT_TYPE_CLICKABLE_AREA: 
                        break;                        
                    case ELEMENT_TYPE_TEXTEDIT: 
                        //setStyleOfElement(element, {text:specialCharsToHtml(element.dataset.designName)});
                        break;                        
                    default: break;
                }
                canvas.showElementsList();
                element.dataset.designEditActions = 1;
                selectElement(element, true, true);
                activeElement.updateElementInBase(mKeyVals);

                if (mKeyVals.callbacks && mKeyVals.callbacks.addedToBase && typeof mKeyVals.callbacks.addedToBase === "function") {
                    mKeyVals.callbacks.addedToBase(element);
                }
            },
            error: function() {
                
            },
        });                
    }
    
    function updateObject(element, type, mKeyVals) {  
        if (mKeyVals != undefined) {   
            mKeyVals = {};   
        }
        switch(type) {
            case ELEMENT_TYPE_TEXT:  
                mKeyVals = optionsTextObject(element); 
                mKeyVals.action = "update_text_object"; 
                break;
            case ELEMENT_TYPE_BUTTON: 
                mKeyVals = optionsButtonObject(element); 
                mKeyVals.action = "edit_button_object"; 
                break;
            case ELEMENT_TYPE_IMAGE: 
                mKeyVals = optionsImageObject(element); 
                mKeyVals.action = "edit_image_object"; 
                break;
            case ELEMENT_TYPE_HTML: 
                mKeyVals = optionsHtmlObject(element); 
                mKeyVals.action = "edit_html_object"; 
                break;
            case ELEMENT_TYPE_MAP: 
                mKeyVals = optionsMapObject(element); 
                mKeyVals.action = "edit_map_object"; 
                break;
            case ELEMENT_TYPE_CLICKABLE_AREA: 
                mKeyVals = optionsClickableAreaObject(element); 
                mKeyVals.action = "edit_clickable_area_object"; 
                break;
            case ELEMENT_TYPE_TEXTEDIT:  
                mKeyVals = optionsTextObject(element); 
                mKeyVals.action = "edit_textedit"; 
                break;                
            case ELEMENT_TYPE_NAVIGATOR_BAR_BUTTON: 
                mKeyVals = optionsNavigatorBarButtonObject(element); 
                mKeyVals.action = "edit_navigator_bar_button_object"; 
                break;
            default: break;
        }
        console.log("Updating "+type+":");
        console.log(mKeyVals);
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: mKeyVals,
            dataType: "text",
            async: AJAX_ASYNC,
            success: function(resultData) {
                //var expires = new Date();
                //expires.setMonth(expires.getMonth() + 6);
                //setCookie("change","item "+activeElement.elementSelected.dataset.designId,expires);
                if (activeElement && activeElement.elementSelected) {
                    globalChange.setCorrectForName(activeElement.prevName, EDIT_ELEMENT_CLICKABLE_AREA, activeElement.elementSelected.dataset.designName);
                    selectElement(activeElement.elementSelected); // refresh
                }
				if (codeEditor) {
					codeEditor.generateMainCode();
				}
                          
                if (mKeyVals.callbacks && mKeyVals.callbacks.updateInBase && typeof mKeyVals.callbacks.updateInBase === "function") {
                    mKeyVals.callbacks.updateInBase(element);
                }
            }
        });
    }
    
    /* options:
         options.isUserCreated  - if true - user remove item on canvas,  if false - source of remove item is other (np. editor) 
     */    
    function removeObject(element, type, options) {
        var mKeyVals;
        var id = element.dataset.designId;
        switch(type) {
            case ELEMENT_TYPE_TEXT: mKeyVals = {action:"remove_text_object", t_id:id}; break;
            case ELEMENT_TYPE_BUTTON: mKeyVals = {action:"remove_button_object", b_id:id}; break;
            case ELEMENT_TYPE_IMAGE: mKeyVals = {action:"remove_image_object", image_id:id}; break;
            case ELEMENT_TYPE_HTML: mKeyVals = {action:"remove_html_object", html_id:id}; break;
            case ELEMENT_TYPE_MAP: mKeyVals = {action:"remove_map_object", map_id:id}; break;
            case ELEMENT_TYPE_CLICKABLE_AREA: mKeyVals = {action:"remove_clickable_area_object", clickable_area_id:id}; break;
            case ELEMENT_TYPE_TEXTEDIT: mKeyVals = {action:"remove_textedit", t_id:id}; break;
            default: break;
        }
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: mKeyVals,
            dataType: "text",
            async: AJAX_ASYNC,
            success: function(resultData){                
                if (activeElement.elementSelected == element) {
                    activeElement.setNotActive();
                }
                globalChange.setCorrectForName(element.dataset.designName, DELETED_ELEMENT_CLICKABLE_AREA);
                if (options && options.isUserCreated) {
                    codeEditor.generateByRemoveObject([{name:element.dataset.designName}]);
                }
                canvas.removeElement(element); // element is now: undefined                                                    
                console.log("Remove "+type+" id="+id);     
            }
        });        
    }
    
    function removeFile(type, filename) {
        if(!filename) {
            return;
        }
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/removefile/",
            data: mKeyVals = { app_id: appId, type: type, filename: filename },
            dataType: "text",
            success: function(resultData){                
                if (resultData) {
					if (type == RESOURCES_TYPE_IMAGES) {
					    globalChange.setCorrectForName(filename, DELETED_ELEMENT_IMAGE)
                    } else if (type == RESOURCES_TYPE_SOUNDS) {
                        globalChange.setCorrectForName(filename, DELETED_ELEMENT_SOUND)
                    }          
                    getUploadedFilesByType(type);
                }
            }                                
        });      
    }
    
    function getUploadedFilesByType(type, filename) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/getfiles/",
            data: mKeyVals = { app_id: appId, type: type },
            dataType: "text",
            success: function(resultData){                
                if (resultData) {
                    var dataObj = JSON.parse(resultData);
                    
                    if (type == RESOURCES_TYPE_IMAGES) {
                        var listFileName = dataObj.images; 
                        listFileName = listStringArrayWithExtension(listFileName, ["jpg","jpeg","png","gif"]);
                        if (listFileName) {
                            application.imagesList = listFileName;
                            application.showScreenInfo();
                        }                     
                        if (properties) {
                            properties.listOfImages = listFileName;
                        }                    
                        // refresh list images files
                        if (resourcesUpload[0]) {
                            resourcesUpload[0].setListFilename(listFileName);
                            resourcesUpload[0].setFocusForFilename(filename);                            
                        }                                                
                        // selectElement(activeElement.elementSelected);
                    }
                    if (type == RESOURCES_TYPE_SOUNDS) {
                        var listFileName = dataObj.sounds;  
                        listFileName = listStringArrayWithExtension(listFileName, ["mp3","wma","wav"]);    
						if (listFileName) {
							application.soundsList = listFileName;                        
							application.showScreenInfo();
						}
                        // refresh list sound files
                        if (resourcesUpload[1]) {
                            resourcesUpload[1].setListFilename(listFileName);
                            resourcesUpload[1].setFocusForFilename(filename);
                        }                                                
                        //selectElement(activeElement.elementSelected);
                    }                    
                }
            }                                
        });      
    }
    
    function getScreenList(options) {
        var data = $.extend(true, { url: "/gamedesigner/screenlist/"} ,options);
        ajaxBase(data);
    } 

    function exportToZip() {
        $.ajax({
            //type: 'POST',
            url: "/gamedesigner/export/"+appId+"/",
            data: {},
            dataType: "text",            
            success: function(resultData){
                $("#dialog_export p").html("Export success. <p><a href='../../media/zip/"+userId+"/"+appName+".zip'>Download zip to your computer</a></p>");
                $("#dialog_export").dialog("open");
            },
            error: function() {
                $("#dialog_export p").html("Export failed.");
                $( "#dialog_export" ).dialog("open");
            }                     
                       
        });      
    }
    
    
    function copyApp(app_id, user_id, name, release, shared_author, callbacksObject) {
        var result = {success: false, id: 0};
        var async = true;
        if (callbacksObject && callbacksObject.async != undefined) {
            async = callbacksObject.async;
        }         
        
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: {action: "copy_project", app_id: app_id, user_id: userId, name: name, release: release, shared_author: shared_author },
            dataType: "text",
            async: async,
            success: function(resultData) {
                result.success = true;
                result.id = resultData;
                if (callbacksObject && callbacksObject.success && typeof callbacksObject.success === "function") {
                    callbacksObject.success(result);
                }                
            },
            error: function() {
                if (callbacksObject && callbacksObject.error && typeof callbacksObject.error === "function") {
                    callbacksObject.error(result);
                }
            }                                  
        });
    }    
    
    function removeApp(id, callbackSuccess, callbackFailed) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: {action: "remove_app", id: id},
            dataType: "text",
            success: function(resultData){
                if (typeof callbackSuccess === "function") {
                    callbackSuccess(id, resultData);
                }
            },
            error: function() {
                if (typeof callbackFailed === "function") {
                    callbackFailed(id);
                }
            }                                
        });      
    }          
    
    function removeScreen(id, callbackSuccess, callbackFailed) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: {action: "remove_board_object", id: id},
            dataType: "text",
            async: false,
            success: function(resultData){
                if (typeof callbackSuccess === "function") {
                    callbackSuccess(id, resultData);
                }
            },
            error: function() {
                if (typeof callbackFailed === "function") {
                    callbackFailed(id);
                }
            }                                  
        });      
    }     
    
    function getListPublishEmail(options) {
        var result = {success: false, json: ""};
        var async = true;
        if (options && options.async != undefined) {
            async = options.async;
        }         
        
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: {
                action: "get_list_publish_email", 
                email: options.email, 
            },
            dataType: "text",
            async: async,
            success: function(resultData) {
                result.success = true;
                result.json = resultData;
                if (options && options.success && typeof options.success === "function") {
                    options.success(result);
                }                
            },
            error: function() {
                if (options && options.error && typeof options.error === "function") {
                    options.error(result);
                }
            }                                  
        });
    }
    
    
    // @params options.app_id  
    // @return json (single app object from base)    
    function get_app(options) {
        var data = $.extend(true, { data: { action:"get_app" }} ,options);
        ajaxBase(data);                
    }
    
    // @params options.release -  
    // @return json (array of table application)
    function getAppListByRelease(options) {
        var data = $.extend(true, {data:{action:"get_app_list_by_release"}} ,options);
        ajaxBase(data);
    }
    

    // @return json (array of table application)
    function getLessonIdList(options) {
        var data = $.extend(true, {data:{action:"get_lessons"}} ,options);
        ajaxBase(data);
    }
    
    // @return json (dictionary of settings)
    function ajaxGetSettings(options) {
        var data = $.extend(true, {data:{action:"get_settings"}} ,options);
        ajaxBase(data);
    }
        
    
    var AjaxTutorial = {
        urlPOST: "/gamedesigner/tutorial/post/",
        // @params options.data.lesson_id
        // @params options.data.from_order
        // @return json (array of table application)
        ajaxGetBubbles: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_bubbles"}} ,options);
            ajaxBase(data);                  
        },
        // @params options.data.lesson_id
        // @params options.data.user_id
        // @return json (array of table application)
        ajaxGetBubblesUser: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_bubbles_user"}} ,options);
            ajaxBase(data);                  
        },
        // @params options.data.lesson_id
        // @params options.data.from_order
        // @return OK (if everyting is ok)
        ajaxCompleteBubble: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"complete_bubble"}} ,options);
            ajaxBase(data);
        },   
        // @params options.data.b_id - id bubble to remove
        ajaxDeleteBubble: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"delete_bubble"}} ,options);
            ajaxBase(data);                  
        },
        ajaxCopyToStartProject: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"copy_start_project"}} ,options);
            ajaxBase(data);            
        },        
        ajaxCopyToEndProject: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"copy_end_project"}} ,options);
            ajaxBase(data);            
        },
        // @params options.data.lesson_id
        // @params options.data.user_id
        // @return  zwraca "1" lub "x/x" (progress danej lekcji, jeśli "1" - > ukończona, w przeciwnym wypadku progress w bubble np 5/10)              
        ajaxGetLessonProgress: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_lesson_progress"}} ,options);
            ajaxBase(data);            
        },
        // @params options.data.lesson_id
        // @params options.data.user_id
        // @return  zwracam "1" jeśli uzytkownik w ogóle zaczął lekcję i ukonczyl chociaz 1 bubble i "0" w przeciwnym wypadku.
        ajaxIsLessonStarted: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"is_lesson_started"}} ,options);
            ajaxBase(data);            
        },
        // @params options.data.lesson_id: INT
        // @params options.data.file: BLOB       <  
        // @params options.data.filename: STRING
        // @return  OK from server
        /*ajaxUploadFile: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"upload_file"}} ,options);
            ajaxBase(data);                        
        },*/
        // @params options.data.lesson_id: INT
        // @params options.data.filename: STRING
        // @return  OK from server
        ajaxRemoveFile: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"remove_file"}} ,options);
            ajaxBase(data);                        
        },
        // @params options.data.lesson_id: INT
        // @return  Count of bubble for lesson_id
        ajaxCountBubbles: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"count_bubbles"}} ,options);
            ajaxBase(data);                        
        },
        // @params options.data.lesson_id: INT
        // @return  Count of bubble for lesson_id
        ajaxFinishedEditingStarting: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"finished_editing_starting"}} ,options);
            ajaxBase(data);                        
        },
        ajaxGetConceptions: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_conceptions"}} ,options);
            ajaxBase(data);   
        },
        // @params options.data.app_id: INT
        // @params options.data.filename: STRING
        // @params options.data.text: STRING
        // @return  OK
        ajaxEditFile: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"edit_file"}} ,options);
            ajaxBase(data);   
        },
        // @params options.data.app_id: INT
        // @params options.data.filename: STRING
        // @return  text
        ajaxGetFile: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_file"}} ,options);
            ajaxBase(data);   
        },
        // @params options.data.days: INT
        // @params options.data.user_id: INT
        // @return  text
        ajaxGetProgress: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_progress"}} ,options);
            ajaxBase(data);
        },
        // @params options.data.user_id: INT
        // @return  {True|False}
        ajaxShowSubEnded: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"show_sub_ended"}} ,options);
            ajaxBase(data);
        },
        // @params options.data.lesson_id: INT
        // @return  {True|False}
        ajaxGetIdNextLesson: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"getIdNextLesson"}} ,options);
            ajaxBase(data);
        },
        // @params options.data.user_id: INT
        // @params options.data.quiz_id: INT
        // @params options.data.percent: (INT)
        // @return OK
        ajaxQuizSetPercent: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"set_percent_quiz"}} ,options);
            ajaxBase(data);
        },
        // @params options.data.user_id: INT
        // @params options.data.quiz_id: INT
        // @return percent ()
        ajaxQuizGetPercent: function(options) {
            var data = $.extend(true, { url: this.urlPOST, data:{action:"get_precent_quiz"}} ,options);
            ajaxBase(data);
        }          
    }

    function addSwipegroup(name) {
        var objectSwipegroup = {
            action : "add_swipegroup_object",
            app_id : appId,
            name : name,
            page_control_visible : 1,
            navigation_bar_visible : 1,                            
            pager_tab_visible : 1,
            pager_tab_title : ""
        };
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: objectSwipegroup,
            dataType: "text",            
            success: function(resultData){ 
                objectSwipegroup.id = resultData;    
                objectSwipegroup.type = ELEMENT_TYPE_NAVIGATOR_BAR;    
                console.log(resultData);
                if (application) {                
                    application.swipegroupsObjectList.push(objectSwipegroup);
                    selectSwipegroup(objectSwipegroup, true);
                }
                if (properties) {
                    properties.setInputValues(activeElement.elementSelected);
                }
                                        
            }                                        
        });      
    }  
    
    function editSwipegroup(element) {
     var swipegroupObject = optionsSwipegroupObject(element);
     swipegroupObject.action = "edit_swipegroup_object";
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: swipegroupObject,
            dataType: "text",            
            success: function(resultData){ 
            },
        });          
    }
   
    function getSwipegroupsList() {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/swipegroupslist/",
            data: { app_id: appId },
            dataType: "text",            
            success: function(resultData){  
                if (!resultData || !application) {
                    return;
                }
                var swipegroupsData = JSON.parse(resultData);
                if (swipegroupsData) {
                    application.swipegroupsObjectList = swipegroupsData.swipegroups;
                    // refresh visual        
                    //application.showSwipegroupsScreen();
                }             
            },
            //error: function() {
            //}                                           
        });      
    }          
           
   function updateBoard(id, filenameBackground, filenameSound, screen_id) {
        if (!screen_id) {
            screen_id = currentScreenId;
        }
        console.log("Updating board");
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "edit_board_object", id: id, screen_id : screen_id, background: filenameBackground, sound: filenameSound, panel_items: panelItemsVisible  },
            dataType: "text",
            success: function(resultData) {
                
            }
        });        
    }   
    
   function updateCodes(screen_id, user_code, generated_code, start_code) {
        if (!screen_id) {
            screen_id = currentScreenId;
        }
        if (!generated_code) {
            generated_code = ";";
        }
        if (!user_code) {
            user_code = " ";
        }
        //console.log("Updating codes");
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "edit_board_code", screen_id: screen_id, user_code: user_code, generated_code: generated_code, start: start_code },
            dataType: "text",
            success: function(resultData) {
                
            }
        });        
    }    
    
    function updateMainCode(mainCode) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "edit_app", app_id: appId, main_code: mainCode },
            dataType: "text",
            success: function(resultData) {
                
            }
        }); 
    }      
    
    
    function addPublish(app_id, name, date, version, callbacksObject) {
        var result = {success: false, id: 0};
        var async = true;
        if (callbacksObject && callbacksObject.async != undefined) {
            async = callbacksObject.async;
        }        
        
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "add_publish", app_id: app_id, name: name, date: date, version: version  },
            dataType: "text",
            async: async,
            success: function(resultData) {
                result.success = true;
                result.id = resultData;
                if (callbacksObject && callbacksObject.success && typeof callbacksObject.success === "function") {
                    callbacksObject.success(result);
                }
            }, 
            error: function() {
                if (callbacksObject && callbacksObject.error && typeof callbacksObject.error === "function") {
                    callbacksObject.error(result);
                }
            }
        });  
    }
    
    function removePublish(id) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "remove_publish", id: id  },
            dataType: "text",
            success: function(resultData) {
            }
        });    
    }    
    
    function addPublishEmail(publish_id, email, sharedCode, callbacksObject) {
        var result = {success: false, id: 0};
        var async = true;
        if (callbacksObject && callbacksObject.async != undefined) {
            async = callbacksObject.async;
        }
        
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "add_publish_email", publish_id: publish_id, email: email, sharedCode: sharedCode },
            dataType: "text",
            async: async,
            success: function(resultData) {
                result.success = true;
                result.id = resultData;
                if (callbacksObject && callbacksObject.success && typeof callbacksObject.success === "function") {
                    callbacksObject.success(result);
                }                
            },
            error: function() {
                if (callbacksObject && callbacksObject.error && typeof callbacksObject.error === "function") {
                    callbacksObject.error(result);
                }
            }            
        });  
    }    
    
    function removePublishEmail(id) {
        $.ajax({
            type: 'POST',
            url: "/gamedesigner/post/",
            data: { action: "remove_publish_email", id: id  },
            dataType: "text",
            success: function(resultData) {
            }
        });    
    }    
        
    
    
/*dodanie publikacji
 action: "add_publish",
 podaje: app_id, name, date, version
dostaje ID publikacji 

 edycja publikacji
 action: "edit_publish",
 podaje: id,app_id, name, date, version

 usuwanie publikacji (moga sie tez usuwac powiazane tabele z "codes_publish")
 action: "remove_publish",
 podaje: id
=====================
 dodanie kodu
 action: "add_code_publish",
 podaje: publish_id , type , code
dostaje ID kodu publikacji 

 edycja kodu publikacji
 action: "edit_code_publish",
 podaje: id,publish_id , type , code

 usuwanie kodu publikacji
 action: "remove_code_publish",
 podaje: id    
    */
       
           
    function optionsTextObject(element) { 
        var options = {
            t_id : element.dataset.designId,
            text : element.dataset.designText,
            font_size : element.dataset.designFontSize,
            font_type : element.dataset.designFontType,
            text_color : element.dataset.designTextColor,
            screen_id : currentScreenId,
            s_id : currentScreenId,
            x : element.dataset.designXPos, //canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos),
            y : element.dataset.designYPos, //canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos),
            width : element.offsetWidth, //canvas.convertPosXFromCanvasToIPad(*1.2), 
            height : element.offsetHeight, //canvas.convertPosYFromCanvasToIPad(element.offsetHeight),
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions            
        }
        return options;
    }     
    
    function optionsButtonObject(element) {
        var optionsButtonObject = {
            b_id : element.dataset.designId,
            title_label : element.dataset.designText,
            font_size : element.dataset.designFontSize,
            font_type : element.dataset.designFontType,
            title_color : element.dataset.designTextColor,
            background_image : (element.dataset.designBackgroundImage)?element.dataset.designBackgroundImage:"", 
            screen_id : currentScreenId,
            x : canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos), 
            y : canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos), 
            width : canvas.convertPosXFromCanvasToIPad(element.dataset.designWidth), 
            height : canvas.convertPosYFromCanvasToIPad(element.dataset.designHeight), 
            visible : element.dataset.designVisible,
            name : element.dataset.designName,            
            onclick: element.dataset.designActions
        }
        return optionsButtonObject;
    }       
     
    function optionsImageObject(element) {
        var optionsImageObject = {
            image_id : element.dataset.designId,
            file_name : element.dataset.designFileName,
            draggable : element.dataset.designDraggable,
            x : canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos), 
            y : canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos), 
            screen_id : currentScreenId,
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions
        }
        return optionsImageObject;
    }            
     
    function optionsHtmlObject(element) {
        var optionsHtmlObject = {
            html_id : element.dataset.designId,
            html_content : element.dataset.designHtmlContent,
            x : canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos), 
            y : canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos),
            width : canvas.convertPosXFromCanvasToIPad(element.offsetWidth), 
            height : canvas.convertPosYFromCanvasToIPad(element.offsetHeight),             
            screen_id : currentScreenId,
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions
        }
        return optionsHtmlObject;
    }     
    
    function optionsMapObject(element) {
        var optionsMapObject = {
            map_id : element.dataset.designId,
            x : canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos), 
            y : canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos),
            width : canvas.convertPosXFromCanvasToIPad(element.dataset.designWidth), 
            height : canvas.convertPosYFromCanvasToIPad(element.dataset.designHeight),             
            zoom : element.dataset.designZoom,             
            screen_id : currentScreenId,
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions
        }
        return optionsMapObject;
    }         
        
    function optionsNavigatorBarButtonObject(element) {
        var optionsNavigatorButtonObject = {
            position : element.dataset.designPosition,
            title_label : element.dataset.designTitleLabel,
            title_color : element.dataset.designTitleColor,
            screen_id : currentScreenId,
            onclick: element.dataset.designActions
        }
        return optionsNavigatorButtonObject;
    }         
    
    function optionsSwipegroupObject(element) {
        var optionsSwipegroupObject = {
            id : element.dataset.designId,
            app_id : currentAppId,
            name : element.dataset.designName,
            page_control_visible : element.dataset.designPageControlVisible,
            navigation_bar_visible : element.dataset.designNavigationBarVisible,                            
            pager_tab_visible : element.dataset.designPagerTabVisible,
            pager_tab_title : element.dataset.designPagerTabTitle
        }
        return optionsSwipegroupObject;
    }          
    
    function optionsClickableAreaObject(element) {
		//console.log(element.dataset);
        var optionsClickableAreaObject = {
            clickable_area_id : element.dataset.designId,
            file_name : element.dataset.designAreaImage,
            x : element.dataset.designXPos, //canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos), 
            y : element.dataset.designYPos, //canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos), 
            width : element.dataset.designWidth, //canvas.convertPosXFromCanvasToIPad(element.dataset.designWidth), 
            height : element.dataset.designHeight, //canvas.convertPosYFromCanvasToIPad(element.dataset.designHeight), 
            screen_id : element.dataset.designScreenId,
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions
        }
        return optionsClickableAreaObject;
    }      
    
    function optionsTextEditObject(element) { 
        var options = {
            t_id : element.dataset.designId,
            text : element.dataset.designText,
            font_size : element.dataset.designFontSize,
            font_type : element.dataset.designFontType,
            text_color : element.dataset.designTextColor,
            screen_id : currentScreenId,
            x : element.dataset.designXPos, //canvas.convertPosXFromCanvasToIPad(element.dataset.designXPos),
            y : element.dataset.designYPos, //canvas.convertPosYFromCanvasToIPad(element.dataset.designYPos),
            width : element.dataset.designWidth, //canvas.convertPosXFromCanvasToIPad(element.dataset.designWidth), 
            height : element.dataset.designHeight, //canvas.convertPosYFromCanvasToIPad(element.dataset.designHeight),
            visible : element.dataset.designVisible,
            name : element.dataset.designName,
            onclick: element.dataset.designActions            
        }
        return options;
    }         

    var CanvasElements = {
        CLICKABLE_AREA: "clickable_area",
        TEXTFIELD: "text",
        TEXTEDIT: "textedit",
        BUTTON: "button"
    }

    var optionalElementText = "Optional default text here";

	function recognizeElementType(type){
		switch(type){
                /*case "text":
                    return "d";
                break;
                case "textedit":
                    return "textarea";
                break;*/
                case "image":
                    return "img";
                break;
                case "button":
                    return "div";
                break;
				default:
					return "div";
					break;
		}
	}
	
	/*
     elementInfo.loaded  -  if true - item loaded from database, false - item not loaded from database
     elementInfo.new_element  -  if true - item is first created
     elementInfo.isUserCreated  - if true - user drop item on canvas,  if false - source of created item is other (np. editor)
     elementInfo.callbacks.addedToBase  - 
     elementInfo.callbacks.updateInBase  - 
	*/
	function addElementToCanvas(elementInfo) {

	    console.log(elementInfo);
	    
	    if (elementInfo.loaded == undefined) {
	        messageDialog.show("Canvas","Add element to canvas '"+elementInfo.type+"'. error: attribute 'loaded' not created in function addElementToCanvas. Element doesnt put on canvas. ");
	        return;
	    }	    
	    
        var elementClass = recognizeElementType(elementInfo.type);
        var elementToAdd = document.createElement(elementClass); 
        
        if (elementInfo.type == ELEMENT_TYPE_TEXTEDIT || elementInfo.type == ELEMENT_TYPE_TEXT || 
            elementInfo.type == ELEMENT_TYPE_BUTTON) {
            elementToAdd.style.padding = "4px";
            var textArea = document.createElement("textarea");
            textArea.style.width = "98%";
            textArea.style.height = "96%";          
            elementToAdd.appendChild(textArea);
        }
        
        elementToAdd.style.display = "block";
        elementToAdd.style.position = "absolute";
        
        if (elementInfo.loaded) {
            elementInfo.x_pos = canvas.convertPosXFromIPadToCanvas(elementInfo.x_pos);
            elementInfo.y_pos = canvas.convertPosYFromIPadToCanvas(elementInfo.y_pos);            
            elementInfo.width = canvas.convertPosXFromIPadToCanvas(elementInfo.width);
            elementInfo.height = canvas.convertPosYFromIPadToCanvas(elementInfo.height);            
        } 
        
        if (elementInfo.set_default == undefined) {
            elementInfo.set_default = true;
        }
        
        // common for all
        elementToAdd.dataset.designType = elementInfo.type;
        elementToAdd.dataset.designId = elementInfo.id;
        elementToAdd.dataset.designOutline = 1;
        elementToAdd.dataset.designActions = specialCharsToHtml(elementInfo.actions);        
        elementToAdd.dataset.designIsActions = 1;        
        
        if (elementInfo.loaded && elementInfo.screen_id != boardId) {
            elementToAdd.dataset.designScreenId = elementInfo.screen_id;
            elementInfo.is_element_from_other_board = true;
        } else {
            elementToAdd.dataset.designScreenId = currentScreenId;
        }
        
        // add element to canvas     
        canvas.addElement(elementToAdd);        
        
        // default settings
        setDefaultSettingsForElement(elementToAdd, elementInfo.loaded, elementInfo.set_default);        
        
        setStyleOfElement(elementToAdd, {
                            loaded : elementInfo.loaded,
                            new_element : elementInfo.new_element, 
                            is_element_from_other_board: elementInfo.is_element_from_other_board,
                            type: elementInfo.type,
                            x_pos : elementInfo.x_pos,
                            y_pos : elementInfo.y_pos,
                            width : elementInfo.width,
                            height : elementInfo.height,
                            font_size : elementInfo.font_size,
                            font_type : elementInfo.font_type,
                            text_color : elementInfo.text_color,
                            title_label : elementInfo.title_label,
                            title_color : elementInfo.title_color,
                            background_image : elementInfo.background_image,
                            file_name : elementInfo.file_name,
                            area_image : elementInfo.area_image,
                            draggable : elementInfo.draggable,
                            html_content : elementInfo.html_content,
                            text : elementInfo.text,
                            name : elementInfo.name,
                            visible : elementInfo.visible,
                            screen_id : elementInfo.screen_id, 
                         });
                         
        canvas.setCanvasForScreenId(currentScreenId);

        // set clickables areas for editor
        Editor.bindObjectTypeToElement(elementInfo.type, elementToAdd);

        // set manage of element
        setTextDraggable();
        setButtonsDraggable();
        setMapClickable();
        setEditables();                                 

        // add to database if not 
        if (elementInfo.loaded == false) {
            addElementToBase(elementToAdd, elementInfo);

            if (elementInfo.isUserCreated) {
                
                // generate code
                codeEditor.generateByNewObject([{name: elementToAdd.dataset.designName, type: elementInfo.type}]);
                if (elementInfo.type == ELEMENT_TYPE_TEXT || elementInfo.type == ELEMENT_TYPE_TEXTEDIT ||
                    elementInfo.type == ELEMENT_TYPE_BUTTON) {
                    codeEditor.generateByChangeParam([
                        {name:elementToAdd.dataset.designName,  parameter: "fontSize", value: elementToAdd.dataset.designFontSize},
                        {name:elementToAdd.dataset.designName,  parameter: "fontType", value: elementToAdd.dataset.designFontType},
                        {name:elementToAdd.dataset.designName,  parameter: "text", value: elementToAdd.dataset.designText},
                    ]);
                }
                codeEditor.generateByChangeParam([
                    {name:elementToAdd.dataset.designName,  parameter: "height", value: elementToAdd.dataset.designHeight},
                    {name:elementToAdd.dataset.designName,  parameter: "width", value: elementToAdd.dataset.designWidth},
                    {name:elementToAdd.dataset.designName,  parameter: "y", value: elementToAdd.dataset.designYPos},
                    {name:elementToAdd.dataset.designName,  parameter: "x", value: elementToAdd.dataset.designXPos}
                ]);
            }
       } else {
           //console.log("add element ("+elementInfo.type+" ID:"+elementInfo.id+") from base to canvas");
       }

       return elementToAdd;
	}
	
	function setStyleOfElement(element,styles) {
	    if (element == undefined) {
	        return;
	    }        
	    
	    text_color_hex = "#000000";
	    
        if (styles.x_pos != undefined && canvas) {
            var tmpPosX = parseInt(styles.x_pos);
            if (tmpPosX + element.offsetWidth >  canvas.workspaceWidth) {
                tmpPosX = canvas.workspaceWidth - element.offsetWidth;
            }  
            element.dataset.designXPos = tmpPosX;
            //clickableArea.x = tmpPosX;
            var styleLeft = tmpPosX + canvas.marginLeft;
            element.style.left = styleLeft+"px";  
        }
        if (styles.y_pos != undefined && canvas) {
            var tmpPosY = parseInt(styles.y_pos);
            // TIZEN
            var offsetTizen = 0;
            if (isTizen && canvas.isPortrait) {
                if (tmpPosY < tizenNavigationBar) {
                    tmpPosY = tizenNavigationBar;
                }
                offsetTizen = tizenNavigationBar;   
            }
            // END OF TIZEN 
            if (tmpPosY + element.offsetHeight >  canvas.workspaceHeight) {
                tmpPosY = canvas.workspaceHeight - element.offsetHeight;
            }  
            element.dataset.designYPos = tmpPosY;
            //clickableArea.y = tmpPosY;
            var styleTop = tmpPosY + canvas.marginTop;
            element.style.top = (styleTop-((isTizen)?(tizenNavigationBar):0)) +"px";
            element.style.top = (styleTop - offsetTizen)+"px";
        }
       // if (element.dataset.designType == ELEMENT_TYPE_CLICKABLE_AREA || element.dataset.designType == ELEMENT_TYPE_TEXTEDIT  || element.dataset.designType == ELEMENT_TYPE_TEXT) {
            if (styles.width != undefined) {
                element.dataset.designWidth = styles.width;
                element.style.width = styles.width+"px";
            } 
            if (styles.height != undefined) {
                element.dataset.designHeight = styles.height;
                element.style.height = styles.height+"px";
            } 
       // }

		//if (styles.new_element) {
        //    element.dataset.designName = "name";
        //    clickableArea.name = "name";
        //} else {
    		if (!styles.loaded) {
    			if (styles.name) {
    			    var newName = styles.name.toString();
    			    newName = newName.correctVariable("_");
    				if (canvas.canCreateElementName(newName) || newName == element.dataset.designName) {
    					element.dataset.designName = newName;
    					//clickableArea.name = newName;
    					$('#name').val(newName);
    				} else {
    				    if (canvas.canCreateElementName(styles.name) == false) {
    				        var newName = element.dataset.designType;
    				        if (newName == ELEMENT_TYPE_TEXT) {
    				            newName = "textfield";
    				        }
    				        styles.name = canvas.getFirstAvailableNameForType(newName);
    				    }
    				    element.dataset.designName = styles.name;
                        //clickableArea.name = styles.name; 
    				}
    			} 
    			canvas.showElementsList();
    			//canvas.getFirstAvailableNameForType(element.dataset.designType);
    		} else {
    		    element.dataset.designName = styles.name;
    		    //clickableArea.name = styles.name;
    		}     
		//}    
  
        if (styles.visible != undefined) {
            styles.visible = parseInt(styles.visible);
            if (!isNaN(styles.visible)) {
               if (styles.visible > 0) {
                   element.dataset.designVisible = 1;
                   //clickableArea.visible = 1;
                   if (element.dataset.designType == ELEMENT_TYPE_CLICKABLE_AREA) {
                       $(element).css('opacity', 0.7);
                   } else {
                       $(element).css('opacity', 1.0);
                   }
                   //element.style.backgroundColor = "#fff";   
               } else {
                   element.dataset.designVisible = 0;
                   //clickableArea.visible = 0;
                   $(element).css('opacity', 0.3);
                   //element.style.backgroundColor = "#ccc"; 
                   //element.style.backgroundImage = "none";
               }
            }   
            if (element.dataset.designAreaImage != "") {
                element.style.backgroundColor = "transparent";   
            }             
        }      
        if (styles.font_size) {
            element.dataset.designFontSize = styles.font_size;
             
            if (element.dataset.designType == ELEMENT_TYPE_TEXTEDIT || element.dataset.designType == ELEMENT_TYPE_TEXT || element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.style.fontSize = styles.font_size+"px";
                }
            } else {
                element.style.fontSize = styles.font_size+"px";       
            }            
            
            //setStyleOfElement(element, {width: element.offsetWidth, height: element.offsetHeight });
        }    
        if (styles.font_type) {
            element.dataset.designFontType = styles.font_type;              
            
            if (element.dataset.designType == ELEMENT_TYPE_TEXTEDIT || element.dataset.designType == ELEMENT_TYPE_TEXT || element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.style.fontFamily = styles.font_type;
                }
            } else {  
                element.style.fontFamily = styles.font_type;     
            }             
        }           
        if (styles.text_color) {
            element.dataset.designTextColor = styles.text_color;
            var hex = (new Color).myRgbToHex(styles.text_color);
            
            if (element.dataset.designType == ELEMENT_TYPE_TEXTEDIT || element.dataset.designType == ELEMENT_TYPE_TEXT || element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.style.color = hex;
                    $(child).css("color", hex);
                }
            } else {
                element.style.color = hex;
                $(element).css("color", hex);        
            }
        }
        if (styles.title_color) {
            element.dataset.designTitleColor = styles.title_color;
            var hex = (new Color).myRgbToHex(styles.title_color);
            
            if (element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.style.color = hex;
                    $(child).css("color", hex);
                }
            } else {
                element.style.color = hex;
                $(element).css("color", hex);        
            } 
        }        
        
        if (styles.text != undefined) {
            var text = specialCharsToHtml(styles.text);
            element.dataset.designText = Convert.nl2br(text);  // its important to designText doesnt has line break (use in editor Code)

            if (element.dataset.designType == ELEMENT_TYPE_TEXTEDIT || element.dataset.designType == ELEMENT_TYPE_TEXT || element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.setAttribute("value", styles.text);
                    $(child).val(Convert.br2nl(text));
                }
            } else {
                element.innerHTML = styles.text;                
                $(element).val(Convert.br2nl(text));            
            }  
        }
        if (styles.title_label != undefined) {
            var text = specialCharsToHtml(styles.title_label);
            element.dataset.designTitleLabel = Convert.nl2br(text);  // its important to designText doesnt has line break (use in editor Code)
            
            if (element.dataset.designType == ELEMENT_TYPE_BUTTON) {
                var child =  element.children[0];
                if (child) {
                    child.setAttribute("value", styles.title_label);
                    $(child).val(Convert.br2nl(text));
                }
            } else {
                element.innerHTML = styles.title_label;                
                $(element).val(Convert.br2nl(text));            
            }             
        }    
        if (styles.background_image != undefined) {
            element.dataset.designBackgroundImage = styles.background_image;  
            
            var child = element.children[0];
            if (child) {                    
                //$(child).attr('readonly', true);
                
                child.style.backgroundSize = "100% 100%";
                if (styles.background_image != "") {
                    child.style.backgroundImage = "url('/gamedesigner/media/upload/"+appId+"/img/"+styles.background_image+"')";
                } else {
                    child.style.backgroundImage = "url('/gamedesigner/media/img/btn_bg_vert.png')";
                    //background = "url(" + url + ") no-repeat"
                    // "url('../../media/img/btn_bg_vert.png')";
                    //self.meterDiv.style.background = "url(" + url + ") no-repeat";  
                }
            }             
             
        }
        if (styles.area_image != undefined) {            
            element.dataset.designAreaImage = styles.area_image;
            //clickableArea.image = styles.area_image;
            if (styles.area_image == "") {
                element.style.backgroundColor = "#fff";   
                element.style.backgroundImage = "none";  
               
                if (element.dataset.designVisible == 1) {
                    $(element).css('opacity', 0.7);
                    //element.style.backgroundColor = "#fff"; 
                } else {
                    //element.style.backgroundColor = "#ccc"; 
                }        
            } else {
                element.style.backgroundColor = "transparent"; 
                element.style.backgroundSize = "100% 100%"; 
                element.style.backgroundImage = "url('../../media/upload/"+appId+"/img/"+styles.area_image+"')";
                var img = document.createElement("img");            
                img.src = "../../media/upload/"+appId+"/img/"+styles.area_image;            
                img.onload = function() {
                    element.style.backgroundColor = "transparent";
                    element.dataset.designImageOriginalWidth = img.width;
                    element.dataset.designImageOriginalHeight = img.height;
                    /*if (!styles.loaded) {
                        if (!styles.width && !styles.height) {
                            setStyleOfElement(element, { width: img.width, height: img.height });                        
                            selectElement(element,true);
                        }  
                    }*/
                }                  
            }
        }     
        if (styles.proportional_image != undefined) {
            styles.proportional_image = parseInt(styles.proportional_image);
            if (!isNaN(styles.proportional_image)) {
               if (styles.proportional_image > 0) {
                   element.dataset.designProportionalImage = 1;
               } else {
                   element.dataset.designProportionalImage = 0;
               }
            }   
        }
        if (styles.file_name == "") {
            styles.file_name = DEFAULT_IMAGE;
        }        
        if (styles.file_name) {            
            element.dataset.designFileName = styles.file_name;  
            if (styles.file_name == DEFAULT_IMAGE || styles.file_name == "") {
                
                element.src = DEFAULT_IMAGE;
            } else {
                element.src = "../../media/upload/"+appId+"/img/"+styles.file_name;
            }
            element.onload = function() {
                selectElement(element,true);
            }
        }      
        styles.draggable = parseInt(styles.draggable);
        if (!isNaN(styles.draggable)) {
           if (styles.draggable > 0) {
               element.dataset.designDraggable = 1;
           } else {
               element.dataset.designDraggable = 0;
           }
        }                                 
        if (styles.html_content) {
            var text = Convert.nl2br(styles.html_content);
            element.dataset.designHtmlContent  = text;
            element.innerHTML = specialCharsToHtml(element.dataset.designHtmlContent);
        }
        if (styles.zoom) {
            styles.zoom = parseInt(styles.zoom);
            if (!isNaN(styles.zoom)) {
                //var map = element.dataset.map;
                if (map) {
                    if (!styles.zoomListener) {
                        map.setZoom(styles.zoom);
                    } else {
                        selectElement(element, true); 
                    }                 
                }            
                element.dataset.designZoom  = styles.zoom;
            }                 
        }  
        if (styles.screen_id) {
            if (styles.loaded) {
                element.dataset.designScreenId = styles.screen_id;
            } else {
                element.dataset.designScreenId = currentScreenId;
            }            
        }                          
	}
	
	function setDefaultSettingsForElement(element,wasLoaded, set_default) {
	    if (!wasLoaded && set_default) { 
             element.dataset.designVisible = 1;
         }
	            
        switch(element.dataset.designType){
            case ELEMENT_TYPE_TEXT:
                /*if (!wasLoaded && set_default) {
                    setStyleOfElement(element, {text:specialCharsToHtml("text"), font_size : 26, font_type : "Helvetica", text_color : "20,20,20"});                                     
                }
                element.setAttribute('class', 'editable_text');*/
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, {text:specialCharsToHtml(optionalElementText), width: 200, height: 30, font_size : 16, font_type : "Helvetica", text_color : "20,20,20"});                                     
                }
                element.setAttribute('class', 'draggable_button');  
                element.style.cursor = "move";               
                setResizableArea(element);
                setContextMenu(element, {elementType:element.dataset.designType});
                    
                var child = element.children[0];
                if (child) {                    
                    //$(child).attr('readonly', true);   
                    $(child).css({"background":"transparent", "border":"0px solid #000"});                 
                    
                    $(child).change(function() {
                       var text = $(child).val();
                       setStyleOfElement(element, {text:specialCharsToHtml(text)});
                       codeEditor.generateByChangeParam([{name:element.dataset.designName,  parameter: "text", value: text}]);
                       activeElement.updateElementInBase();
                    });
                }                             
                break;
            case ELEMENT_TYPE_BUTTON:
                /*if (!wasLoaded && set_default) {   
                    setStyleOfElement(element, {title_label:specialCharsToHtml("button"), background_image: "", title_color : "20,20,20"});                             
                }*/               
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, {text:specialCharsToHtml("Button text"), background_image: "", width: 200, height: 30, font_size : 16, font_type : "Helvetica", text_color : "20,20,20"});                                     
                }
                element.setAttribute('class', 'draggable_button');  
                element.style.cursor = "move";               
                setResizableArea(element);
                setContextMenu(element, {elementType:element.dataset.designType});
                    
                var child = element.children[0];
                if (child) {                    
                    //$(child).attr('readonly', true);   
                    $(child).css({ "border":"1px solid #aaaaaa", "background-color":"#ffffff", "text-align": "center"});
                    //"background":"transparent",                                    
                    
                    $(child).change(function() {
                       var text = $(child).val();
                       setStyleOfElement(element, {text:specialCharsToHtml(text)});
                       codeEditor.generateByChangeParam([{name:element.dataset.designName,  parameter: "text", value: text}]);                                              
                       activeElement.updateElementInBase();
                    });
                    
                    $(child).keydown(function( event ) {
                        // event
                        var isFind = false;
                        EventsNotification.exe(SequencesSystemEvents.EVENT_CHANGE_ELEMENT_TEXT, {text: $(this).val()}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
                    });                    
                    
                    $(child).corner();
                }                             
                break; 
                
                break;                                           
            case ELEMENT_TYPE_HTML:
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, {html_content:specialCharsToHtml("html")});                             
                } 
                element.setAttribute('class', 'editable_text');
                break;
            case ELEMENT_TYPE_IMAGE:
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, { file_name:DEFAULT_IMAGE, draggable: 1 });                             
                } 
                element.setAttribute('class', 'draggable_button');
                break;
            case ELEMENT_TYPE_MAP:
                var zoom = 13;
                var mapOptions = { zoom: zoom,
                                   mapTypeId: google.maps.MapTypeId.ROADMAP,
                                   center: new google.maps.LatLng(59.32522, 18.07002) };
                map = new google.maps.Map(element, mapOptions);                
                var marker = new google.maps.Marker({
                    map:map,
                    draggable:true,
                    animation: google.maps.Animation.DROP,
                    position: new google.maps.LatLng(59.32522, 18.07002)
                });
                google.maps.event.addListener(map, 'zoom_changed', function() {
                    var zoomListener = map.getZoom();                    
                    setStyleOfElement(element, { zoom: zoomListener, zoomListener: true });
                });
                setStyleOfElement(element, { width: 200, height: 200, zoom:zoom }); 
                element.setAttribute('class', 'clickable_map');
                //element.dataset.map = map;
                break;
            case ELEMENT_TYPE_CLICKABLE_AREA:
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, { width: 100, height: 100, area_image:"" });                             
                } 
                element.style.backgroundColor = "#fff";
                setResizableArea(element);
                setContextMenu(element, {elementType:element.dataset.designType});
                element.setAttribute('class', 'draggable_button');
                element.style.cursor = "pointer";
                break;      
            case ELEMENT_TYPE_TEXTEDIT:    
                if (!wasLoaded && set_default) {
                    setStyleOfElement(element, {text:specialCharsToHtml(optionalElementText), width: 200, height: 30, font_size : 16, font_type : "Helvetica", text_color : "20,20,20"});                                     
                }
                element.setAttribute('class', 'draggable_button');
                element.style.cursor = "move";
                setResizableArea(element);
                setContextMenu(element, {elementType:element.dataset.designType});
                    
                var child = element.children[0];
                if (child) {
                    $(child).change(function() {
                       var text = $(child).val();
                       setStyleOfElement(element, {text:specialCharsToHtml(text)});
                       codeEditor.generateByChangeParam([{name:element.dataset.designName,  parameter: "text", value: text}]);
                       activeElement.updateElementInBase();
                    });
                }
                //element.setAttribute('class', 'editable_text');               
                break;                          
            default:
                break;
	   }
	}
	
	function addElementToBase(element, data) {	    
	    var options = {};
        switch(element.dataset.designType) {
            case ELEMENT_TYPE_TEXT: options = optionsTextObject(element); break;
            case ELEMENT_TYPE_BUTTON: options = optionsButtonObject(element); break;
            case ELEMENT_TYPE_HTML: options = optionsHtmlObject(element); break;        
            case ELEMENT_TYPE_IMAGE: options = optionsImageObject(element); break;
            case ELEMENT_TYPE_MAP: options = optionsMapObject(element); break;
            case ELEMENT_TYPE_CLICKABLE_AREA: options = optionsClickableAreaObject(element); break;
            case ELEMENT_TYPE_TEXTEDIT: options = optionsTextEditObject(element); break;
            default: break;
        } 
        options = $.extend(true, options, data);
        
        if (options && element && element.dataset.designType) { 
            addObject(element, element.dataset.designType, options);
        }
	}
	
	function specialCharsToHtml(value) {
	    var retval = value;
	    if (retval) {
	       return retval.replace(/&amp;/g, "&").replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, "\"").replace(/&#039/g, "'").replace(/&#39;/g, "'").replace(/&#39/g, "'");
	    } else {
	        return "";
	    }
	}
	
/*	
function setResizableTextEdit(element) {
        $(element).resizable({
            helper: "ui-resizable-helper",
            start: function(event, ui) {
                //element.dataset.designEditActions = 0;
                //selectElement(ui.element[0], true);
                if (element.dataset.designAreaImage == "") {
                    element.dataset.designImageOriginalWidth = element.dataset.designWidth;
                    element.dataset.designImageOriginalHeight = element.dataset.designHeight;
                }
            },
            resize: function(event, ui) {
                //console.log(ui.element[0])
                //console.log(ui.size.width+" "+ui.size.height)
                var element = ui.element[0];
                var size = ui.size;
                if (parseInt(element.dataset.designProportionalImage)) {
                    size = calculateAspectRatioFit(element.dataset.designImageOriginalWidth, element.dataset.designImageOriginalHeight, ui.size.width, ui.size.height);
                }
                setStyleOfElement(element, { width: size.width, height: size.height });
                $('#width').val(parseInt(element.dataset.designWidth).toFixed(0));
                $('#height').val(parseInt(element.dataset.designHeight).toFixed(0));    
                if (activeElement) {
                    activeElement.refresh();
                }
            },
            stop: function(event, ui) {
                var element = ui.element[0];
                var size = ui.size;                        
                if (parseInt(element.dataset.designProportionalImage)) {
                    size = calculateAspectRatioFit(element.dataset.designImageOriginalWidth, element.dataset.designImageOriginalHeight, ui.size.width, ui.size.height);
                }      
                setStyleOfElement(element, { width: size.width, height: size.height });
                //element.dataset.designEditActions = 0;
                ///selectElement(element, true);
                activeElement.updateElementInBase();
            }                    
        });    
    }*/	
	
	function setResizableArea(element) {
        $(element).resizable({
            helper: "ui-resizable-helper",            //handles: "all",
            start: function(event, ui) {
                //element.dataset.designEditActions = 0;
                //selectElement(ui.element[0], true);
                if (element.dataset.designAreaImage == "") {
                    element.dataset.designImageOriginalWidth = element.dataset.designWidth;
                    element.dataset.designImageOriginalHeight = element.dataset.designHeight;
                }
            },
            resize: function(event, ui) {
                //console.log(ui.element[0])
                //console.log(ui.size.width+" "+ui.size.height)
                var element = ui.element[0];
                var size = ui.size;
                if (parseInt(element.dataset.designProportionalImage)) {
                    size = calculateAspectRatioFit(element.dataset.designImageOriginalWidth, element.dataset.designImageOriginalHeight, ui.size.width, ui.size.height);
                }
                setStyleOfElement(element, { width: size.width, height: size.height });
                $('#width').val(parseInt(element.dataset.designWidth).toFixed(0));
                $('#height').val(parseInt(element.dataset.designHeight).toFixed(0));    
                if (activeElement) {
                    activeElement.refresh();
                }
            },
            stop: function(event, ui) {
                var element = ui.element[0];
                var size = ui.size;                        
                if (parseInt(element.dataset.designProportionalImage)) {
                    size = calculateAspectRatioFit(element.dataset.designImageOriginalWidth, element.dataset.designImageOriginalHeight, ui.size.width, ui.size.height);
                }      
                setStyleOfElement(element, { width: size.width, height: size.height });
                //element.dataset.designEditActions = 0;
                ///selectElement(element, true);
                codeEditor.generateByChangeParam([                        
                    {name:this.dataset.designName,  parameter: "height", value: size.height},
                    {name:this.dataset.designName,  parameter: "width", value: size.width}
                ]);                    
                activeElement.updateElementInBase();
            }                    
        });    
	}
	
	
    function setContextMenu(element, options) {  // options.elementType

        var contextMenuObject = [            
            {"Go to definition": {
                onclick:function(menuItem, menu) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                    
                    codeEditor.jumpToLineForObjectName(element.dataset.designName);
                },
                icon: '/gamedesigner/media/js/contextmenu/css/yellow-arrow.gif',
                disabled: false 
            }},
            //$.contextMenu.separator,
            {"Delete":{
                onclick:function(menuItem,menu) {
                    var isFind = false;
                    EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}                                                             
                    callbackPropertyDeleteElement(); 
                },
                icon:'/gamedesigner/media/js/contextmenu/css/delete_icon.gif',
                disabled:false
            }}
        ];        
        $(element).contextMenu(contextMenuObject, {theme:'vista'});        
    }

	function setTextDraggable() {
		$( ".editable_text" ).mousedown(function() {
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_SELECT_ELEMENT_ON_CANVAS, {text: $(this)[0].dataset.designName}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}            

            this.dataset.designEditActions = 1;
            if ($(this)[0] != activeElement.elementSelected) {      
               selectElement(this,true,true);   
            }
            //Move to front
            while( $(this).next()[0] ) { 
                $($(this)).insertAfter($(this).next());
            } 		    
		}).draggable({
		      snap: "."+grid.getLineClass(),
			  revert: function(){
				  return revert;
			  }	,
			  revertTime: 0,
			  stop: function( event, ui ) {
				  var x = $(this).offset().left - canvas.workspaceX;
			      var y = $(this).offset().top - canvas.workspaceY;

                  var offsetTizen = 0;
                  if (isTizen && canvas.isPortrait) {
                    offsetTizen = tizenNavigationBar;   
                  }               
                  y += offsetTizen;

                  console.log("setTextDraggable:stop");
			      console.log("x: " + x + " y: " + y);
			      this.dataset.designEditActions = 0;
			      activeElement.refresh();
			      activeElement.show(true);
			      
			      if(!revert){	          
			      	setStyleOfElement(this, { x_pos: x, y_pos: y });
                    selectElement(this);
                    activeElement.updateElementInBase();
			      }
			  },
			  drag: function( event, ui ) {			      
		      
                  if (canvas.isContainsRect($(this).offset().left, $(this).offset().top, this.offsetWidth, this.offsetHeight)) {
                      activeElement.show(true);
                      activeElement.refresh();                       
                      revert = false;
                  } else {
                      activeElement.show(false);
                      revert = true;
                  } 
			  },
			  start: function( event, ui ){
                  //activeElement.setActiveForElement($(this)[0]);
                 // console.log($(this).parent());
                  //$( ".editable_text" ).after($(this));
			  }
			});
	}

	function setButtonsDraggable(){
		$( ".draggable_button" ).mousedown(function() {		    
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_SELECT_ELEMENT_ON_CANVAS, {text: $(this)[0].dataset.designName}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}            
		    		    		
		    this.dataset.designEditActions = 1;
		    if ($(this)[0] != activeElement.elementSelected) {	    
		       selectElement(this,true,true);   
		    }
		}).draggable({
              snap: "."+grid.getLineClass(),
			  revert: function(){
			      
				  return revert;
			  }	,
			  revertTime: 0,
			  start: function( event, ui) {
			      this.dataset.designEditActions = 0;
			      //activeElement.setActiveForElement($(this)[0]);
			  },
			  stop: function( event, ui ) {
				  var x = $(this).offset().left - canvas.workspaceX;
			      var y = $(this).offset().top - canvas.workspaceY;
			      
			      var offsetTizen = 0;
                  if (isTizen && canvas.isPortrait) {
                    offsetTizen = tizenNavigationBar;   
                  }			      
			      y += offsetTizen;
			      
                  setStyleOfElement(this, { x_pos: x, y_pos: y });
                  
                  this.dataset.designEditActions = 0;
                  activeElement.refresh();	
                  activeElement.show(true);

			      if(!revert){			      	
			          
                    /*var propertyX = properties.getPropertyForId("x_pos");
                      var propertyY = properties.getPropertyForId("y_pos");
                    
                    if (propertyX && propertyY) {
                        tryChangeParamsActiveObject("x_pos", propertyX, x);
                    }*/
                      			          
			          
			      	this.dataset.designXPos = x;
			      	this.dataset.designYPos = y;			      	
                    selectElement(this);
                    codeEditor.generateByChangeParam([                        
                        {name:this.dataset.designName,  parameter: "y", value: y},
                        {name:this.dataset.designName,  parameter: "x", value: x}
                    ]);                    
                    activeElement.updateElementInBase();
			      } else {
			      	console.log("Reverting, come back on initial position" + this);
			      }
			  },
			  drag: function( event, ui ) {
                       
			      if (canvas.isContainsRect($(this).offset().left, $(this).offset().top, this.offsetWidth, this.offsetHeight)) {
                      activeElement.show(true);
			          activeElement.refresh(); 
			    	  revert = false;
			      } else {
			          activeElement.show(false);
			    	  revert = true;
			      }	
			  }
		});
	}
	
	function setMapClickable() {
	    $( ".clickable_map" ).click(function() {
	        selectElement(this,true);
	    });
	}
	
function setCanvasDroppable(){
    $( ".canvas" ).droppable({
        accept: ".menu_item",
        drop: function( event, ui ) {
            var type = "text";

            for(var i = 0; i<draggableItemsMenu.length; i++){

                if(ui.draggable[0] == draggableItemsMenu[i]){
                    type = draggableItemsMenu[i].id;
                    break;
                }
            }
            
            var isFind = false;
            EventsNotification.exe(SequencesSystemEvents.EVENT_DROP_ELEMENT_ON_CANVAS, {type: type}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
                        
            var newPosX = ui.offset.left - canvas.workspaceX;//$(this).offset().left;
            var newPosY = ui.offset.top - canvas.workspaceY;//$(this).offset().top;
            
            var offsetTizen = 0;
            if (isTizen && canvas.isPortrait) {
              offsetTizen = tizenNavigationBar;   
            }               
            newPosY += offsetTizen;            
            
            var absoluteX = ui.offset.left;
            var absoluteY = ui.offset.top;
            
            console.log("setCanvasDroppable");
            var nameElement = type;
            
            if (type == ELEMENT_TYPE_TEXT) {
                nameElement = "textfield";
            }
            createObjectOnCanvas(type, { // exe m.in. from definitions
                name: nameElement+"0", 
                x_pos: newPosX, 
                y_pos: newPosY, 
                visible: true,
                isUserCreated: true
            });
        }
    });
}	

function createObjectOnCanvas(type, options) {
    options.loaded = false;
    options.new_element = true;
    options.type = type;
    return addElementToCanvas(options);
}
	
	
////////////////////
// CONCEPTS



function Concepts(options) { 
    var that = this,
        conceptsData = [],
        showConceptLearnt = (options && options.showConceptLearnt!=undefined)?options.showConceptLearnt:true,
        events = (options && options.events)?options.events:{}; // type: "close_concept_dialog"
        
    this.addEventListener = function(type, listener) {
        if (typeof events !== "object") {
            events = {};
        }
        if (typeof listener === "function") {
            events[type] = listener;
        }
    }        
        
    this.loadFromBase = function(lesson_id, callbackLoaded, callbackNotLoaded) {
        AjaxTutorial.ajaxGetConceptions({
            data: {
                lesson_id: lesson_id
            },
            success: function(resultJSON) {
                var objJSON = JSON.parse(resultJSON);
                conceptsData = objJSON.concepts;     
                callbackLoaded();           
            }, 
            error: function() {
                callbackNotLoaded();
            }
        });
    }

    this.showConcept = function() {      
        function clickConceptDialogOK() {
            if (events && events.close_concept_dialog && typeof events.close_concept_dialog === "function" ) {
                events.close_concept_dialog();
            }                       
        }                      
        if (showConceptLearnt && conceptsData && conceptsData.length > 0) {   
            var title = "";
            if (conceptsData.length == 1) {
                title += "New concept learnt in this lesson";
            } else if (conceptsData.length > 1) {
                title += "New concepts learnt in this lesson";
            }               
            var msgConcepts = new MessageDialog("conceptsDialog");
            msgConcepts.show(title, htmlConceptsList(), "OK", clickConceptDialogOK);
            msgConcepts.hideClose();
        } else {
            clickConceptDialogOK();
        }
    }
    
    var htmlConceptsList = function() {
        var result = "",
            templates = "<strong>%%TITLE%%</strong><br /><br />%%DESCRIPTION%%<br /><hr>";
               
        for(var i = 0; i < conceptsData.length; i++) {
            var data = conceptsData[i],
                copyTemp = templates;             
            copyTemp = copyTemp.replace("%%TITLE%%", Convert.specialCharsToHtml(data.title)); // data.content.title
            copyTemp = copyTemp.replace("%%DESCRIPTION%%", Convert.specialCharsToHtml(data.description)); //data.content.description
            result += copyTemp;
        }
        return result;
    }
    

}﻿
var TipsFactory = { 
    generalTipOptions: {
        target: true,
        tipJoint: "top",      
        group: "lesson", 
        title: ""
    },    
    defaultTipOptions: {
        target: true,
        tipJoint: "top",
        background: "#ffffff",
        borderColor: "#000000", 
        borderWidth: 3, 
        hideTrigger: "closeButton",
        closeButtonLinkOverscan: 5,//0, 
        closeButtonCrossSize: 5, //0, 
        closeButtonCrossColor: "#000000", 
        closeButtonRadius: 8,//5,           
        group: "lesson", 
        showOn: null,
        stemLength: 12,
        stemBase: 14,
        containInViewport: false,
        title: ""
        //closeButtonOffset: [ 5, 5],
    },
    defaultTipData: {
        text: "",
        text2: "",
        hasPosition: false,
        position: {x: 0, y: 0},
        mp3: "",
        mp3Type: 0,   // 0 - none,  1 - microphone,  2 - file,  3 - empty sound (only writing)
        video: "",
        image: "",
        idNext: "id_tip_default_next_"+Generate.randomCharacters(16),
        nextHtml: "Next >>",
        playHtml: "",
        isShadowBackground: false,
        isNextEnabled: true,
        idMp3: "id_tip_default_play_"+Generate.randomCharacters(16), // id to click in button mp3                
        idPrefixText: "id_tip_default_prefixText_"+Generate.randomCharacters(16), // id to click in button mp3                
        autoNext: false, // this data is added: auto set next tip, after execute action
        
        codeOperationsRecordings: [],
        completionConditionParams: {
            type: "",
            id: "", 
            text:"",
            board: "",  // [board.Code, Board.Definitions, Main.Code] etc
            actionType: ""
        },
        completionConditionType: "",     
    },
    createCustomTip: function(triggerElement, settings, data) {
        // set before create instance
        if (data.hasPosition) {
            triggerElement = "#target_top_left";
            settings.stemLength = 0;
            settings.stemBase = 0;
        } else {
            settings.stemLength = TipsFactory.defaultTipOptions.stemLength;
            settings.stemBase = TipsFactory.defaultTipOptions.stemBase;
        }
        
        if (data.position) {
            if (!data.position.x || isNaN(data.position.x)) {
                data.position.x = 0;
            }
            if (!data.position.y || isNaN(data.position.y)) {
                data.position.y = 0;
            }        
            data.position.x = parseInt(data.position.x);
            data.position.y = parseInt(data.position.y);
            settings.offset = [ data.position.x, data.position.y];
        }
           
        // create instance
        var ot = new Opentip(triggerElement, settings),
            contentTip = '<div>';
            
        /*if (data.idPrefixText) {
            contentTip += '<span id="'+data.idPrefixText+'"></span> ';            
        }*/
                   
        if (data.text) {
            contentTip += data.text;
        }
        if (data.image) {
            contentTip += '<p style="margin-top:16px"><img id="" src="/gamedesigner/media/upload/tutorial/'+lessonId+'/'+data.image+'" style="padding: 6px;height: 100px;"></p>';
        }              
        if (data.video) {
            contentTip += '<p style="margin-top:16px;height:180px;"><video controls autoplay><source src="/gamedesigner/media/upload/tutorial/'+lessonId+'/'+data.video+'" type="video/mp4">Your browser does not support HTML5 video.</video></p>';
        }              
        if (data.text2) {
            contentTip += data.text2;
        }                
        if (data.playHtml && (data.mp3 || data.codeOperationsRecordings.length > 0)) {
            contentTip += '<p><div id="'+data.idMp3+'" class="ot-button">'+data.playHtml+'</div></p>';
        }
        if (data.nextHtml) {
            contentTip += '<p><div id="'+data.idNext+'" class="ot-button">'+data.nextHtml+'</div></p>';
        }
       
        contentTip += "</div>";
        ot.setContent(contentTip);
                               
        return ot;
    }
}


var SequencesTips = function(options) {

	if (!(this instanceof SequencesTips)) {
		return new this;
	}

	var that = this,
		name = "sequences_tips"+(new Date()).getTime(),
		tips = [],  // array of object  {tip: instance openTip, data: { idNext: "string" }}
		currentTip = 0,
		uniqueId = 0,
		tmpSound = null,
		isPlay = false,
		textDynamic = "",
		events = (options && options.events)?options.events:{}; // "tips_start"|"tips_next"|"tips_end"
	
	/*if (options) {
		if (options.group) {
			defaultTipOptions.group = options.group;
		}
	}*/
	
    var idLayerShadow = "layer_shadow";
    //$("#"+idLayerShadow).click(function() {
    //    that.stop();
    //});
    
    /*this.getDefaultTipOptions = function() {
        return $.extend(true,{},defaultTipOptions);
    }
    
    this.getDefaultTipData = function() {
        return $.extend(true,{},defaultTipData);
    } */   
    	    
    that.addEventListener = function(type, listener) {
        if (events && typeof listener === "function") {
            events[type] = listener;
        }
    }
    
    that.toJSON = function() {
       return JSON.strinify(tips);
    }
    
    that.fromJSON = function(JSON) {
       var objJSON = JSON.parse(JSON);
       if (objJSON) {
           that.fromObj(objJSON);
       }
    }    
    
    that.fromObj = function(obj, countBubblesOfLesson) {
       if (obj) {
          that.removeTips();
          for (var i=0; i < obj.length; i++) {
            obj[i].content = $.extend(true,{}, obj[i].content, { 
                bubble_id: obj[i].id, 
                order: obj[i].order, 
                bubbleType: obj[i].bubbleType,
                countBubble: countBubblesOfLesson,
                operation: "new"  // "new"|"refresh"
            });
            that.addTip(obj[i].content.trigger, obj[i].content );           
          }
       }
    }       
    
    // @options.tipOptions.target  -  default true (set tip with 1 parameter - triggerElement)
    // @options.tipOptions.title  - title tip 
    // @options.tipOptions.tipJoint - location joint (bottom right left top , can join: "bottom right")
    // my @options 
    // @options.tipData.text  - text (tip content)
    // @options.tipData.text2  - text (tip content2)
    // @options.tipData.nextHtml - set text of Button Next
    
    // @options.tipData.mp3 - filename mp3
    // @options.tipData.video - filename video 
    // @options.tipData.image - filename image
    // @index when put tip,  if undefined then put at the end
	that.addTip = function(triggerElement, options, index) {  
		if (options) {		
			uniqueId++;	
			
			/*
            if (options.tipData.hasPosition) {
                options.tipOptions.stemLength = 0;
                options.tipOptions.stemBase = 0;
            }
            if (options.tipData.position && options.tipData.position.x != undefined && options.tipData.position.y != undefined) {
                options.tipOptions.offset = [ options.tipData.position.x, options.tipData.position.y];
            }
            */
            if (options.operation == "new" && options.order != undefined && options.countBubble != undefined) { 
                options.countBubble = parseInt(options.countBubble);
                var titleWithStep = "("+(options.order+1)+"/"+options.countBubble+") "+options.tipOptions.title;
                options.tipOptions.title = titleWithStep;
            }
                          			
			var settings = $.extend({}, TipsFactory.defaultTipOptions, options.tipOptions),
			    tipData =  $.extend({}, TipsFactory.defaultTipData, options.tipData ),
				//ot = new Opentip(triggerElement, settings),				
				idNext = "ot_"+name+"_next_"+uniqueId,
				idMp3 = "ot_"+name+"_sound_"+uniqueId,
				idPrefixText = "ot_"+name+"_prefixText_"+uniqueId,
				contentTip = "";
			
			tipData.idNext = idNext;
            tipData.idMp3 = idMp3;
            tipData.idPrefixText = idPrefixText;
			
			var tip = {
			    trigger: triggerElement,
				//instance: ot,
				options: settings, // tipOptions extended
				data: tipData,
				bubble_id: options.bubble_id,
				order: options.order,
                bubbleType: options.bubbleType,
                countBubble: options.countBubble,
			};
			if (index != undefined && index < tips.length) {
			    tips.splice(index, 0, tip);
			} else { 
			    tips.push(tip); // put at the end
			}
		}
	}
	
	var removeTipAtIndex = function(index) {
	   if (index < tips.length) {
	       tips.splice(index, 1);
	   }
	}
	
	var refreshTip = function() {	    
	    if (currentTip < tips.length) {  
	        var tipData = tips[currentTip],
	            options = {
	                trigger: tipData.trigger,
	                bubble_id: tipData.bubble_id,
                    order: tipData.order,
                    bubbleType: tipData.bubbleType,
                    countBubble: tipData.countBubble,
                    tipOptions: tipData.options,
                    tipData: tipData.data,
                    operation: "refresh"
	            }
	        removeTipAtIndex(currentTip);
            that.addTip(options.trigger, options, currentTip );
	    }	    
	}

	var showTip = function() {
        if (currentTip < tips.length) {
            var tipData = tips[currentTip];
            if(tipData.instance) {
                tipData.instance.show();
            }            
            
            if (tipData.data.isShadowBackground) {
                that.showLayerShadow();
            } else {
                that.hideLayerShadow();
            }           
        }
	}
	
    var hideTip = function() {
        if (currentTip < tips.length) {
            var tipData = tips[currentTip];
            tipData.instance.show();
            that.setNextButtonEnabled(tipData.data.isNextEnabled);
            
            if (tipData.data.isShadowBackground) {
                that.showLayerShadow();
            } else {
                that.hideLayerShadow();
            }           
        }
    }	
    
    /*that.refreshTip = function() {
        hideTip();
        showTip();
    }*/
	
	that.setNextButtonEnabled = function(enabled) {
        if (currentTip < tips.length) {
            var tipData = tips[currentTip];  
            tipData.data.isNextEnabled = enabled;
            var $btn = $("#"+tipData.data.idNext);
            if (enabled) {
                $btn.removeClass("ot-btn_disabled");
                $btn.css("cursor","pointer");
            } else {
                $btn.addClass("ot-btn_disabled");
                $btn.css("cursor","not-allowed");
            }
        }   
	}
	
    that.setPlayButtonEnabled = function(enabled) {
        if (currentTip < tips.length) {
            var tipData = tips[currentTip];  
            var $btn = $("#"+tipData.data.idMp3);
            if (enabled) {
                $btn.removeClass("ot-btn_disabled");
                $btn.css("cursor","pointer");
            } else {
                $btn.addClass("ot-btn_disabled");
                $btn.css("cursor","not-allowed");
            }
        }   
    }	
    
    that.setPlayButtonName = function(name) {
        if (currentTip < tips.length) {
            var tipData = tips[currentTip]; 
            var $btn = $("#"+tipData.data.idMp3);
            $btn.text(name);
        }
    }    
	
	that.getCurrentTip = function() {
        if (currentTip < tips.length) {
            return  tips[currentTip];
        }  	    
	}
	
	/*that.start = function() {
		currentTip = 0;	
		showTip();
		eventTipsStart(); // exe event
	}*/
	

	
	that.nextTip = function() {
	    
	   textDynamic = "";
	   var uniqHelloWorld = "Hello world !"; 
	   if (isLessonHelloWorld()) {
    	   var lessonHello = codeEditor.manager.checkUniqueHelloWorldLesson(); 
    	   if (lessonHello && !lessonHello.success) {
    	       messageDialog.show("Info", lessonHello.message, "OK");
    	       return;
    	   } else {
    	       if (lessonHello.text != uniqHelloWorld) {
    	           textDynamic = "You did actually write \""+lessonHello.text+"\" text instead of \""+uniqHelloWorld+"\" but it's fine. Computer can display that as well.<br /><br />";
    	       }     	       
    	   }
	   }
	   
       function switchTip() {
           currentTip++;
            
           if (!adminEditor || (adminEditor && !adminEditor.startTutorial)) {
               AjaxTutorial.ajaxCompleteBubble({
                   data: {
                        user_id: userId,
                        bubble_id: tips[currentTip-1].bubble_id  // prev bubble
                   }, 
                   success: function() {
                   }
               });
           }
            
            if (currentTip < tips.length) {
               createTipsAndEvents();
               eventTipsNext(); // exe event
            } else {
                tips[tips.length-1].instance.hide();
                that.hideLayerShadow();
                eventTipsEnd(); // exe event            
            }     
       }
	   
	   
        if (isLessonHelloWorldRun()) {
            that.setNextButtonEnabled(false);
            var animClick = new AnimClick();
            animClick.start("dialog_code_editor_compile", switchTip);
        } else {
            switchTip();
        }
	    
	}
	
	
    that.tryAutoNextTip = function() {
        if (currentTip < tips.length ) {
            if (tips[currentTip].data.autoNext) {
                that.nextTip();    
            }
        } 
    }	
		
	that.join = function() {
		createTipsAndEvents();
        /*if (tips.length > 0) {
            var tipData = tips[0];
            tipData.instance.hide();
        }   
        that.hideLayerShadow();*/
	}
	
	var createTipsAndEvents = function() {
	    
	    function createTipsAndEventsTimer() {	    
    		if (currentTip < tips.length) {
    			var tipData = tips[currentTip],
    			    $nextBtn = null;
    			        			        			
                codeEditor.setReadOnlyForAllFile(false); // default set allow to writing in code mirror
                

                if (tipData.bubbleType) {
                    
                    tipData.data.text = textDynamic+tipData.data.text;
                    
                    if (tipData.trigger == "dialog_code_editor_compile") {
                          codeEditor.openEditor();
                    }
                    
                    if (tipData.bubbleType == BubbleTypeList.emulator_normal ||
                        tipData.bubbleType == BubbleTypeList.emulator_fixed) {
                        
                        codeEditor.startCompile();
                    
                    } else if (tipData.bubbleType == BubbleTypeList.code) {
                        codeEditor.openEditor();                                        
    
                        if (tipData.data.completionConditionType == SequencesSystemEvents.EVENT_WRITE_CODE &&
                            tipData.data.idPrefixText) { // after show tip, add dynamical content
    
                            codeEditor.setReadOnlyForAllFile(true);
    
                            var filename = tipData.data.completionConditionParams.board,
                                indexSearched = codeEditor.indexTabOfBoardName(filename);
                                indexNowOpened = codeEditor.getActiveTab();
                                //tabData = codeEditor.getTabDataByTabIndex(indexNowOpened);
                               
                            codeEditor.setReadOnlyForFile(filename, false);
                         
                            if (indexSearched != indexNowOpened) {                        
                                tipData.data.text = "<span class='tip_highlight'>Switch to "+tipData.data.completionConditionParams.board+".</span><br /><br />"+textDynamic+tipData.data.text;                    
                                refreshTip();
                                tipData = tips[currentTip];
                            }
                        } else if (tipData.data.completionConditionType == "") {
                            if (tipData.data.codeOperationsRecordings.length == 0) {
                                tipData.data.isNextEnabled = true;
                            }
                        }
                    }
                } 
                
                // tipData.data.text
                
                function showTipAfterInitialize() {
                    tipData.instance = TipsFactory.createCustomTip("#"+tipData.trigger, tipData.options, tipData.data);                             
                    showTip();          
                    that.setNextButtonEnabled(tipData.data.isNextEnabled);  
                    codeEditor.clearSnapshot();
                                                
                    $("#"+tipData.data.idNext).corner("");             
                    $(".ot-close").click(function() {
                       function callbackYes() {                           
                           if (isContinueTutorial) {
                               window.location.assign('/gamedesigner/lessons/');
                           }
                           that.stop();
                           eventTipsClose();                           
                       }    
                       if (adminEditor) { 
                           adminEditor.stopTutorial();
                       } else {
                           messageDialog.showWithTwoButtons("Closing tutorial", "Do you want to quit lesson and return to the list of lessons?","Yes","No", callbackYes);    
                       }
                                          
                    });             
                    
                    console.log("show "+currentTip+" (name:"+name+") ");
                    
                    $nextBtn = $("#"+tipData.data.idNext);
                    $nextBtn.corner();
                    $nextBtn.click(function(){
                        if (tipData.data.isNextEnabled) {
                            that.nextTip();
                        }
                    });
                    
                    $soundBtn = $("#"+tipData.data.idMp3);
                    $soundBtn.corner(""); 
                    
                    function startAutowritingWithoutSound() {
                        that.setPlayButtonEnabled(true);
                        if (!isPlay) {
                            that.setNextButtonEnabled(false);                        
                            that.setPlayButtonName("STOP");
                            isPlay = true;
        
                            codeEditor.receiveFromSnapshotCode();                        
                            codeEditor.writeInActiveCodeMirror(tipData.data.codeOperationsRecordings, null,  null, function(){
                                // stop
                                that.setPlayButtonName(tipData.data.playHtml);
                                that.setNextButtonEnabled(true);
                                codeEditor.setBlockedClosedForAllFile(false);
                                isPlay = false; 
                            }, {isSound:false});
                        } else {
                            that.setPlayButtonName(tipData.data.playHtml);
                            codeEditor.stopWriteInActiveCodeMirror();
                            that.setNextButtonEnabled(false);
                            codeEditor.receiveFromSnapshotCode();
                            isPlay = false;
                        }
                    }
                        
                    function startAutowritingWithSound(){
                        if (!isPlay) {
                             that.setPlayButtonEnabled(false);
                             $soundBtn.unbind("click", startAutowritingWithSound);
                             tmpSound = new Sound("/gamedesigner/media/upload/tutorial/"+lessonId+"/"+tipData.data.mp3, function() {
                                // play sound 
                                var soundInstance = this;                        
                                soundInstance.play();
                                //soundInstance.set('volume', 0.1);
                                //var duration = soundInstance.get('duration');
                                    
                                that.setNextButtonEnabled(false);
                                that.setPlayButtonEnabled(true);
                                that.setPlayButtonName("STOP");
                                $soundBtn.bind("click", startAutowritingWithSound);                        
                                isPlay = true;
                                codeEditor.receiveFromSnapshotCode();
                                codeEditor.writeInActiveCodeMirror(tipData.data.codeOperationsRecordings, function(){ // run
                                    soundInstance.play();    
                                }, function() { // pause from autowriting
                                    soundInstance.pause();
                                });
                            }, function(){ // stop sound
                                that.setPlayButtonEnabled(true);
                                that.setNextButtonEnabled(true);
                                codeEditor.setBlockedClosedForAllFile(false);
                                that.setPlayButtonName(tipData.data.playHtml);
                                isPlay = false;
                            });                 
                        } else {
                            that.setPlayButtonName(tipData.data.playHtml);
                            //$soundBtn.bind("click", startAutowritingWithSound);
                            codeEditor.stopWriteInActiveCodeMirror();
                            tmpSound.stop();
                            
                            codeEditor.receiveFromSnapshotCode();
                            isPlay = false;
                        }
                    }                       
                    
                    if (tipData.data.mp3Type && (tipData.data.mp3Type == 0 || tipData.data.mp3Type == 3)) {  
                        $soundBtn.bind("click", startAutowritingWithoutSound);
                    } else {
                        $soundBtn.bind("click", startAutowritingWithSound);
                    }                    
                }
                window.setTimeout(showTipAfterInitialize, 150);
    		}
		}
		window.setTimeout(createTipsAndEventsTimer, 100);
	}	
	
	that.stop = function() {
		for(var i=0; i < tips.length; i++) {
			tips[i].instance.hide();
		}
		that.hideLayerShadow();
	}	

	that.removeTips = function() {		
		that.stop();
		tips.length = 0;
	}
	

    that.showLayerShadow = function() {        
        $("#"+idLayerShadow).show(); //.css({"display":"block"});
    }
    
    that.hideLayerShadow = function() {
        $("#"+idLayerShadow).hide(); //("display","none");
    }
    
    that.countTips = function() {
        return tips.length;
    }
        
    var eventTipsStart = function() {
        if (events && typeof events.tips_start === "function") {
            events.tips_start();
        }
    }
    
    var eventTipsNext = function() {
        if (events && typeof events.tips_next === "function") {
            events.tips_next();
        }
    }
    
    var eventTipsClose = function() {
        if (events && typeof events.tips_close === "function") {
            events.tips_close();
        }
    }    
    
    var eventTipsEnd = function() {
        if (events && typeof events.tips_end === "function") {
            events.tips_end();
        }
    }
    
		
}	
	
 ////////////////////
// SEQUENCES SYSTEM

var SequencesSystemEvents = {
    EVENT_DROP_ELEMENT_ON_CANVAS: "drop_element_on_canvas",// params: {type: STRING}
    EVENT_CLICK_ELEMENT: "click_element",  // params: {id: STRING}
    EVENT_ADD_ACTION: "add_action",  // params: {actionType: STRING}
    EVENT_REMOVE_ACTION: "remove_action",  // params: {actionType: STRING}
    EVENT_CHANGE_PROPERTY: "change_property", // params: {id: STRING}
    EVENT_CHANGE_ELEMENT_TEXT: "change_element_text",  // params: {text: STRING}
    EVENT_SELECT_ELEMENT_ON_CANVAS: "select_element_on_canvas",  // params: {text: STRING}
    EVENT_WRITE_CODE: "write_code",  // params: {textarea: STRING}
    EVENT_CHANGE_BOARD: "change_board",  // params: {text: STRING}
}


function SequencesSystem(options) { 
    var that = this;
    that.bubbles = new SequencesTips();
    var sequenceActive = false, // if sequence is active
        concepts = new Concepts({
            showConceptLearnt: false,
            events: {
                close_concept_dialog: function() {
                    window.setTimeout(function() {messageLessonEnd();}, 500);                    
                }
            }
        }),
        events = (options && options.events)?options.events:{}; // 

    // REGISTER EVENTS
    EventsNotification.registry(SequencesSystemEvents.EVENT_DROP_ELEMENT_ON_CANVAS, function(params) { 
        if (!sequenceActive) {return true;}                
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_DROP_ELEMENT_ON_CANVAS && 
            condition.params.type == params.type && !condition.params.completed) { 
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;            
    });
    EventsNotification.registry(SequencesSystemEvents.EVENT_CHANGE_ELEMENT_TEXT, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_CHANGE_ELEMENT_TEXT && 
            (condition.params.text == params.text || condition.params.text == "") && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });
    EventsNotification.registry(SequencesSystemEvents.EVENT_ADD_ACTION, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_ADD_ACTION && 
            condition.params.actionType == params.actionType && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });
    EventsNotification.registry(SequencesSystemEvents.EVENT_REMOVE_ACTION, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_REMOVE_ACTION && 
            condition.params.actionType == params.actionType && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });    
    EventsNotification.registry(SequencesSystemEvents.EVENT_CHANGE_PROPERTY, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_CHANGE_PROPERTY && 
            condition.params.id == params.id && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });
    EventsNotification.registry(SequencesSystemEvents.EVENT_CLICK_ELEMENT, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_CLICK_ELEMENT && 
            condition.params.id == params.id && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });    
    EventsNotification.registry(SequencesSystemEvents.EVENT_SELECT_ELEMENT_ON_CANVAS, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_SELECT_ELEMENT_ON_CANVAS && 
            condition.params.text == params.text && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });  
    EventsNotification.registry(SequencesSystemEvents.EVENT_WRITE_CODE, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_WRITE_CODE && !condition.params.completed) {
            
            var createdText = params.textarea,
                modelText = condition.params.textarea;
            if (createdText && modelText) {
                createdText = createdText.replace(/[\s]*/g,"");
                createdText = createdText.replace(/[\n]*/g,"");
                modelText = modelText.replace(/[\s]*/g,"");
                modelText = modelText.replace(/[\n]*/g,"");
                
                var arraySplit = createdText.split(modelText);            
                
                if (arraySplit.length > 1 && arraySplit[1] == "") {                
                    that.bubbles.setNextButtonEnabled(true);
                    //that.bubbles.tryAutoNextTip();               
                    return true;
                }
            }
        } 
        return false;                 
    });       
    EventsNotification.registry(SequencesSystemEvents.EVENT_CHANGE_BOARD, function(params) {
        if (!sequenceActive) {return true;}
        var condition = that.getConditionTypeCurrentBubble();          
        if (condition && condition.type == SequencesSystemEvents.EVENT_CHANGE_BOARD && 
            (condition.params.text == params.text || condition.params.text == "") && !condition.params.completed) {                
            that.bubbles.setNextButtonEnabled(true);
            that.bubbles.tryAutoNextTip();               
            return true;
        } 
        return false;                 
    });
    
    
    
    this.addEventListener = function(type, listener) {
        if (typeof events !== "object") {
            events = {};
        }
        if (typeof listener === "function") {
            events[type] = listener;
        }
    }
    
    this.on = function() {
        sequenceActive = true;
    }
    this.off = function() {
        sequenceActive = false;
    }
    this.isSequenceActive = function() {
        return sequenceActive;
    }    

    var messageLessonEnd = function() {           
        var id_next_lesson = undefined;
        var btnBackToCode = { 
            name: "Back to code", 
            callback: function() {
                messageDialog.close();
            } 
        };
        var btnBackToLessonList = { 
            name: "Back to lessons list", 
            callback: function() {
                messageDialog.close();
                application.backToPrevious();                 
            } 
        };   
        var btnGoToNextLesson = { 
            name: "Go to next lesson", 
            callback: function() {
                
                messageDialog.close();
                window.location.assign('/gamedesigner/startover/'+id_next_lesson+'/');
            } 
        };    
        
        var buttonsArray = [btnBackToCode, btnBackToLessonList];
        
        if (lessonId){
            AjaxTutorial.ajaxGetIdNextLesson({
                async: false,
                data: {
                    lesson_id: lessonId
                },
                success: function(result){
                    id_next_lesson = parseInt(result);
                    if (!isNaN(id_next_lesson) && id_next_lesson > 0) {                        
                        buttonsArray.push(btnGoToNextLesson);
                    }
                }
            });
        }        
                      
        messageDialog.showCustom("Lesson", "Lesson has been completed.  What do you want to do now?", buttonsArray);                 
    }
    
    
    
    
    this.loadTutorial = function(lessonId, callbackLoaded) {    
        that.bubbles = new SequencesTips({group: "lesson"}); //"lesson"+lessonId+"_"+Generate.randomCharacters(16)});  
           
           
        function failedLoadedBubble() {
            messageDialog.show("Cannot loaded bubbles.", "Come back to lessons list.", "OK", function(){
                application.backToPrevious();
            });
        }
       
        function startLessonOrFailed(resultJSON, countBubblesOfLesson) {
            resultJSON = Convert.specialCharsToHtml(resultJSON);
            var objJSON = JSON.parse(resultJSON),
                bubbles = objJSON.bubbles;
            //console.log(JSON.stringify(bubbles));
            if (bubbles && bubbles.length > 0) {                       
                that.bubbles.fromObj(bubbles, countBubblesOfLesson);
                that.bubbles.join();
                
                if (callbackLoaded && typeof callbackLoaded === "function") {
                    callbackLoaded();
                }                        
                
                that.bubbles.addEventListener("tips_end", function() {
                    that.bubbles.removeTips();
                    sequenceActive = false;
                    //messageLessonEnd();
                    concepts.showConcept();
                });
                
                that.bubbles.addEventListener("tips_close", function() {
                    that.bubbles.removeTips();
                    sequenceActive = false;
                    //that.loadBubbles();
                });   
            } else {
                //that.off();
                //messageLessonEnd();
                concepts.showConcept();
            }            
        }       
       
        var optionsBubble = { //ajaxGetBubblesUser   ajaxGetBubbles
            async: false,
            data: {
                lesson_id : lessonId,
                from_order : 0,
                user_id: userId
            },
            success: function(resultJSON) { 
                
                AjaxTutorial.ajaxCountBubbles({
                    async: false,
                    data: {
                        lesson_id: lessonId
                    },
                    success: function(countBubblesOfLesson) {
                        startLessonOrFailed(resultJSON, countBubblesOfLesson);
                        isSuccessLoadBubbles = true;
                    },
                    error: function() {
                        failedLoadedBubble();
                    }
                });
            },
            error: function() {
                failedLoadedBubble();
            }
        };
       
       
        function conceptLoaded() {
            if (adminEditor) {
                AjaxTutorial.ajaxGetBubbles(optionsBubble);
            } else {
                AjaxTutorial.ajaxGetBubblesUser(optionsBubble);
            }
        }
       
        concepts.loadFromBase(lessonId, conceptLoaded, function() {
            failedLoadedBubble();
        });           
      
        
    }   
    
    this.startBubbles = function() {
        if (!sequenceActive && that.bubbles && that.bubbles.countTips() > 0) {           
            //that.bubbles.start();
            sequenceActive = true;
        }   
    }    
    
    /*this.stopBubbles = function() {
        if (sequenceActive) {           
            that.bubbles.removeTips();
        }   
    } */   
    
    that.getConditionTypeCurrentBubble = function() {
        var currentTip = that.bubbles.getCurrentTip();
        if (currentTip && currentTip.data.completionConditionParams && currentTip.data.completionConditionType) {
                return {
                    type: currentTip.data.completionConditionType, 
                    params: currentTip.data.completionConditionParams,
                    completed: currentTip.data.isNextEnabled
                };
            }     
    }

}


/*
if(!seqList.tryEnter("open_emulator")){return;}
}
 */


////////////////////
// ADMINISTRATOR


var BubbleTypeList = {normal: "normal" , code: "code", fixed: "fixed", emulator_normal: "emulator_normal", emulator_fixed: "emulator_fixed"};

function AdministratorEditor() {
    var that = this,
        recordWriting = new RecordWriting(),
        isFirstOpen = true,
        tipInstance = null,
        lastId = "",
        modeEditor = "new",  // "edit"|"new"
        recorderStates = {recordSound: "recordSound", recordNoSound: "recordNoSound", stop: "stop"},
        recorderState = recorderStates.stop, 
        bubbles = [], // bubbles list to edit
        
        listIDs = ["target_top_left","actions", "actions_header", "actions_tree", "actions_tree_option1", "administrator_panel_id_point", "app_screen_background", "app_screen_background_button_dlg", "app_screen_background_parent", "app_screen_sounds", "app_screen_sounds_button_dlg", "app_screen_sounds_parent", "app_select_screen", "app_select_screen_parent", "background_image", "background_image_button_dlg", "background_image_parent", "button", "canvas", "canvas_overlay", "checkbox_drag_to_grid_text", "checkbox_show_grid_text", "clickable_area", "code_editor_close_console", "code_editor_close_outline", "code_editor_console", "code_editor_console_clear", "code_editor_open_outline", "code_editor_panel_console", "code_editor_panel_editor", "code_editor_panel_outline", "code_editor_tabs", "content", "content_ruler_horiz", "content_ruler_vert", "create_new_board", "delete_element", "delete_element_parent", "dialog_code_editor", "dialog_code_editor_open", "dialog_code_editor_run", "dialog_code_editor_compile", "dialog_code_editor_debug", "dialog_code_editor_next_step", "dialog_code_editor_stop_debug", "dialog_code_editor_close", "dialog_popups_open", "dialog_resources_open", "dialog_spreadsheets_open", "editor", "emulator_back", "elements_list", "explorer_object_tree_prefix2", "explorer_object_tree_prefix3", "explorer_object_tree_prefix4", "font_size", "font_size_parent", "font_type", "font_type_parent", "grid", "grid_size", "header", "header1", "header2", "height", "height_parent", "help_object_tree_prefix3", "id_explorer_panel_tree_object_tree", "id_help_panel_tree_object_tree", "logout_section", "menu", "menu_elements_list", "menu_elements_list_section", "menu_list_container", "menu_new_item", "menu_new_item_section", "menu_properties", "menu_properties_section", "name", "name_parent", "properties", "select_audio", "select_background", "select_screen", "tabs-editor-1", "text", "text_color_parent", "textedit", "top", "top_options", "ui-id-16", "ui-id-21", "ui-id-22", "visible_parent", "width", "width_parent", "x_pos", "x_pos_parent", "y_pos", "y_pos_parent"],
        tipJointList = ["top","right","bottom", "left", "top right", "bottom right", "top left", "bottom left"],
        conditionTypes = listObjectValues(SequencesSystemEvents),
        contidionParamsDropElement = listObjectValues(CanvasElements),
        contidionParamsActionParams = listObjectValues(ActionParams),        
        propertyOrder = null,
        propertyConditionType = null,
        propertyElementId = null,
        addBefore = false,
        wasModifiedBubble = false;//,
        //isWritingAtTheEnd = false;
          
    that.idAdministratorPanel = "administrator_panel";
    that.idAdministratorForm = "administrator_panel_form";
    that.idAdministratorIdPoint = "administrator_panel_id_point";
    that.idListLesson = "administrator_panel_lesson_list";
    that.urlPOST = "/gamedesigner/tutorial/post/";
   // that.urlPOST = "http://194.169.126.47/getimgsendmail/get_post.php";
    that.urlPlay = "/gamedesigner/media/upload/tutorial/";
    that.urlRecord = "http://194.169.126.47/gamedesigner_php/wami_recorder.php";
    that.runningTutorial = false,
    that.lessonId = 0,
    that.lessonOrder = 0;

    var bubbleObjDefault = {
        lesson_id: 1,
        order: 0,
        mp3_file_name: "",
        mp3_type: 0,   // 1 - is microphone record, 0 - file  
        video_file_name: "",
        image_file_name: "",
        content: {
            trigger: "target_top_left",
            bubbleType: BubbleTypeList.normal,  // value from 'BubbleTypeList'
            isWritingAtTheEnd: false
            /*tipOptions: {
                tipJoint: "top left",
                title: "",
            },
            tipData: {                 
                text: "",
                nextHtml: "Next >>",
                isNextEnabled: false,
                autoNext: true,                
                codeOperationsRecordings: [],
                completionConditionParams: { },
                completionConditionType: "",                
                mp3: "",
                mp3Type: "",   // 0 - none,  1 - microphone,  2 - file,  3 - empty sound (only writing)
                video: "",
                image: "",
                isShadowBackground: false,
                hasPosition: true,
                position: {x: 0, y: 0},
            } */           
        },
    }
    bubbleObjDefault.content.tipOptions = $.extend(true,{}, TipsFactory.generalTipOptions);//
    bubbleObjDefault.content.tipData = $.extend(true,{}, TipsFactory.defaultTipData);    
    var bubbleObj = $.extend({},bubbleObjDefault);
            
    //$("#"+that.idAdministratorIdPoint).css("display", "block");
    $("#"+that.idAdministratorIdPoint).css("display","none");
    
    $(document).mousemove(function( ev ) {        
        //$("#"+that.idAdministratorIdPoint).css({"left": (ev.pageX+10)+"px", "top": (ev.pageY+10)+"px"});
    });
    
    $(document).keypress(function(e) {
        if(e.keyCode  == 94 &&  // 94 == '^'
            (bubbleObj.content.bubbleType == BubbleTypeList.normal ||  bubbleObj.content.bubbleType == BubbleTypeList.emulator_normal)) { 
            if (lastId && propertyElementId) {
                propertyElementId.setValue(lastId);
                bubbleObj.content.trigger = lastId;   
                bubbleObj.content.tipData.completionConditionParams.id = lastId;
                refreshTip();
            }            
        }
    });
        
    
    setInterval(function() {
        $("*").mouseenter(function() {
           var newId = $(this)[0].id; 
           if (newId != "") {
               lastId = newId;
               if (!isExistStringInArray(newId, listIDs)) {
                  listIDs.push(newId);
                  listIDs.sort();
                  //console.log(listIDs);
               }
           }
           
           $("#"+that.idAdministratorIdPoint).html("<strong>ID:</strong>"+lastId+"<p style='font-size:10px;color:#000;'>Press <span style='font-size:16px;'><strong>^</strong></span> to select the element under the bubble</p>");           
        });    
    }, 3000);    
    
    
    that.show = function() {
        $("#"+that.idAdministratorPanel).show();        
        refreshLog();
        if (isFirstOpen) {
            init();
            isFirstOpen = false;    
        }
    }
    
    that.hide = function() {
        $("#"+that.idAdministratorPanel).hide();
        //isOpen = false;
    }
    
    that.isOpen = function() {
        var display = $( "#"+that.idAdministratorPanel ).css( "display" );
        return (display == "none")?false:true;
    }
        
    var guiWami = null,
        tmpSound = null;
    
    var setRecordUrl = function(filename) {
        if (guiWami) {
            guiWami.setRecordUrl(that.urlRecord+"?name="+filename+"&lesson_id="+that.lessonId);
        }        
    }
    var setPlayUrl = function(filename) {
        if (guiWami) {
            guiWami.setPlayUrl(that.urlPlay+that.lessonId+"/"+filename);
        }        
    }
       
    var setupGUI = function() {
        guiWami = new Wami.GUI({
            id : "wami",
            //recordUrl : that.urlRecord, //"https://wami-recorder.appspot.com/audio",
            //playUrl : that.urlPlay,
            startRecording: function() {
                bubbleObj.mp3_file_name = Generate.randomCharacters(16)+".wav"; 
                bubbleObj.content.tipData.mp3 = bubbleObj.mp3_file_name;           
                setPlayUrl(bubbleObj.mp3_file_name);
                setRecordUrl(bubbleObj.mp3_file_name);
            },
            stopRecording: function() {
                bubbleObj.mp3_type = 1; // microphone
                bubbleObj.content.tipData.mp3Type = 1; // microphone
                refreshLog();
            },
            onRecordFinish: function() { 
                setFilePreview("audio", bubbleObj.content.tipData.mp3);
            },
            onPlayFinish: function() {
                $("#admin_panel_keys_play").attr({"disabled": false});
                $("#admin_panel_keys_stop").attr({"disabled": true});                 
            }
        });
        guiWami.setPlayEnabled(false);
        $("#wami,#wami div,#wami div object").css({"width":"1px", "height":"1px"});

        // record keyboard        
        $("#admin_panel_record_section").append('<div id="admin_panel_keys_section" style="width: 255px; height: 158px; margin-top: 10px; border: 1px solid #000;background-color:#eeeebb;">Recorder:<br /> <input id="admin_panel_keys_record" type="button" value="Record with sound"> <input id="admin_panel_keys_record_without_sound" type="button" value="Record without sound"> <input id="admin_panel_keys_stop_record" type="button" value="Stop"> <br /> <input id="admin_panel_keys_record_at_the_end" class="gray" type="checkbox"><label for="admin_panel_keys_record_at_the_end" style="width: 250px;">Record at the end</label>  <hr /> Player: <br /><input id="admin_panel_keys_play" type="button" value="Play"> <input id="admin_panel_keys_stop" type="button" value="Stop"></div>');
        // admin_panel_keys_section
        //   admin_panel_keys_record, admin_panel_keys_record_without_sound, admin_panel_keys_stop_record
        //   admin_panel_keys_play, admin_panel_keys_stop
        $("#admin_panel_keys_stop_record").attr({"disabled": true});
        $("#admin_panel_keys_play").attr({"disabled": true});
        $("#admin_panel_keys_stop").attr({"disabled": true});
      
       
        $("#admin_panel_keys_record_at_the_end").change(function(){
            isWritingAtTheEnd = $(this).is(':checked');
            bubbleObj.content.isWritingAtTheEnd = isWritingAtTheEnd;
            wasModifiedBubble = true;
        });
       
        // record with sound
        var startRecordData = function() {
            bubbleObj.content.tipData.codeOperationsRecordings = [];
            recordWriting.reset();
            recordWriting.run();
                        
            codeEditor.doSnapshotCode();
            codeEditor.exeEventActiveTab({withoutCursor:false}); // exe event to record initial active tab
            codeEditor.setFocusOnEditor();
            
            //codeEditor.setEndLineForRecordingAllOpenedTabs();
            
            $("#admin_panel_keys_record").attr({"disabled": true});
            $("#admin_panel_keys_record_without_sound").attr({"disabled": true});
            $("#admin_panel_keys_stop_record").attr({"disabled": false});
            $("#admin_panel_keys_play").attr({"disabled": true});
            $("#admin_panel_keys_stop").attr({"disabled": true});
            wasModifiedBubble = true;
        }
        var stopRecordData = function() {
            recordWriting.stop();
            if (recorderState == recorderStates.recordNoSound) {
                recordWriting.removeTimeLastMsToFirstKey();
            }
            //codeEditor.removeEndLineForRecordingAllOpenedTabs();            
            bubbleObj.content.tipData.codeOperationsRecordings = recordWriting.getData();            
            recorderState = recorderStates.stop;             
            console.log(JSON.stringify(recordWriting.getData()));
            $("#admin_panel_keys_record").attr({"disabled": false});
            $("#admin_panel_keys_record_without_sound").attr({"disabled": false});
            $("#admin_panel_keys_stop_record").attr({"disabled": true});
            $("#admin_panel_keys_play").attr({"disabled": false});            
        } 
        $("#admin_panel_keys_record").click(function(){
            if (!bubbleObj.lesson_id) {
                alert("error: first set lesson id to record");
            } else {                
                startRecordData();                
                guiWami.startRec(); // add record sound 
                recorderState = recorderStates.recordSound;
            }
        });  
        $("#admin_panel_keys_record_without_sound").click(function(){
            if (!bubbleObj.lesson_id) {
                alert("error: first set lesson id to record");
            } else {
                recorderState = recorderStates.recordNoSound;
                startRecordData();
                bubbleObj.content.tipData.mp3 = "";
                bubbleObj.content.tipData.mp3Type = 3; // only writing without sound                
            }
        });
        $("#admin_panel_keys_stop_record").click(function(){ 
            if (recorderState == recorderStates.recordSound) {                
                guiWami.stopRec();
            }
            
            stopRecordData();
            refreshTip();            
        });  
        $("#admin_panel_keys_play").click(function(){
            setPlayUrl(bubbleObj.content.tipData.mp3); // for guiWami
            var isWaitingForSound = false;
            
            function beginWriting() {
                codeEditor.receiveFromSnapshotCode();
                
                var options = {};
                if (!bubbleObj.content.tipData.mp3) {
                    options.isSound = false;
                }                
                var dataKeys = $.extend(true, [], bubbleObj.content.tipData.codeOperationsRecordings);                
                codeEditor.writeInActiveCodeMirror(dataKeys, null, null,function(){
                    $("#admin_panel_keys_play").attr({"disabled": false});
                    $("#admin_panel_keys_stop").attr({"disabled": true}); 
                }, options);
                $("#admin_panel_keys_play").attr({"disabled": true});
                $("#admin_panel_keys_stop").attr({"disabled": false});
            }            
 
            if (bubbleObj.content.tipData.mp3) {
                isWaitingForSound = true;

                //guiWami.play(); 
                tmpSound = new Sound(that.urlPlay+that.lessonId+"/"+bubbleObj.content.tipData.mp3, function() {
                    var soundInstance = this;                        
                    soundInstance.play();
                    beginWriting();
                    
                }, function() { // stop
                    $("#admin_panel_keys_play").attr({"disabled": false});
                    $("#admin_panel_keys_stop").attr({"disabled": true});
                });
            }
            if (!isWaitingForSound) {
                beginWriting();
            }

        });  
        $("#admin_panel_keys_stop").click(function(){ // manual stop
            if (bubbleObj.content.tipData.mp3) {
                tmpSound.stop(); 
                //guiWami.stop();
            }
            codeEditor.receiveFromSnapshotCode();
            codeEditor.stopWriteInActiveCodeMirror();
            $("#admin_panel_keys_play").attr({"disabled": false});
            $("#admin_panel_keys_stop").attr({"disabled": true});  
        });            
    }       
    
    var setupRecorder = function() {
        Wami.setup({
            id : "wami",
            onReady : setupGUI
        });
    }          
    
    EventsNotification.registry("cursorActivity", function(params) {
        $.extend(true, params, {tabData: {writingEnd: bubbleObj.content.isWritingAtTheEnd}});
        recordWriting.addCursorPosition(params);
    }); 
    
    EventsNotification.registry("changeEditor", function(change) {
        recordWriting.addKey(change);
        
        console.log(change.text.join());
        console.log(change);
    });         
    
    EventsNotification.registry("selectionEditor", function(selection) {
        recordWriting.addSelection(selection);
        
        console.log(selection);
    });

    EventsNotification.registry("cmActiveTab", function(tabDataAll) {
        if (recordWriting.isRecording()) {
            var tabData = {
                name: tabDataAll.name,
                typeCode: tabDataAll.typeCode,
                withoutCursor: tabDataAll.withoutCursor
            }
            recordWriting.addChangeTab(tabData);
            var params = {pos: tabDataAll.cursorPos};
            params = $.extend(true, params, {tabData: tabData});
            params = $.extend(true, params, {tabData: {writingEnd: bubbleObj.content.isWritingAtTheEnd}});
            recordWriting.addCursorPosition(params); // extra cursor position
        }
    });
    
    this.isRecording = function() {
        return recordWriting.isRecording();
    }
    
    function jumpToRightTopCorner() {
        $(window).scrollLeft(1000);
        $(window).scrollTop(0);
        $("#administrator_panel").scrollTop(0); 
    }
                      
    var setDefaultForm = function() {            
        bubbleObj = $.extend(true,{},bubbleObjDefault);
        
        if (codeEditor.isOpen()) {
            bubbleObjDefault.content.bubbleType = BubbleTypeList.code;
        } else if (browserEmulator.isDisplayEmulator()) {
            bubbleObjDefault.content.bubbleType = BubbleTypeList.emulator_fixed;
        } else {
            bubbleObjDefault.content.bubbleType = BubbleTypeList.normal;
        }
        
        changeBubbleType({changeView:true, changeValues:true});                        
    }
    
    
    var setListConditionType = function() { 
        var tmpConditionTypes = [];
        if (bubbleObj.content.bubbleType == BubbleTypeList.code) {
            tmpConditionTypes = [SequencesSystemEvents.EVENT_WRITE_CODE];
        } else {
            tmpConditionTypes = $.extend(true, [], conditionTypes);
            removeObjectFromObjectsArray(SequencesSystemEvents.EVENT_WRITE_CODE, tmpConditionTypes);
        }        
        propertyConditionType.setOptionOfSelect(arrayWithFirstEmptyElement(tmpConditionTypes));  
    }
    
    var setListConditionParams = function(type) {
        if (type == SequencesSystemEvents.EVENT_DROP_ELEMENT_ON_CANVAS) {
            $("#admin_bubble_condition_param_drop_element_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_drop_element").val(bubbleObj.content.tipData.completionConditionParams.type);
        }   
        if (type == SequencesSystemEvents.EVENT_ADD_ACTION || type == SequencesSystemEvents.EVENT_REMOVE_ACTION) {
            $("#admin_bubble_condition_param_action_type_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_action_type").val(bubbleObj.content.tipData.completionConditionParams.actionType);
        }                         
        if (type == SequencesSystemEvents.EVENT_CHANGE_ELEMENT_TEXT || 
            type == SequencesSystemEvents.EVENT_SELECT_ELEMENT_ON_CANVAS) {
            $("#admin_bubble_condition_param_change_text_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_change_text").val(bubbleObj.content.tipData.completionConditionParams.text);
        }   
        if (type == SequencesSystemEvents.EVENT_CHANGE_PROPERTY) {
            $("#admin_bubble_condition_param_change_property_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_change_property").val(bubbleObj.content.tipData.completionConditionParams.id);
        }   
        if (type == SequencesSystemEvents.EVENT_CHANGE_BOARD) {
            $("#admin_bubble_condition_param_change_board_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_change_board").val(bubbleObj.content.tipData.completionConditionParams.text);
        }                   
        if (type == SequencesSystemEvents.EVENT_WRITE_CODE) {
            $("#admin_bubble_condition_param_change_code_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_write_code_parent").css({"display": "block"});
            $("#admin_bubble_condition_param_change_code").val(bubbleObj.content.tipData.completionConditionParams.board);
            $("#admin_bubble_condition_param_write_code").val(bubbleObj.content.tipData.completionConditionParams.textarea);
        }
    }
    
    
    var refreshForm = function() {            
         
        $("#admin_bubble_lesson_id").val(bubbleObj.lesson_id);
        $("#admin_bubble_order_title").val(parseInt(bubbleObj.order+1));
        $("#admin_bubble_order").val(parseInt(bubbleObj.order+1));
        //$("#admin_bubble_add_before").prop("checked", addBefore);
        $("#admin_bubble_bubble_type").val(bubbleObj.content.bubbleType);        
        $("#admin_bubble_tip_joint").val(bubbleObj.content.tipOptions.tipJoint);
        $("#admin_bubble_element_id").val(bubbleObj.content.trigger);
        $("#admin_bubble_offset_x").val(bubbleObj.content.tipData.position.x);
        $("#admin_bubble_offset_y").val(bubbleObj.content.tipData.position.y);
        //$("#admin_bubble_fixed_position").prop("checked", bubbleObj.content.tipData.hasPosition);
        $("#admin_bubble_title").val(bubbleObj.content.tipOptions.title);
        $("#admin_bubble_text").val(Convert.br2nl(bubbleObj.content.tipData.text));
        $("#admin_bubble_text2").val(Convert.br2nl(bubbleObj.content.tipData.text2));
        $("#admin_bubble_title_btn_next").val(bubbleObj.content.tipData.nextHtml);
        $("#admin_bubble_title_btn_play").val(bubbleObj.content.tipData.playHtml);
        //$("#admin_bubble_auto_next").prop("checked", bubbleObj.content.tipData.autoNext);
        setListConditionType();
        $("#admin_bubble_condition_type").val(bubbleObj.content.tipData.completionConditionType);
        if ($("#admin_panel_keys_record_at_the_end")[0]) {
            $("#admin_panel_keys_record_at_the_end")[0].checked = bubbleObj.content.isWritingAtTheEnd;
        }
        setListConditionParams(bubbleObj.content.tipData.completionConditionType);
        
        $("#mp3_file").val("");
        $("#video_file").val("");
        $("#image_file").val("");
                
        setFilePreview("audio", bubbleObj.content.tipData.mp3);
        setFilePreview("image", bubbleObj.content.tipData.image);
        setFilePreview("video", bubbleObj.content.tipData.video);
        
        refreshTip();
    }
    
    var changeBubbleType = function(options) {
        
        $("#editor").css({"display": "none"});
        browserEmulator.displayEmulator(false);                 
        codeEditor.closeEditor();        
        
        
        if (bubbleObj.content.bubbleType == BubbleTypeList.normal || bubbleObj.content.bubbleType == BubbleTypeList.emulator_normal) {  
            
            if (options && options.changeView) {                           
                $("#admin_bubble_tip_joint_parent").css("display","block");
                $("#admin_bubble_element_id_parent").css("display","block");
                $("#admin_bubble_offset_x_parent").css("display","none");
                $("#admin_bubble_offset_y_parent").css("display","none");
                //$("#admin_bubble_auto_next_parent").css("display","block");
                $("#admin_bubble_condition_type_parent").css("display","block");
                //$("#admin_panel_condition_params_parent").css("display","block");
                hideChildren("admin_panel_condition_params"); 
                setListConditionParams(bubbleObj.content.tipData.completionConditionType);
                
                if (bubbleObj.content.bubbleType == BubbleTypeList.emulator_normal) {
                    browserEmulator.displayEmulator(true); 
                } else if (bubbleObj.content.bubbleType == BubbleTypeList.normal) {
                    $("#editor").css({"display": "block"});                  
                }
                
                $("#"+that.idAdministratorIdPoint).css("display","block");
                //codeEditor.closeEditor();
            }  
                      
            if (options && options.changeValues) {                  
                bubbleObj.content.trigger = "";
                bubbleObj.content.tipOptions.tipJoint = "top";
                bubbleObj.content.tipData.hasPosition = false;
                bubbleObj.content.tipData.position.x = 0;
                bubbleObj.content.tipData.position.y = 0; 
                bubbleObj.content.tipData.autoNext = false;  //true;
                bubbleObj.content.tipData.isNextEnabled = true;
                bubbleObj.content.tipData.completionConditionType = "";   
            }
            
        } else if (bubbleObj.content.bubbleType == BubbleTypeList.code) {
            
            if (options && options.changeView) {
                $("#admin_bubble_tip_joint_parent").css("display","none");
                $("#admin_bubble_element_id_parent").css("display","none");
                $("#admin_bubble_offset_x_parent").css("display","none");
                $("#admin_bubble_offset_y_parent").css("display","none");
                //$("#admin_bubble_auto_next_parent").css("display","none");
                $("#admin_bubble_condition_type_parent").css("display","block");
                //$("#admin_panel_condition_params_parent").css("display","none");
                hideChildren("admin_panel_condition_params");
                
                $("#editor").css({"display": "block"});                
                codeEditor.openEditor();
                
                codeEditor.setDialogPosition();
                jumpToRightTopCorner();

                $("#"+that.idAdministratorIdPoint).css("display","none");

                // $("#dialog").dialog("widget").css({ top: -1000, left: -1000 });
            }            
            if (options && options.changeValues) { 
                bubbleObj.content.trigger = "target_top_left";
                bubbleObj.content.tipOptions.tipJoint = "top";
                bubbleObj.content.tipData.hasPosition = true;
                bubbleObj.content.tipData.position.x = 970;
                bubbleObj.content.tipData.position.y = 10;     
                bubbleObj.content.tipData.autoNext = false;
                bubbleObj.content.tipData.isNextEnabled = false;
                bubbleObj.content.tipData.completionConditionType = "";
            }
            
        } if (bubbleObj.content.bubbleType == BubbleTypeList.fixed || bubbleObj.content.bubbleType == BubbleTypeList.emulator_fixed) {
            
            if (options && options.changeView) {
                $("#admin_bubble_tip_joint_parent").css("display","none");
                $("#admin_bubble_element_id_parent").css("display","none");
                $("#admin_bubble_offset_x_parent").css("display","block");
                $("#admin_bubble_offset_y_parent").css("display","block");
                //$("#admin_bubble_auto_next_parent").css("display","block");
                $("#admin_bubble_condition_type_parent").css("display","block");
                //$("#admin_panel_condition_params_parent").css("display","block");
                hideChildren("admin_panel_condition_params"); 
                
                if (bubbleObj.content.bubbleType == BubbleTypeList.emulator_fixed) {
                    browserEmulator.displayEmulator(true); 
                } else if (bubbleObj.content.bubbleType == BubbleTypeList.fixed) {
                    $("#editor").css({"display": "block"});                  
                }                
                
                $("#"+that.idAdministratorIdPoint).css("display","none");
                //codeEditor.closeEditor();
            }          
            if (options && options.changeValues) {                
                bubbleObj.content.trigger = "target_top_left";
                bubbleObj.content.tipOptions.tipJoint = "top";
                bubbleObj.content.tipData.hasPosition = true;
                bubbleObj.content.tipData.position.x = 970;
                bubbleObj.content.tipData.position.y = 10; 
                bubbleObj.content.tipData.autoNext = false; // true
                bubbleObj.content.tipData.isNextEnabled = true;
                bubbleObj.content.tipData.completionConditionType = ""; 
            } 
        }
        
        refreshForm();
    }
    
    var changeLesson = function() {
        AjaxTutorial.ajaxGetBubbles({    
            async: false,
            data: {
                lesson_id : that.lessonId,
                from_order : 0,
            },
            success: function(resultJSON) {                
                resultJSON = Convert.specialCharsToHtml(resultJSON);
                var objJSON = JSON.parse(resultJSON);
                //console.log(JSON.stringify(bubbles));
                
                bubbles = objJSON.bubbles;    
                if (bubbles.length > 0) {            
                    var numeration = arrayWithNumeration(1, bubbles.length+1);                  
                    propertyOrder.setOptionOfSelect(numeration); 
                    $("#admin_bubble_edit_bubble_parent").css("display", "block");
                    $("#admin_bubble_create_new_bubble_parent").css("display", "block");
                    
                    setNewMode(); 
                    
                } else {
                    $("#admin_bubble_edit_bubble_parent").css("display", "none");
                    propertyOrder.setOptionOfSelect([]);
                    setNewMode();   
                }
                $("#admin_bubble_order_title").text(bubbles.length+1);
                
                
            }
        });
        refreshForm();
    }        
        
    var changeStep = function(step) {
        var order = step-1;
        bubbleObjDefault.order = order;  
        //addBefore = false; 
        
        bubbleObj = $.extend(true,{},bubbleObjDefault);
        if (!addBefore) {
            bubbleObj = $.extend(true,{},bubbles[order]);
        }
        bubbleObj.lesson_id = that.lessonId;   // bubbles[order].lesson; //TODO

        $("#admin_panel_keys_play").attr({"disabled": true});
        $("#admin_panel_keys_stop").attr({"disabled": true});                                   
        if ((bubbleObj.content.tipData.mp3 || bubbleObj.content.tipData.codeOperationsRecordings.length > 0) && !addBefore) {
            setPlayUrl(bubbleObj.content.tipData.mp3);
            $("#admin_panel_keys_play").attr({"disabled": false});
        } 
        
        refreshForm(); 
        changeBubbleType({changeView:true});     
    }      
    
    
    var setNewMode = function() {    
        modeEditor = "new";
        $("#admin_bubble_mode_editor").text("Create a new bubble at the end:");
        $("#admin_bubble_order_prefix").text("Step");                    
                    
        bubbleObjDefault.order =  bubbles.length;        
        addBefore = false;
        
        $("#admin_bubble_order_title_parent").css("display","block");
        $("#admin_bubble_order_title_parent").val((bubbleObjDefault.order+1));        
        $("#admin_bubble_order_parent").css("display","none"); 
        //$("#admin_bubble_add_before_parent").css("display","none");                 
        $("#remove_bubble_parent").css("display","none");        
        //$("#admin_bubble_add_before_title_parent").css("display","none");                        
        
        $("#admin_panel_keys_play").attr({"disabled": true});
        $("#admin_panel_keys_stop").attr({"disabled": true});
        
        if (bubbles.length > 0) {             
            $("#admin_bubble_edit_bubble_parent").css("display","block");
            $("#admin_bubble_create_new_bubble_before_parent").css("display","block");
        } else {
            $("#admin_bubble_edit_bubble_parent").css("display","none");
            $("#admin_bubble_create_new_bubble_before_parent").css("display","none");
        }
                           
        setDefaultForm();        
    }     
    
    var setEditMode = function(order, modeAddBefore) {
        modeEditor = "edit";
        
        bubbleObjDefault.order = order;
        addBefore = false;

        if (modeAddBefore) {
            addBefore = true;
            setDefaultForm();
            $("#admin_bubble_mode_editor").text("Create a new bubble before another:");
            $("#admin_bubble_order_prefix").text("before step");
            //$("#admin_bubble_add_before_title_parent").css("display","block");
            $("#admin_bubble_edit_bubble_parent").css("display","block");
        } else {
            $("#admin_bubble_mode_editor").text("Edit bubble:");
            $("#admin_bubble_order_prefix").text("Step");
            //$("#admin_bubble_add_before_title_parent").css("display","none");
            $("#admin_bubble_edit_bubble_parent").css("display","none");
        }
        
        $("#admin_bubble_order_parent").css("display","block"); 
        $("#admin_bubble_order_parent").val((bubbleObjDefault.order+1));
        $("#admin_bubble_order_title_parent").css("display","none"); 
        //$("#admin_bubble_add_before_parent").css("display","block"); 
        $("#remove_bubble_parent").css("display","block");

        changeStep(order+1);
    }    
    
    this.startTutorial = function() {
        removeTipPreview();
        that.runningTutorial = true;
        sequencesSystem.loadTutorial(that.lessonId, function() {
            sequencesSystem.startBubbles();
        });
        
        $("#admin_bubble_start_tutorial").css("display","none");
        $("#admin_bubble_stop_tutorial").css("display","block");
    }
  
    this.stopTutorial = function() {
        that.runningTutorial = false;
        sequencesSystem.off();
        //sequencesSystem.stopBubbles();
        deepRemoveTip();           

        $("#admin_bubble_start_tutorial").css("display","block");
        $("#admin_bubble_stop_tutorial").css("display","none");
    } 
    
    var init = function() {               
        //$("#"+that.idListLesson).
        var $list = $("#"+that.idListLesson);
        $list.html("");
                  
        var liClass = "conversation_property"; 
        var templateData = { widthAll: 370, leftWidth: 100 }   
        $list.css("width","320px");

        $list.append('<input id="admin_bubble_back_to_lessons_list" type="button" value="BACK TO LESSONS LIST"><br />');
        $list.append('<input id="admin_bubble_start_tutorial" type="button" value="START TUTORIAL"><br />');
        $list.append('<input id="admin_bubble_stop_tutorial" type="button" value="STOP TUTORIAL" style="display:none"><br />');
//        $list.append('');
//        $list.append('');
        //$list.append("<hr />");
        $("#admin_bubble_back_to_lessons_list").click(function() {
            function backToLessonsList() {
                window.location.assign("/gamedesigner/lessons/admin/");
            }
            if (wasModifiedBubble) {            
                messageCancelModifiedBubble(function(){
                    backToLessonsList()
                });            
            } else {
                backToLessonsList();
            }
        });
        $("#admin_bubble_start_tutorial").click(function() {
            that.startTutorial();
        });
        $("#admin_bubble_stop_tutorial").click(function() {
            that.stopTutorial();
        });
                           
        
        $list.append("<hr>");
        
        /*var propertyLesson = new Property("admin_bubble_lesson_id", PROPERTY_TYPE_SELECT, "Lesson Id","");
        propertyLesson.name = "lesson_id";
        propertyLesson.setClassName(liClass);
        propertyLesson.setTemplate(templateData.widthAll,templateData.leftWidth);
        getLessonIdList({
            async: false,
            url: that.urlPOST,
            success: function(resultJSON) {
                var objJSON = JSON.parse(resultJSON),
                    lessonsArray = objJSON.lessons;
                    result = [];
                    
                for (var i=0; i < lessonsArray.length; i++) {
                    var id = lessonsArray[i].id;
                    result.push(id);
                }
                propertyLesson.setOptionOfSelect(result);
                
                if (result.length == 0) {
                    $lessonSection.css("display","none");
                }

            }, 
            error: function() {
                
            }
        });
        $list.append(propertyLesson.getElement());
        //propertyLesson.setValue(1);
        propertyLesson.callbackChangeValue = callbackChangeProperty;
        propertyLesson.refreshActions();
        */
        
        propertyLessonOrderTitle = new Property("admin_bubble_lesson_order_title", PROPERTY_TYPE_TITLE, "Lesson","");
        propertyLessonOrderTitle.name = "";
        propertyLessonOrderTitle.setClassName(liClass);
        propertyLessonOrderTitle.setTemplate(templateData.widthAll,templateData.leftWidth); 
        $list.append(propertyLessonOrderTitle.getElement());
        $("#"+propertyLessonOrderTitle.id).text((that.lessonOrder+1));
        propertyLessonOrderTitle.callbackChangeValue = callbackChangeProperty;
        propertyLessonOrderTitle.refreshActions();              
        
        $list.append('<div id="administrator_panel_lesson_section"></div>');
        var $lessonSection = $("#administrator_panel_lesson_section");        
        
        var propertyCreateNewBubble = new Property("admin_bubble_create_new_bubble", PROPERTY_TYPE_BUTTON, "","");
        propertyCreateNewBubble.setClassName(liClass);
        propertyCreateNewBubble.setTemplate(templateData.widthAll,0);   
        $lessonSection.append(propertyCreateNewBubble.getElement());
        propertyCreateNewBubble.setValue("CREATE A NEW BUBBLE AT THE END");
        propertyCreateNewBubble.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertyCreateNewBubble.refreshActions();   

        var propertyCreateNewBubbleBefore = new Property("admin_bubble_create_new_bubble_before", PROPERTY_TYPE_BUTTON, "","");
        propertyCreateNewBubbleBefore.setClassName(liClass);
        propertyCreateNewBubbleBefore.setTemplate(templateData.widthAll, 0);   
        $lessonSection.append(propertyCreateNewBubbleBefore.getElement());
        propertyCreateNewBubbleBefore.setValue("CREATE A NEW BUBBLE BEFORE ANOTHER");
        propertyCreateNewBubbleBefore.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertyCreateNewBubbleBefore.refreshActions();   

         
        var propertyEditBubble = new Property("admin_bubble_edit_bubble", PROPERTY_TYPE_BUTTON, "","");
        propertyEditBubble.setClassName(liClass);
        propertyEditBubble.setTemplate(templateData.widthAll,0);   
        $lessonSection.append(propertyEditBubble.getElement());
        propertyEditBubble.setValue("EDIT BUBBLE");
        propertyEditBubble.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertyEditBubble.refreshActions();           
        
        $lessonSection.append("<hr>");
        $lessonSection.append('<p id="admin_bubble_mode_editor" style="color:#000;font-size:18px;"></p>');
  
        /*propertyModeEditorTitle = new Property("admin_bubble_mode_editor", PROPERTY_TYPE_TITLE, "Add before","");
        propertyAddBeforeTitle.name = "";
        propertyAddBeforeTitle.setClassName(liClass);
        propertyAddBeforeTitle.setTemplate(templateData.widthAll,0); 
        $lessonSection.append(propertyAddBeforeTitle.getElement());       
        */
       
       /* propertyAddBeforeTitle = new Property("admin_bubble_add_before_title", PROPERTY_TYPE_TITLE, "Add before","");
        propertyAddBeforeTitle.name = "";
        propertyAddBeforeTitle.setClassName(liClass);
        propertyAddBeforeTitle.setTemplate(templateData.widthAll,templateData.leftWidth); 
        $lessonSection.append(propertyAddBeforeTitle.getElement());
        */       
         
        propertyOrderTitle = new Property("admin_bubble_order_title", PROPERTY_TYPE_TITLE, "Step","");
        propertyOrderTitle.name = "";
        propertyOrderTitle.setClassName(liClass);
        propertyOrderTitle.setTemplate(templateData.widthAll,templateData.leftWidth); 
        $lessonSection.append(propertyOrderTitle.getElement());
        propertyOrderTitle.callbackChangeValue = callbackChangeProperty;
        propertyOrderTitle.refreshActions();
        
        propertyOrder = new Property("admin_bubble_order", PROPERTY_TYPE_SELECT, "Step","");
        propertyOrder.name = "";
        propertyOrder.setClassName(liClass);
        propertyOrder.setTemplate(templateData.widthAll,templateData.leftWidth); 
        $lessonSection.append(propertyOrder.getElement());
        propertyOrder.setNumeric(true, false);
        //propertyOrder.setValue(bubbleObj.order);
        propertyOrder.callbackChangeValue = callbackChangeProperty;
        propertyOrder.refreshActions();
        
        /*var propertyAddBefore = new Property("admin_bubble_add_before", PROPERTY_TYPE_CHECKBOX, "Add before","");
        propertyAddBefore.name = "";
        propertyAddBefore.setClassName(liClass);
        propertyAddBefore.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyAddBefore.getElement());
        propertyAddBefore.setCheckbox(addBefore);
        propertyAddBefore.callbackChangeValue = callbackChangeProperty;
        propertyAddBefore.refreshActions();*/            

        var propertyTypeBubble = new Property("admin_bubble_bubble_type", PROPERTY_TYPE_SELECT, "Bubble type","");
        propertyTypeBubble.name = "";
        propertyTypeBubble.setClassName(liClass);
        propertyTypeBubble.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyTypeBubble.setOptionOfSelect(listObjectValues(BubbleTypeList));   
        $lessonSection.append(propertyTypeBubble.getElement());
        //propertyElementId.setValue(listIDs[0]);
        propertyTypeBubble.callbackChangeValue = callbackChangeProperty;
        propertyTypeBubble.refreshActions();   
        
        propertyElementId = new Property("admin_bubble_element_id", PROPERTY_TYPE_SELECT, "ID element","");
        propertyElementId.setClassName(liClass);
        propertyElementId.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyElementId.setOptionOfSelect(arrayWithFirstEmptyElement(listIDs));   
        $lessonSection.append(propertyElementId.getElement());
        //propertyElementId.setValue(listIDs[0]);
        propertyElementId.callbackChangeValue = callbackChangeProperty;
        propertyElementId.refreshActions();        
                        
        var propertyTipJoint = new Property("admin_bubble_tip_joint", PROPERTY_TYPE_SELECT, "Tip joint","");
        propertyTipJoint.name = "";
        propertyTipJoint.setClassName(liClass);
        propertyTipJoint.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyTipJoint.setOptionOfSelect(tipJointList, true);
        propertyTipJoint.setValue("top");
        $lessonSection.append(propertyTipJoint.getElement());
        //propertyTipJoint.setValue(tipJointList[0]);
        propertyTipJoint.callbackChangeValue = callbackChangeProperty;
        propertyTipJoint.refreshActions();                   
        
        var propertyOffsetX = new Property("admin_bubble_offset_x", PROPERTY_TYPE_TEXT, "Offset X","");
        propertyOffsetX.name = "";
        propertyOffsetX.setClassName(liClass);
        propertyOffsetX.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyOffsetX.getElement());
        propertyOffsetX.setNumeric(true, true);
        propertyOffsetX.callbackChangeValue = callbackChangeProperty;
        propertyOffsetX.refreshActions();   
        
        var propertyOffsetY = new Property("admin_bubble_offset_y", PROPERTY_TYPE_TEXT, "Offset Y","");
        propertyOffsetY.name = "";
        propertyOffsetY.setClassName(liClass);
        propertyOffsetY.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyOffsetY.getElement());
        propertyOffsetY.setNumeric(true, true);
        propertyOffsetY.callbackChangeValue = callbackChangeProperty;
        propertyOffsetY.refreshActions();   
        
        /*var propertyFixedPos = new Property("admin_bubble_fixed_position", PROPERTY_TYPE_CHECKBOX, "Fixed location","");
        propertyFixedPos.name = "";
        propertyFixedPos.setClassName(liClass);
        propertyFixedPos.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyFixedPos.getElement());
        propertyFixedPos.callbackChangeValue = callbackChangeProperty;
        propertyFixedPos.refreshActions(); */
        
        var propertyTitle = new Property("admin_bubble_title", PROPERTY_TYPE_TEXT, "Title","");
        propertyTitle.name = "";
        propertyTitle.setClassName(liClass);
        propertyTitle.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyTitle.getElement());
        propertyTitle.callbackChangeValue = callbackChangeProperty;
        propertyTitle.refreshActions();   

        var propertyText = new Property("admin_bubble_text", PROPERTY_TYPE_TEXTAREA, "Text","");
        propertyText.name = "";
        propertyText.setClassName(liClass);
        propertyText.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyText.styleRight = "width:250px;height:160px;font-size: 11px;"; 
        $lessonSection.append(propertyText.getElement());
        propertyText.callbackChangeValue = callbackChangeProperty;
        propertyText.refreshActions();        
        $("#admin_bubble_text_parent").css({"height": "180px"});
        
        
        var propertyText2 = new Property("admin_bubble_text2", PROPERTY_TYPE_TEXTAREA, "Text 2","");
        propertyText2.name = "";
        propertyText2.setClassName(liClass);
        propertyText2.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyText2.styleRight = "width:250px;height:160px;font-size: 11px;"; 
        $lessonSection.append(propertyText2.getElement());
        propertyText2.callbackChangeValue = callbackChangeProperty;
        propertyText2.refreshActions();        
        $("#admin_bubble_text2_parent").css({"height": "180px"});
                
        
        var propertyTitleBtnPlay = new Property("admin_bubble_title_btn_play", PROPERTY_TYPE_TEXT, "Title Play","");
        propertyTitleBtnPlay.name = "";
        propertyTitleBtnPlay.setClassName(liClass);
        propertyTitleBtnPlay.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyTitleBtnPlay.getElement());
        //propertyTitleBtnPlay.setValue("Play mp3");
        propertyTitleBtnPlay.callbackChangeValue = callbackChangeProperty;
        propertyTitleBtnPlay.refreshActions();          

        var propertyTitleBtnNext = new Property("admin_bubble_title_btn_next", PROPERTY_TYPE_TEXT, "Title Next","");
        propertyTitleBtnNext.name = "";
        propertyTitleBtnNext.setClassName(liClass);
        propertyTitleBtnNext.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyTitleBtnNext.getElement());
        //propertyTitleBtnNext.setValue("Next >>");
        propertyTitleBtnNext.callbackChangeValue = callbackChangeProperty;
        propertyTitleBtnNext.refreshActions();       
                    
        /*var propertyShadow = new Property("admin_bubble_background_shadow", PROPERTY_TYPE_CHECKBOX, "Background shadow","");
        propertyShadow.name = "";
        propertyShadow.setClassName(liClass);
        propertyShadow.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyShadow.getElement());
        propertyShadow.callbackChangeValue = callbackChangeProperty;
        propertyShadow.refreshActions(); */
                         
        propertyConditionType = new Property("admin_bubble_condition_type", PROPERTY_TYPE_SELECT, "Action required to be performed by user","");
        propertyConditionType.name = "";
        propertyConditionType.setClassName(liClass);
        propertyConditionType.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionType.setOptionOfSelect(arrayWithFirstEmptyElement(conditionTypes));   
        $lessonSection.append(propertyConditionType.getElement());
        propertyConditionType.callbackChangeValue = callbackChangeProperty;
        propertyConditionType.refreshActions();  
        
        $lessonSection.append('<div id="admin_panel_condition_params"></div>');
        var $params = $("#admin_panel_condition_params");        
        
        /*var propertyAutoNext = new Property("admin_bubble_auto_next", PROPERTY_TYPE_CHECKBOX, "Auto next after action","");
        propertyAutoNext.name = "";
        propertyAutoNext.setClassName(liClass);
        propertyAutoNext.setTemplate(templateData.widthAll,templateData.leftWidth);  
        $lessonSection.append(propertyAutoNext.getElement());
        propertyAutoNext.setCheckbox(true);
        propertyAutoNext.callbackChangeValue = callbackChangeProperty;
        propertyAutoNext.refreshActions();
        */                                                     
       
        var propertyConditionParamDropElement = new Property("admin_bubble_condition_param_drop_element", PROPERTY_TYPE_SELECT, "Condition param","");
        propertyConditionParamDropElement.name = "";
        propertyConditionParamDropElement.setClassName(liClass);
        propertyConditionParamDropElement.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamDropElement.setOptionOfSelect(arrayWithFirstEmptyElement(contidionParamsDropElement));   
        $params.append(propertyConditionParamDropElement.getElement());
        propertyConditionParamDropElement.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamDropElement.refreshActions();      

        var propertyConditionParamActionType = new Property("admin_bubble_condition_param_action_type", PROPERTY_TYPE_SELECT, "Condition param","");
        propertyConditionParamActionType.name = "";
        propertyConditionParamActionType.setClassName(liClass);
        propertyConditionParamActionType.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamActionType.setOptionOfSelect(arrayWithFirstEmptyElement(actionList()));   
        $params.append(propertyConditionParamActionType.getElement());
        propertyConditionParamActionType.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamActionType.refreshActions(); 
        
        var propertyConditionParamChangeText = new Property("admin_bubble_condition_param_change_text", PROPERTY_TYPE_TEXT, "Condition param","");
        propertyConditionParamChangeText.name = "";
        propertyConditionParamChangeText.setClassName(liClass);
        propertyConditionParamChangeText.setTemplate(templateData.widthAll,templateData.leftWidth);
        $params.append(propertyConditionParamChangeText.getElement());
        propertyConditionParamChangeText.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamChangeText.refreshActions();     
        
        var propertyConditionParamChangeProperty = new Property("admin_bubble_condition_param_change_property", PROPERTY_TYPE_SELECT, "Condition param","");
        propertyConditionParamChangeProperty.name = "";
        propertyConditionParamChangeProperty.setClassName(liClass);
        propertyConditionParamChangeProperty.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamChangeProperty.setOptionOfSelect(arrayWithFirstEmptyElement(contidionParamsActionParams));           
        $params.append(propertyConditionParamChangeProperty.getElement());
        propertyConditionParamChangeProperty.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamChangeProperty.refreshActions();   
        
        var propertyConditionParamChangeBoard = new Property("admin_bubble_condition_param_change_board", PROPERTY_TYPE_SELECT, "Condition param","");
        propertyConditionParamChangeBoard.name = "";
        propertyConditionParamChangeBoard.setClassName(liClass);
        propertyConditionParamChangeBoard.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamChangeBoard.setOptionOfSelect(arrayWithFirstEmptyElement(application.screensNameList));           
        $params.append(propertyConditionParamChangeBoard.getElement());
        propertyConditionParamChangeBoard.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamChangeBoard.refreshActions();        

        var propertyConditionParamChangeCode = new Property("admin_bubble_condition_param_change_code", PROPERTY_TYPE_SELECT, "Condition param","");
        propertyConditionParamChangeCode.name = "";
        propertyConditionParamChangeCode.setClassName(liClass);
        propertyConditionParamChangeCode.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamChangeCode.setOptionOfSelect(arrayWithFirstEmptyElement(codeEditor.getListOfFiles()));           
        $params.append(propertyConditionParamChangeCode.getElement());
        propertyConditionParamChangeCode.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamChangeCode.refreshActions();                      
        
        var propertyConditionParamWriteCode = new Property("admin_bubble_condition_param_write_code", PROPERTY_TYPE_TEXTAREA, "Write code","");
        propertyConditionParamWriteCode.name = "";
        propertyConditionParamWriteCode.setClassName(liClass);
        propertyConditionParamWriteCode.setTemplate(templateData.widthAll,templateData.leftWidth);
        propertyConditionParamWriteCode.styleRight = "width:240px;height:120px;"; 
        $params.append(propertyConditionParamWriteCode.getElement());
        propertyConditionParamWriteCode.callbackChangeValue = callbackChangeProperty;
        propertyConditionParamWriteCode.refreshActions();               
        $("#admin_bubble_condition_param_write_code_parent").css({"height": "140px"});

        hideChildren("admin_panel_condition_params");
        
        $lessonSection.append('<div id="admin_panel_record_section"></div>');                  
        $lessonSection.append('<div id="wami" style="height: 138px;"></div>');        
        setupRecorder();             
        
        // FILES
        
        var propertyMp3File = new Property("mp3_file", PROPERTY_TYPE_FILE, "Mp3 File","");
        propertyMp3File.acceptFile = "audio/*";
        propertyMp3File.setClassName(liClass);
        propertyMp3File.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertyMp3File.getElement());
        propertyMp3File.callbackChangeValue = callbackChangeProperty;
        propertyMp3File.refreshActions();     
        
        $lessonSection.append('<p id="mp3_file_preview"><audio controls height="80"><source type="audio/wave"><source type="audio/mpeg">Your browser does not support HTML5 video.</audio><br /><span style="color:#000;cursor:pointer;">Remove audio</span></p><img id="mp3_file_preview_indicator" src="/gamedesigner/media/img/indicator.gif" style="display:none;">');
        
                
        //$list.append('<div id="administrator_panel_mp3_file_name"></div>');        
        //$("#administrator_panel_mp3_file_name").text("mp3 is not set");
        
        var propertyVideoFile = new Property("video_file", PROPERTY_TYPE_FILE, "Video File","");
        propertyVideoFile.acceptFile = "video/*";
        propertyVideoFile.setClassName(liClass);
        propertyVideoFile.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertyVideoFile.getElement());
        propertyVideoFile.callbackChangeValue = callbackChangeProperty;
        propertyVideoFile.refreshActions();
        
        // /gamedesigner/media/upload/tutorial/'+lessonId+'/'+data.video+'
        $lessonSection.append('<p id="video_file_preview"><video controls width="330"><source type="video/mp4">Your browser does not support HTML5 video.</video><br /><span style="color:#000;cursor:pointer;">Remove video</span></p><img id="video_file_preview_indicator" src="/gamedesigner/media/img/indicator.gif" style="display:none;">');
        
        var propertyImageFile = new Property("image_file", PROPERTY_TYPE_FILE, "Image File","");
        propertyImageFile.acceptFile = "image/*";
        propertyImageFile.setClassName(liClass);
        propertyImageFile.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertyImageFile.getElement());
        propertyImageFile.callbackChangeValue = callbackChangeProperty;
        propertyImageFile.refreshActions();
        
        // /gamedesigner/media/upload/tutorial/'+lessonId+'/'+data.image+'
        $lessonSection.append('<p id="image_file_preview"><img style="padding: 6px;max-width:330px;"><br /><span style="color:#000;cursor:pointer;">Remove image</span></p><img id="image_file_preview_indicator" src="/gamedesigner/media/img/indicator.gif"  style="display:none;">');        
        
        var propertyRemoveBubble = new Property("remove_bubble", PROPERTY_TYPE_BUTTON, "","");
        propertyRemoveBubble.setClassName(liClass);
        propertyRemoveBubble.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertyRemoveBubble.getElement());
        propertyRemoveBubble.setValue("DELETE BUBBLE");
        propertyRemoveBubble.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertyRemoveBubble.refreshActions();            
                         
        var propertySubmit = new Property("submit", PROPERTY_TYPE_BUTTON, "","");
        propertySubmit.setClassName(liClass);
        propertySubmit.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertySubmit.getElement());
        propertySubmit.setValue("SUBMIT BUBBLE");
        propertySubmit.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertySubmit.refreshActions();         
          
        $lessonSection.append("<br /><br /><br />"); 
        //$lessonSection.append("<hr />"); 

        /*
        var propertyCopyStartProject = new Property("copy_start_project", PROPERTY_TYPE_BUTTON, "","");
        propertyCopyStartProject.setClassName(liClass);
        propertyCopyStartProject.setTemplate(templateData.widthAll,templateData.leftWidth);   
        $lessonSection.append(propertyCopyStartProject.getElement());
        propertyCopyStartProject.setValue("COPY PROJECT AS START");
        propertyCopyStartProject.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
        propertyCopyStartProject.refreshActions();

        if (isEditStart) {
            var propertyCopyEndProject = new Property("copy_end_project", PROPERTY_TYPE_BUTTON, "","");
            propertyCopyEndProject.setClassName(liClass);
            propertyCopyEndProject.setTemplate(templateData.widthAll,templateData.leftWidth);   
            $lessonSection.append(propertyCopyEndProject.getElement());
            propertyCopyEndProject.setValue("COPY PROJECT AS END");
            propertyCopyEndProject.addAction(PROPERTY_ACTION_CLICK, callbackChangeProperty);
            propertyCopyEndProject.refreshActions();
        }
        */ 
        
        
        $lessonSection.append("<br /><br />");          
                 
        setDefaultForm();
        changeLesson();
    }
    
    var hideChildren = function(id) {
        var $params = $("#"+id);//,
            //elementCompare = $("#admin_bubble_condition_param_change_code")[0];
        $params.children("*").each(function() {              
           //if ( $(this)[0] != admin_bubble_condition_param_change_code) {
               $(this).val("");
          //}
           $(this).css({"display": "none"});
        });        
    }    
    
    
    
    var messageCancelModifiedBubble = function(callbackYes, callbackNo) {
        messageDialog.showWithTwoButtons("Bubble modified", "Bubble został zmodyfikowany bez zapisu. Czy chcesz porzucić dokonane zmiany?","Tak","Nie", callbackYes, callbackNo);            
    }
    
    
    var callbackChangeProperty = function(propertyObj, value) {
        
        if (propertyObj.id == "admin_bubble_lesson_id") {
            bubbleObj.lesson_id = value;
            bubbleObjDefault.lesson_id = value;
            changeLesson();
        } else if (propertyObj.id == "admin_bubble_order") {   
            
            function switchChangeStep() {
                changeStep(value);
            }
            /*if (wasModifiedBubble) { 
                messageCancelModifiedBubble(function(){
                    switchChangeStep();                    
                    wasModifiedBubble = false;
                }, function() { // No                    
                    propertyObj.backToOldValue();
                    //propertyObj.setOldValue(value);
                });
            } else {
                switchChangeStep();                
            }*/
           switchChangeStep();
                        
        } /*else if (propertyObj.id == "admin_bubble_add_before") {         
            addBefore = propertyObj.getChecked();
            if (addBefore) {
                setDefaultForm();
            } else {
                changeStep(bubbleObjDefault.order+1);
            }
        } */else if (propertyObj.id == "admin_bubble_bubble_type") {
            bubbleObj.content.bubbleType = value;
            changeBubbleType({changeView:true, changeValues:true});
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_tip_joint") {
            bubbleObj.content.tipOptions.tipJoint = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_element_id") {
            bubbleObj.content.trigger = value;   
            bubbleObj.content.tipData.completionConditionParams.id = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_offset_x") {
            if (!value) {
                value = 0;
                $("#admin_bubble_offset_x").val(value);
            }
            bubbleObj.content.tipData.position.x = value;
            wasModifiedBubble = true;   
        } else if (propertyObj.id == "admin_bubble_offset_y") {
            if (!value) {
                value = 0;
                $("#admin_bubble_offset_y").val(value);
            }
            bubbleObj.content.tipData.position.y = value;
            wasModifiedBubble = true;   
        } else /*if (propertyObj.id == "admin_bubble_fixed_position") {            
            bubbleObj.content.tipData.hasPosition = propertyObj.getChecked();   
        } else*/if (propertyObj.id == "admin_bubble_title") {
            bubbleObj.content.tipOptions.title = value;   
        } else if (propertyObj.id == "admin_bubble_text") {
            value = Convert.nl2br(value);
            bubbleObj.content.tipData.text = value;
            wasModifiedBubble = true;   
        } else if (propertyObj.id == "admin_bubble_text2") {
            value = Convert.nl2br(value);
            bubbleObj.content.tipData.text2 = value;
            wasModifiedBubble = true;   
        } else if (propertyObj.id == "admin_bubble_title_btn_next") {
            bubbleObj.content.tipData.nextHtml = value;
            wasModifiedBubble = true;   
        } else if (propertyObj.id == "admin_bubble_title_btn_play") {
            bubbleObj.content.tipData.playHtml = value;              
            wasModifiedBubble = true;
        } /*else if (propertyObj.id == "admin_bubble_auto_next") {
            bubbleObj.content.tipData.autoNext = propertyObj.getChecked();
            
            if (bubbleObj.content.tipData.autoNext) {
                bubbleObj.content.tipData.isNextEnabled = false;
            } else {
                bubbleObj.content.tipData.isNextEnabled = true;
            }            
            
        } else if (propertyObj.id == "admin_bubble_background_shadow") {
            bubbleObj.content.tipData.isShadowBackground = propertyObj.getChecked();    
        }*/ else if (propertyObj.id == "admin_bubble_condition_type") {
            bubbleObj.content.tipData.completionConditionType = value;
            hideChildren("admin_panel_condition_params");
            if (value) {
                bubbleObj.content.tipData.autoNext = true;
                setListConditionParams(value);
            } else {
                bubbleObj.content.tipData.autoNext = false;
            }        
            if (bubbleObj.content.tipData.autoNext) {
                bubbleObj.content.tipData.isNextEnabled = false;
            } else {
                bubbleObj.content.tipData.isNextEnabled = true;
            }             
            wasModifiedBubble = true;   
        } else if (propertyObj.id == "admin_bubble_condition_param_drop_element") {
            bubbleObj.content.tipData.completionConditionParams.type = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_condition_param_action_type") {
             bubbleObj.content.tipData.completionConditionParams.actionType = value;
             wasModifiedBubble = true;             
        } else if (propertyObj.id == "admin_bubble_condition_param_change_text") {
            bubbleObj.content.tipData.completionConditionParams.text = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_condition_param_change_property") {
            bubbleObj.content.tipData.completionConditionParams.id = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_condition_param_change_board") {
            bubbleObj.content.tipData.completionConditionParams.text = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_condition_param_change_code") {
            //value = Convert.nl2br(value);
            bubbleObj.content.tipData.completionConditionParams.board = value;
            bubbleObjDefault.content.tipData.completionConditionParams.board = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_condition_param_write_code") {
            //value = Convert.nl2br(value);
            bubbleObj.content.tipData.completionConditionParams.textarea = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "admin_bubble_is_writing_at_the_end") {
            bubbleObj.content.isWritingAtTheEnd = value;
            wasModifiedBubble = true;
        } else if (propertyObj.id == "mp3_file") {
            if (value) {
                bubbleObj.mp3_file_name = Generate.randomCharacters(16)+"."+extensionFromFilename(value);
            } else {
                bubbleObj.mp3_file_name = "";
            }            
            bubbleObj.content.tipData.mp3 = "";//bubbleObj.mp3_file_name;            
            bubbleObj.mp3_type = 0; // file
            bubbleObj.content.tipData.mp3Type = 2; // file  
            ajaxSendFile("audio", propertyObj.id, bubbleObj.mp3_file_name);
            wasModifiedBubble = true;          
             //$("#administrator_panel_mp3_file_name").text("mp3 is set (FORM) - "+bubbleObj.mp3_file_name);
        } else if (propertyObj.id == "video_file") {
            if (value) {
                bubbleObj.video_file_name = Generate.randomCharacters(16)+"."+extensionFromFilename(value);
            } else {
                bubbleObj.video_file_name = "";
            }
            bubbleObj.content.tipData.video = "";//bubbleObj.video_file_name;
            ajaxSendFile("video", propertyObj.id, bubbleObj.video_file_name);
            wasModifiedBubble = true;
        } else if (propertyObj.id == "image_file") {
            if (value) {
                bubbleObj.image_file_name = Generate.randomCharacters(16)+"."+extensionFromFilename(value);
            } else {
                bubbleObj.image_file_name = "";
            }
            bubbleObj.content.tipData.image = "";//bubbleObj.image_file_name;
            ajaxSendFile("image", propertyObj.id, bubbleObj.image_file_name);            
            wasModifiedBubble = true;
        } else if (propertyObj.id == "submit") {
            ajaxSaveBubble();
        } else if (propertyObj.id == "remove_bubble") {
            ajaxDeleteBubble();
        } else if (propertyObj.id == "admin_bubble_create_new_bubble") { 
            if (wasModifiedBubble) { 
                messageCancelModifiedBubble(function(){
                    setDefaultForm();
                    setNewMode();
                    wasModifiedBubble = false;                    
                });
            } else {
                setDefaultForm();
                setNewMode();                
            }         
        } else if (propertyObj.id == "admin_bubble_create_new_bubble_before") {            
            function switchToEditModeBefore() {
                setEditMode(0, true);
            }
            if (wasModifiedBubble) { 
                messageCancelModifiedBubble(function(){
                    switchToEditModeBefore();
                    wasModifiedBubble = false;
                });
            } else {
                switchToEditModeBefore();
            }         
        } else if (propertyObj.id == "admin_bubble_edit_bubble") {
            function switchToEditMode() {
                setEditMode(0);
            }
            if (wasModifiedBubble) { 
                messageCancelModifiedBubble(function(){
                    switchToEditMode();
                    wasModifiedBubble = false;
                });
            } else {
                switchToEditMode();
            }                        
        } else if (propertyObj.id == "copy_start_project") {
            
            function setProjectAsStart() {
                AjaxTutorial.ajaxCopyToStartProject({
                    data:{
                        lesson_id: that.lessonId,
                        project_id: appId
                    },
                    success: function() {
                      changeLesson();
                      messageDialog.show("Projekt", "Projekt zapisany jako startowy.", "OK");              
                    },
                    error: function() {
                      messageDialog.show("Projekt", "Error.", "OK");
                    }  
                });
            }            
            messageDialog.showWithTwoButtons("Projekt", "Czy na pewno chcesz ustawić aktualny stan projektu jako startowy?","Tak","Nie", setProjectAsStart);            
        } else if (propertyObj.id == "copy_end_project") {
            
            function setProjectAsFinal() {
                AjaxTutorial.ajaxCopyToEndProject({
                    data:{
                        lesson_id: that.lessonId,
                        project_id: appId
                    },
                    success: function() {
                    },
                    error: function() {
                      messageDialog.show("Project", "Error.", "OK");
                    }  
                });
            }
            messageDialog.showWithTwoButtons("Project", "Are you sure?","Tak", "Nie", setProjectAsFinal);
   
        }
        
        refreshLog();
        refreshTip();        
    }
        
        
    var arrayOfNumberListTo = function(max) {
        var result = [];
        for(var i=1; i <= max; i++) {
            result.push(i);
        }
        return result;
    }
    var filenameFromPath = function(path) {
        var filename = path,
            lastIndex = filename.lastIndexOf("\\");
        if (lastIndex >= 0) {
            filename = filename.substring(lastIndex + 1);
        }   
        return filename;
    }  
    var extensionFromFilename = function(path) {
        var extension = filenameFromPath(path),
            lastIndex = extension.lastIndexOf(".");
        if (lastIndex >= 0) {
            extension = extension.substring(lastIndex + 1);
        }   
        return extension;
    }      
    var refreshLog = function() {
        //$("#administrator_panel_log").text(JSON.stringify(bubbleObj));
        console.log(JSON.stringify(bubbleObj));
    }
    var removeTipPreview = function() {
        if (tipInstance) {
            tipInstance.deactivate();
            //tipInstance = null;
        }
    }
    
    var refreshTip = function(options) {
        removeTipPreview();
        bubbleObj.content.tipOptions.group = "lesson"; //null;
        
        var copyBubble = $.extend(true, {}, bubbleObj),
            step = copyBubble.order+1,
            countStep = bubbles.length,
            stringStep = "";
        if (step <= countStep) {
            stringStep = "("+(copyBubble.order+1)+"/"+bubbles.length+") ";
        }
        
        copyBubble.content.tipOptions.title = stringStep+copyBubble.content.tipOptions.title;
        var tipOpt = $.extend(true,{}, copyBubble.content.tipOptions);  
        copyBubble.content.tipOptions = $.extend(true,{}, TipsFactory.defaultTipOptions);
        copyBubble.content.tipOptions = $.extend(true, copyBubble.content.tipOptions, tipOpt);
        
        if (options && options.trigger) {
            copyBubble.content.trigger = options.trigger;
        }
        
        if (copyBubble.content.trigger) {
            tipInstance = TipsFactory.createCustomTip("#"+copyBubble.content.trigger, copyBubble.content.tipOptions, copyBubble.content.tipData);
            tipInstance.show();
            $("#"+copyBubble.content.tipData.idMp3).corner("");
            $("#"+copyBubble.content.tipData.idNext).corner("");
            $(".ot-close").click(function() {            
                tipInstance.hide();
            });
        }
    }
    
    var deepRemoveTip = function() {
        refreshTip({
            trigger: "target_top_left"
        });
        removeTipPreview();
    }
    
    var setBorderField = function(id, result) {
        var field = $("#"+id)
        if (!field.val()) {
            field.css({"border": "2px solid #ff0000"});
            result.areBad = true;
        } else {
            field.css({"border": "0px"});
        }
    }
    
    var areBadFields = function() {
        var result = {areBad:false};
        //setBorderField("admin_bubble_lesson_id", result);
        //setBorderField("admin_bubble_order", result); // zablokowane bo moze byc rowniez order_title
        //setBorderField("admin_bubble_order_title", result); // zablokowane bo moze byc rowniez order_title
        setBorderField("admin_bubble_element_id", result);
        setBorderField("admin_bubble_tip_joint", result);
        //setBorderField("admin_bubble_condition_type", result);
        return result.areBad;
    }
    
    
    var ajaxSaveBubble = function() {
        if (areBadFields()) {
            alert("Undefined field. Please correct it and try submit again.");
            return;
        }
        
        var fd = new FormData(document.getElementById(that.idAdministratorForm));
        fd.append("action", "save_bubble");
        fd.append("lesson_id", that.lessonId);
        fd.append("ordera", bubbleObj.order);
        //if (bubbleObj.mp3_type) {
            fd.append("mp3_record", bubbleObj.mp3_type); // 0 - form data
        //}
        if (addBefore) {
            fd.append("add_before", "true");
        }
        if (bubbleObj.mp3_file_name) {
            fd.append("mp3_file_name", bubbleObj.mp3_file_name);
        }
        if (bubbleObj.video_file_name) {
            fd.append("video_file_name", bubbleObj.video_file_name);
        }
        if (bubbleObj.image_file_name) {
            fd.append("image_file_name", bubbleObj.image_file_name);
        }
        fd.append("content", JSON.stringify(bubbleObj.content));
        
        $.ajax({
          url: that.urlPOST,
          type: "POST",
          data: fd,
          processData: false,  // tell jQuery not to process the data
          contentType: false,   // tell jQuery not to set contentType
          success: function(result) {
             
              var tempOrderBeforeRefresh = bubbleObjDefault.order;              
              changeLesson();
              setEditMode(tempOrderBeforeRefresh);
              wasModifiedBubble = false;
                                      
              function addNew() {
                  changeLesson();
                  jumpToRightTopCorner();
              }
              function editCurrent() {
                  window.setTimeout(function() {
                      jumpToRightTopCorner();
                  }, 200);
                  
              }
              messageDialog.showWithTwoButtons("Bubble added/updated.", "Bubble został zapisany. Teraz chcesz dodać nowy czy edytować aktualnie dodany?","Dodaj nowy","Edytuj dodany", addNew, editCurrent);                          
              messageDialog.setPositionRight({ 
                  top: 100 ,//$(document).height()*(3/5), 
                  left: $(document).width() - 400 });
              $(window).scrollLeft(1000);
          },
          error: function() {
              messageDialog.show("Bubble added/updated.", "Error. Bubble nie zapisany.", "OK");
          }
        });   
    }
    
    var setFilePreview = function(type, filename) {

      if (type == "audio") {
        bubbleObj.content.tipData.mp3 = filename;
        bubbleObj.content.tipData.mp3_file_name = filename;        
        if (filename) {
            $("#mp3_file_preview").css("display","block");
            $("#mp3_file_preview > audio source").attr("src","/gamedesigner/media/upload/tutorial/"+that.lessonId+"/"+filename);
            $("#mp3_file_preview > audio")[0].load();
            
            $("#mp3_file_preview_indicator").css("display","block");
            $("#mp3_file_preview > audio")[0].addEventListener('canplaythrough', function() {
                $("#mp3_file_preview_indicator").css("display","none");
            });

            $("#mp3_file_preview > span").click(function() {
                bubbleObj.content.tipData.mp3Type = 3;
                bubbleObj.content.tipData.mp3 = "";
                bubbleObj.content.tipData.mp3_file_name = "";                
                $("#mp3_file").val("");
                $("#mp3_file_preview").css("display","none");
                refreshTip();
            });            
            
        } else {
            $("#mp3_file_preview").css("display","none");
        }
      } else if (type == "image") {
        bubbleObj.content.tipData.image = filename;
        bubbleObj.content.tipData.image_file_name = filename;
        if (filename) {
            $("#image_file_preview").css("display","block");
            $("#image_file_preview > img").attr("src","/gamedesigner/media/upload/tutorial/"+that.lessonId+"/"+filename);
            
            $("#image_file_preview_indicator").css("display","block");
            $("#image_file_preview > img").one('load', function() {
              $("#image_file_preview_indicator").css("display","none");
            }).each(function() {
              if(this.complete) $(this).load();
            });
             
             
            $("#image_file_preview > span").click(function() {
                bubbleObj.content.tipData.image = "";
                bubbleObj.content.tipData.image_file_name = "";
                $("#image_file").val("");
                $("#image_file_preview").css("display","none");
                refreshTip();
            });
            
        } else {
            $("#image_file_preview").css("display","none");
        }
      } else if (type == "video") {
        bubbleObj.content.tipData.video = filename;
        bubbleObj.content.tipData.video_file_name = filename;        
        if (filename) {
            $("#video_file_preview").css("display","block");
            $("#video_file_preview > video > source").attr("src","/gamedesigner/media/upload/tutorial/"+that.lessonId+"/"+filename);
            $("#video_file_preview > video")[0].load();
            
            $("#video_file_preview_indicator").css("display","block");
            $("#video_file_preview > video")[0].addEventListener('canplaythrough', function() {
                $("#video_file_preview_indicator").css("display","none");
            });
            
            $("#video_file_preview > span").click(function() {
                bubbleObj.content.tipData.video = "";
                bubbleObj.content.tipData.video_file_name = "";
                $("#video_file").val("");
                $("#video_file_preview").css("display","none");
                refreshTip();
            });            
            
        } else {
            $("#video_file_preview").css("display","none");
        }
      }
      refreshTip();      
    }
    
    var ajaxSendFile = function(type, idFileInputElement, filename) { // document.getElementById(that.idAdministratorForm)
      
        var fd = new FormData();
        fd.append("action", "upload_file");
        fd.append("lesson_id", that.lessonId);
        if (idFileInputElement && filename) {
            fd.append("filename", filename);
            //$("#"+image_file).attr("name", "file");
            var fileInputElement = $("#"+idFileInputElement)[0];
            fd.append("file", fileInputElement.files[0], "filename");
            
            if (type == "audio") {
                $("#mp3_file_preview_indicator").css("display","block");
            } else if (type == "image") {
                $("#image_file_preview_indicator").css("display","block");
            } else if (type == "video") {
                $("#video_file_preview_indicator").css("display","block");
            }
            
            $.ajax({          
              url: that.urlPOST,
              type: "POST",
              data: fd,
              processData: false,  // tell jQuery not to process the data
              contentType: false,   // tell jQuery not to set contentType
              success: function(result) {
                  window.setTimeout(function(){
                      setFilePreview(type, filename);
                      refreshTip();
                      //messageDialog.show("Upload", "Image uploaded.", "OK");                                
                  }, 100);
              },
              error: function() {
                    if (type == "audio") {
                        $("#mp3_file_preview_indicator").css("display","none");
                    } else if (type == "image") {
                        $("#image_file_preview_indicator").css("display","none");
                    } else if (type == "video") {
                        $("#video_file_preview_indicator").css("display","none");
                    }                  
                  messageDialog.show("Upload", "Image not uploaded.", "OK");              
              }
            }); 
        } else {
            setFilePreview(type, filename);
        }
        
    }


    var ajaxDeleteBubble = function() {
        function deleteBubbleDefinitely() {
            var options = {
                data: {
                    action: "delete_bubble",
                    b_id: bubbleObj.id,
                },
                success: function() {
                  changeLesson();
                  messageDialog.show("Bubble", "Bubble removed.", "OK");              
                },
                error: function() {
                  messageDialog.show("Bubble", "Bubble not removed.", "OK");
                }            
            }
            var data = $.extend(true, { url: that.urlPOST} ,options);
            ajaxBase(data);
        }
        messageDialog.showWithTwoButtons("Bubble", "Czy na pewno skasować bubble?","Skasuj","Anuluj", deleteBubbleDefinitely);
    }    

    
}
////////////////////
// ANIMATIONS


function AnimClick() {
    var that = this;
    this.idCursor = "editor_cursor";
    this.idCursorClick = "editor_click";


    this.start = function(targetId, completeClb) {        
       var editorCursor = $("#"+that.idCursor),
           target = $("#"+targetId),
           posEndLeft = target.offset().left+target.width()/2,
           posEndTop = target.offset().top+target.height()/2,
           initialLeft = posEndLeft - 300,        
           initialTop = posEndTop - 400;
        
       editorCursor.css({"display": "block", "left": initialLeft+"px", "top": initialTop+"px"});
       editorCursor.animate({
           left: posEndLeft+"px",
           top: posEndTop+"px",
       }, 3200, "linear", function() {
           
          var editorClick = $("#"+that.idCursorClick);           
          editorClick.css({"display": "block", "left":(posEndLeft-20)+"px", "top": (posEndTop-20)+"px"});

          setTimeout(function() {
              editorCursor.css({"display": "none"});
              editorClick.css({"display": "none"});
              if (typeof completeClb === "function") {
                completeClb();
              }
          }, 400 );
            
       });  
        
    }

  
    
    
}


function PublishCode() {
    this.PUBLISH_CAN_COPY = 1;    
    this.PUBLISH_CAN_RUN = 0;    
    var optionCanCopy = "can copy";
    var optionCanRun = "can run";    
    var that = this;
    var uniqueId = 0;
    var prefixElementList = "publish_element";
    this.idDialog = "publish_code";     
    this.idOpenDialog = "publish_code_open";
    this.idPublishName = "publish_code_name";
    this.idPublishSectionDisabled = "publish_section_private_disabled";
    this.idPublishAccessPublic = "publish_access_public";
    this.idPublishAccessPrivate = "publish_access_private";
    this.idPublishList = "publish_list";
    this.idChangeEditSection = "publish_change_edit";
    this.idChangeDoneSection = "publish_change_done";
    
    
    this.idInviteInputEmail = "publish_invite_somebody_email";
    this.idInviteSelectPrivileges = "publish_invite_somebody_privileges";
    this.idInviteSelectPrivilegesSelect = "publish_invite_somebody_privileges_select";
    this.idInviteBtnSave = "publish_invite_btn_save";
    this.idChangeBtnDone = "publish_change_btn_done";
   
    this.dataListPublish = []; // store data of one person =[{id:INT, email:STRING, sharedCode:STRING },{...}]
    var typeAccessPublish = "private";  //  "public"|"private"

    $("#"+this.idDialog).dialog({
        autoOpen: false,
        resizable: false,
        modal: true,
        title: '<span class="title">PUBLISH</span>',                
        width: 500, 
        height: 500, 
        buttons: {},            
        close: function( event, ui ) {                    
        },
        open: function(event, ui) {                                                             
        },                     
    });
    

    var createSelectPrivileges = function(id_privileges) {
        var selectHTML = '<select id="'+id_privileges+'"><option value="'+that.PUBLISH_CAN_COPY+'">'+optionCanCopy+'</option><option value="'+that.PUBLISH_CAN_RUN+'">'+optionCanRun+'</option></select>';
        return selectHTML;
    }    
    
    var tmpSelectHtml = createSelectPrivileges(that.idInviteSelectPrivilegesSelect);
    $("#"+that.idInviteSelectPrivileges).append(tmpSelectHtml);
    
    
    $("#"+this.idOpenDialog).click(function(){
        var isFind = false;
        EventsNotification.exe(SequencesSystemEvents.EVENT_CLICK_ELEMENT, {id: $(this)[0].id}, function(r){ if (r) isFind = true;}); if (!isFind) {Messages.tutorialWrong();return;}
        
        
        that.showDialog();        
    });   
    
    $("#"+this.idChangeBtnDone).click(function(){
        if (codeEditor.canCompile()) {
            //messageDialog.show("Publish", "Publication OK ", "OK");
            that.publish();
        } else {
            browserEmulator.backToPrevScreen();
            messageDialog.show("Publish", "Code is incorrect. ", "OK"); 
        }
    });    
    
    $("#"+this.idInviteBtnSave).click(function(){
        var emailToAdd = $("#"+that.idInviteInputEmail).val();
        var privileges = $("#"+that.idInviteSelectPrivilegesSelect).val();
        var existEmail = existEmailInList(emailToAdd);
        
        if (validateEmail(emailToAdd) && !existEmail) {
            that.addPublish(emailToAdd, privileges);
            $("#"+that.idInviteInputEmail).val("");
            //alert(privileges);
        } else {
            alert("Email is incorrect or duplicate.");
        }
    });
    
    $("#"+that.idPublishAccessPublic).click(function(){
        that.setAccessPublic();
    });
    
    $("#"+that.idPublishAccessPrivate).click(function(){
        that.setAccessPrivate();
    });    
    
    $("#"+this.idPublishList).scroll(function() {
        var scrollTop = $( this ).scrollTop();
        if (scrollTop > 0) {
            $( this ).css("border-top", "2px solid #ddd");
        } else {
            $( this ).css("border-top", "1px solid #ddd");
        }
    }); 
    
    var validateEmail = function(email) { 
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }     
    
    this.showDialog = function() {
        $( "#"+this.idDialog ).dialog("open");
    }
    
    this.closeDialog = function() {
        $( "#"+this.idDialog ).dialog("close");
    }    
    
    this.setAccessPublic = function() {
        $("#"+that.idPublishSectionDisabled).css("display", "block");
        typeAccessPublish = "public";        
    }
    
    this.setAccessPrivate = function() {
       $("#"+that.idPublishSectionDisabled).css("display", "none"); 
       typeAccessPublish = "private";
    }
    this.setAccessPrivate(); // execute after created method
        
    var getId = function(string) {
        return parseInt(string.replace( /^\D+/g, ''));
    }
    
    var getDataPublishById = function(id) {
        for(var i=0; i < that.dataListPublish.length; i++) {
            if (that.dataListPublish[i].id == id) {
                return that.dataListPublish[i];
            }
        }
        return null;
    }
    
    var existEmailInList = function(email) {
        for(var i=0; i < that.dataListPublish.length; i++) {
            if (that.dataListPublish[i].email == email) {
                return true;
            }
        }
        return false;
    }    


    this.addPublish = function(email, sharedCode) {
        uniqueId++; 
        var id = prefixElementList+uniqueId,
            id_privileges = prefixElementList+uniqueId+"_privileges",
            id_remove = prefixElementList+uniqueId+"_remove";
        var htmlSelect = createSelectPrivileges(id_privileges);
        var templates = '<li id="'+id+'"><div style="float:left;width:300px;">'+email+'</div><div style="float:left;width:100px;">'+htmlSelect+'</div><div style="float:left;width:20px;"><span id="'+id_remove+'" style="cursor: pointer;">X</span></div></li>';
        $("#"+that.idPublishList).append(templates);                
        $("#"+id_privileges).val(sharedCode);  
        
        $("#"+id_privileges).change(function(){
            var idElement = getId($(this)[0].id);
            var element = getDataPublishById(idElement);
            
            if (element) {
                var _sharedCode = $(this).val();
                element.sharedCode = _sharedCode;
            }
            console.log(JSON.stringify(that.dataListPublish));
            
            //alert(idString+" "+_sharedCode+"  "+getId(idString)+" ");
        }); 
        
        $("#"+id_remove).click(function(){
            var idElement = getId($(this)[0].id);
            var element = getDataPublishById(idElement);
            var index = that.dataListPublish.indexOf(element);
            if (index > -1) {
                that.dataListPublish.splice(index, 1);
            }
            $("#"+prefixElementList+idElement).remove();
        });
                
        that.dataListPublish.push({
            id: uniqueId,
            nameId: id,
            email: email,
            sharedCode: sharedCode
        });
        
        
    }
    
    this.clearList = function() {
        $("#"+that.idPublishList).html("");  
        this.dataListPublish.length = 0;       
    }
    
    this.publish = function() {
        var publishName = $("#"+that.idPublishName).val();
        var clearWhenError = false;
        if (publishName) {
            if (that.dataListPublish.length > 0 || typeAccessPublish == "public") {
                    
                var releasePublish = 1; // release private (backup for some user)           
                if (typeAccessPublish == "public") {
                    releasePublish = 2; // release public (backup for all user)   
                }
                                
                copyApp(appId, userId, publishName, releasePublish, userId, {
                    async:true,
                    success: function(result) {
                        
                        var __app_id = result.id;
                        
                        addPublish(__app_id, publishName, (new Date()).toUTCString(), "1.0.0", {
                            success: function(result) {
                                var idPublish = result.id,
                                    sendAllEmail = true,
                                    idEmailsList = [];
                               
                                if (typeAccessPublish == "private") {                                
                                    for(var i=0; i < that.dataListPublish.length; i++) {
                                        var singlePublish = that.dataListPublish[i];
                                        addPublishEmail(idPublish, singlePublish.email, singlePublish.sharedCode, {
                                            async: false,  
                                            success: function(result) {
                                                idEmailsList.push(result.id);  
                                            },
                                            error: function() {
                                                sendAllEmail = false;
                                            }
                                        });
                                    }
                                }
            
                                if (sendAllEmail) {
                                    that.closeDialog();
                                    that.clearList();
                                    messageDialog.show("Publish", "Publication successful.", "OK"); 
                                } else {
                                                     
                                    messageDialog.show("Publish", "Publication unsuccessful.", "OK");
                                    // clear data from server
                                    for(var i=0; i < idEmailsList.length; i++) {
                                        var idEmail = idEmailsList[i];
                                        removePublishEmail(idEmail);
                                    }                            
                                    removePublish(idPublish);
                                    removeApp(__app_id);
                                }    
                            }, 
                            error: function(result) {
                                console.log("Can't add publish (name:"+publishName+")")
                            }
                        });                    

                    },
                    error: function() {
                        clearWhenError = true;
                    }
                });    
                       
                
             
            } else {                
                messageDialog.show("Publish", "First add some email.", "OK"); 
            }
        } else {
            messageDialog.show("Publish", "Name field is empty.", "OK");
            
        }
        
    }
    
    
    
    
}
////////////////////
// TREE CONDITION - DRAWING


function TreeConditionDrawing() {
    
    // options.width,  options.height
    this.createDataURLFromRpnInfo = function(rpnInfo, options) {
        var c = document.createElement("canvas"),
            ctx = c.getContext("2d");
        c.width = (options && options.width)?options.width:200;
        c.height = (options && options.height)?options.height:200;
         
        // sekcja rysowania drzewka na canvasie na podstawie rpnInfo
        ctx.fillStyle = "#FF0000";
        ctx.fillRect(0,0,150,75);
        
        ctx.font="30px Verdana";
        ctx.fillStyle = "#000000";
        ctx.fillText("Big smile!",10,10);
        
        return c.toDataURL();
    }    
}


/*
TreeConditionDrawing.prototype.createCanvasFromStatement() {
    
    
    
    this.createCanvasFromRpnInfo(rpnInfo);
}
*/
